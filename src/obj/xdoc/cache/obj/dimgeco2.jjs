id: MatrixDotNet
language: CSharp
name:
  Default: MatrixDotNet
qualifiedName:
  Default: MatrixDotNet
type: Assembly
modifiers: {}
items:
- id: MatrixDemonstrate
  commentId: N:MatrixDemonstrate
  language: CSharp
  name:
    CSharp: MatrixDemonstrate
    VB: MatrixDemonstrate
  nameWithType:
    CSharp: MatrixDemonstrate
    VB: MatrixDemonstrate
  qualifiedName:
    CSharp: MatrixDemonstrate
    VB: MatrixDemonstrate
  type: Namespace
  assemblies:
  - MatrixDotNet
  modifiers: {}
  items:
  - id: MatrixDemonstrate.Program
    commentId: T:MatrixDemonstrate.Program
    language: CSharp
    name:
      CSharp: Program
      VB: Program
    nameWithType:
      CSharp: Program
      VB: Program
    qualifiedName:
      CSharp: MatrixDemonstrate.Program
      VB: MatrixDemonstrate.Program
    type: Class
    assemblies:
    - MatrixDotNet
    namespace: MatrixDemonstrate
    source:
      remote:
        path: src/MatrixDemonstrate/Program.cs
        branch: master
        repo: https://github.com/toor1245/MatrixDotNet.git
      id: Program
      path: ../src/MatrixDemonstrate/Program.cs
      startLine: 6
    syntax:
      content:
        CSharp: 'public sealed class Program : object'
        VB: >-
          Public NotInheritable Class Program

              Inherits Object
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items: []
- id: MatrixDotNet
  commentId: N:MatrixDotNet
  language: CSharp
  name:
    CSharp: MatrixDotNet
    VB: MatrixDotNet
  nameWithType:
    CSharp: MatrixDotNet
    VB: MatrixDotNet
  qualifiedName:
    CSharp: MatrixDotNet
    VB: MatrixDotNet
  type: Namespace
  assemblies:
  - MatrixDotNet
  modifiers: {}
  items:
  - id: MatrixDotNet.Matrix`1
    commentId: T:MatrixDotNet.Matrix`1
    language: CSharp
    name:
      CSharp: Matrix<T>
      VB: Matrix(Of T)
    nameWithType:
      CSharp: Matrix<T>
      VB: Matrix(Of T)
    qualifiedName:
      CSharp: MatrixDotNet.Matrix<T>
      VB: MatrixDotNet.Matrix(Of T)
    type: Class
    assemblies:
    - MatrixDotNet
    namespace: MatrixDotNet
    source:
      remote:
        path: src/MatrixDotNet/Matrix.cs
        branch: master
        repo: https://github.com/toor1245/MatrixDotNet.git
      id: Matrix
      path: ../src/MatrixDotNet/Matrix.cs
      startLine: 12
    summary: "\nRepresents math matrix.\n"
    example: []
    syntax:
      content:
        CSharp: 'public sealed class Matrix<T> : ICloneable where T : struct'
        VB: >-
          Public NotInheritable Class Matrix(Of T As Structure)

              Inherits ICloneable
      typeParameters:
      - id: T
        description: integral type.
    inheritance:
    - System.Object
    extensionMethods:
    - MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.BitMatrixExtension.Max``1
    - MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow``1(System.Int32)
    - MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn``1(System.Int32)
    - MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.BitMatrixExtension.Min``1
    - MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.BitMatrixExtension.MinByRow``1(System.Int32)
    - MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn``1(System.Int32)
    - MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.MatrixExtension.GetRow``1(System.Int32)
    - MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.MatrixExtension.GetColumn``1(System.Int32)
    - MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.MatrixExtension.Transport``1
    - MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.MatrixExtension.ToPrimitive``1
    - MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.MatrixExtension.GetDeterminate``1
    - MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.MatrixExtension.KramerSolve``1({T}[])
    - MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.MatrixExtension.Pretty``1
    - MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.MatrixExtension.BubbleSort``1
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: MatrixDotNet.Matrix`1.Length
      commentId: P:MatrixDotNet.Matrix`1.Length
      language: CSharp
      name:
        CSharp: Length
        VB: Length
      nameWithType:
        CSharp: Matrix<T>.Length
        VB: Matrix(Of T).Length
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Length
        VB: MatrixDotNet.Matrix(Of T).Length
      type: Property
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Length
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 26
      summary: "\nGets length matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public int Length { get; }
          VB: Public ReadOnly Property Length As Integer
        parameters: []
        return:
          type: System.Int32
      overload: MatrixDotNet.Matrix`1.Length*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: MatrixDotNet.Matrix`1.Rows
      commentId: P:MatrixDotNet.Matrix`1.Rows
      language: CSharp
      name:
        CSharp: Rows
        VB: Rows
      nameWithType:
        CSharp: Matrix<T>.Rows
        VB: Matrix(Of T).Rows
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Rows
        VB: MatrixDotNet.Matrix(Of T).Rows
      type: Property
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Rows
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 31
      summary: "\nGets length row of matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public int Rows { get; }
          VB: Public ReadOnly Property Rows As Integer
        parameters: []
        return:
          type: System.Int32
      overload: MatrixDotNet.Matrix`1.Rows*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: MatrixDotNet.Matrix`1.Columns
      commentId: P:MatrixDotNet.Matrix`1.Columns
      language: CSharp
      name:
        CSharp: Columns
        VB: Columns
      nameWithType:
        CSharp: Matrix<T>.Columns
        VB: Matrix(Of T).Columns
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Columns
        VB: MatrixDotNet.Matrix(Of T).Columns
      type: Property
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Columns
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 36
      summary: "\nGets length columns of matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public int Columns { get; }
          VB: Public ReadOnly Property Columns As Integer
        parameters: []
        return:
          type: System.Int32
      overload: MatrixDotNet.Matrix`1.Columns*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: MatrixDotNet.Matrix`1.Rank
      commentId: P:MatrixDotNet.Matrix`1.Rank
      language: CSharp
      name:
        CSharp: Rank
        VB: Rank
      nameWithType:
        CSharp: Matrix<T>.Rank
        VB: Matrix(Of T).Rank
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Rank
        VB: MatrixDotNet.Matrix(Of T).Rank
      type: Property
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Rank
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 41
      summary: "\nGets rank of matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public double Rank { get; }
          VB: Public ReadOnly Property Rank As Double
        parameters: []
        return:
          type: System.Double
      overload: MatrixDotNet.Matrix`1.Rank*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: MatrixDotNet.Matrix`1.IsSquare
      commentId: P:MatrixDotNet.Matrix`1.IsSquare
      language: CSharp
      name:
        CSharp: IsSquare
        VB: IsSquare
      nameWithType:
        CSharp: Matrix<T>.IsSquare
        VB: Matrix(Of T).IsSquare
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.IsSquare
        VB: MatrixDotNet.Matrix(Of T).IsSquare
      type: Property
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: IsSquare
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 46
      summary: "\nChecks square matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsSquare { get; }
          VB: Public ReadOnly Property IsSquare As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: MatrixDotNet.Matrix`1.IsSquare*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: MatrixDotNet.Matrix`1.Item(System.Int32,System.Int32)
      commentId: P:MatrixDotNet.Matrix`1.Item(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Item[Int32, Int32]
        VB: Item(Int32, Int32)
      nameWithType:
        CSharp: Matrix<T>.Item[Int32, Int32]
        VB: Matrix(Of T).Item(Int32, Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Item[System.Int32, System.Int32]
        VB: MatrixDotNet.Matrix(Of T).Item(System.Int32, System.Int32)
      type: Property
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: this[]
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 60
      summary: "\nGets element matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public T this[int i, int j] { get; set; }
          VB: Public Property Item(i As Integer, j As Integer) As T
        parameters:
        - id: i
          type: System.Int32
          description: the index by rows.
        - id: j
          type: System.Int32
          description: the index by columns.
        return:
          type: '{T}'
      overload: MatrixDotNet.Matrix`1.Item*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: MatrixDotNet.Matrix`1.Item(System.Int32)
      commentId: P:MatrixDotNet.Matrix`1.Item(System.Int32)
      language: CSharp
      name:
        CSharp: Item[Int32]
        VB: Item(Int32)
      nameWithType:
        CSharp: Matrix<T>.Item[Int32]
        VB: Matrix(Of T).Item(Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Item[System.Int32]
        VB: MatrixDotNet.Matrix(Of T).Item(System.Int32)
      type: Property
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: this[]
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 83
      summary: "\nGets or sets array by row.\n"
      example: []
      syntax:
        content:
          CSharp: public T[] this[int i] { get; set; }
          VB: Public Property Item(i As Integer) As T()
        parameters:
        - id: i
          type: System.Int32
          description: the row
        return:
          type: '{T}[]'
      overload: MatrixDotNet.Matrix`1.Item*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: MatrixDotNet.Matrix`1.Item(System.Int32,MatrixDotNet.State)
      commentId: P:MatrixDotNet.Matrix`1.Item(System.Int32,MatrixDotNet.State)
      language: CSharp
      name:
        CSharp: Item[Int32, State]
        VB: Item(Int32, State)
      nameWithType:
        CSharp: Matrix<T>.Item[Int32, State]
        VB: Matrix(Of T).Item(Int32, State)
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Item[System.Int32, MatrixDotNet.State]
        VB: MatrixDotNet.Matrix(Of T).Item(System.Int32, MatrixDotNet.State)
      type: Property
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: this[]
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 104
      summary: "\nGets or sets array by rows or columns.\n"
      example: []
      syntax:
        content:
          CSharp: public T[] this[int i, State dimension] { get; set; }
          VB: Public Property Item(i As Integer, dimension As State) As T()
        parameters:
        - id: i
          type: System.Int32
          description: ''
        - id: dimension
          type: MatrixDotNet.State
          description: ''
        return:
          type: '{T}[]'
      overload: MatrixDotNet.Matrix`1.Item*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: MatrixDotNet.Matrix`1.#ctor(`0[0:,0:])
      commentId: M:MatrixDotNet.Matrix`1.#ctor(`0[0:,0:])
      language: CSharp
      name:
        CSharp: Matrix(T[,])
        VB: Matrix(T(,))
      nameWithType:
        CSharp: Matrix<T>.Matrix(T[,])
        VB: Matrix(Of T).Matrix(T(,))
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Matrix(T[,])
        VB: MatrixDotNet.Matrix(Of T).Matrix(T(,))
      type: Constructor
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: .ctor
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 148
      summary: "\nInitialize matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public Matrix(T[, ] matrix)
          VB: Public Sub New(matrix As T(,))
        parameters:
        - id: matrix
          type: '{T}[,]'
          description: the matrix.
      overload: MatrixDotNet.Matrix`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: MatrixDotNet.Matrix`1.#ctor(System.Int32,System.Int32)
      commentId: M:MatrixDotNet.Matrix`1.#ctor(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Matrix(Int32, Int32)
        VB: Matrix(Int32, Int32)
      nameWithType:
        CSharp: Matrix<T>.Matrix(Int32, Int32)
        VB: Matrix(Of T).Matrix(Int32, Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Matrix(System.Int32, System.Int32)
        VB: MatrixDotNet.Matrix(Of T).Matrix(System.Int32, System.Int32)
      type: Constructor
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: .ctor
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 166
      summary: "\nCreates matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public Matrix(int row, int col)
          VB: Public Sub New(row As Integer, col As Integer)
        parameters:
        - id: row
          type: System.Int32
          description: row
        - id: col
          type: System.Int32
          description: col
      overload: MatrixDotNet.Matrix`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: MatrixDotNet.Matrix`1.op_Addition(MatrixDotNet.Matrix{`0},MatrixDotNet.Matrix{`0})
      commentId: M:MatrixDotNet.Matrix`1.op_Addition(MatrixDotNet.Matrix{`0},MatrixDotNet.Matrix{`0})
      language: CSharp
      name:
        CSharp: Addition(Matrix<T>, Matrix<T>)
        VB: Addition(Matrix(Of T), Matrix(Of T))
      nameWithType:
        CSharp: Matrix<T>.Addition(Matrix<T>, Matrix<T>)
        VB: Matrix(Of T).Addition(Matrix(Of T), Matrix(Of T))
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Addition(MatrixDotNet.Matrix<T>, MatrixDotNet.Matrix<T>)
        VB: MatrixDotNet.Matrix(Of T).Addition(MatrixDotNet.Matrix(Of T), MatrixDotNet.Matrix(Of T))
      type: Operator
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: op_Addition
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 184
      summary: "\nAdd operation of two matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public static Matrix<T> operator +(Matrix<T> left, Matrix<T> right)
          VB: Public Shared Operator +(left As Matrix(Of T), right As Matrix(Of T)) As Matrix(Of T)
        parameters:
        - id: left
          type: MatrixDotNet.Matrix`1
          description: left matrix.
        - id: right
          type: MatrixDotNet.Matrix`1
          description: right matrix.
        return:
          type: MatrixDotNet.Matrix`1
          description: <xref href="MatrixDotNet.Matrix%601" data-throw-if-not-resolved="false"></xref>
      overload: MatrixDotNet.Matrix`1.op_Addition*
      exceptions:
      - type: MatrixDotNet.Exceptions.MatrixDotNetException
        commentId: T:MatrixDotNet.Exceptions.MatrixDotNetException
        description: "\nLength of two matrix not equal.\n"
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        MatrixDotNet.Matrix`1: 
        MatrixDotNet.Exceptions.MatrixDotNetException: 
    - id: MatrixDotNet.Matrix`1.op_Subtraction(MatrixDotNet.Matrix{`0},MatrixDotNet.Matrix{`0})
      commentId: M:MatrixDotNet.Matrix`1.op_Subtraction(MatrixDotNet.Matrix{`0},MatrixDotNet.Matrix{`0})
      language: CSharp
      name:
        CSharp: Subtraction(Matrix<T>, Matrix<T>)
        VB: Subtraction(Matrix(Of T), Matrix(Of T))
      nameWithType:
        CSharp: Matrix<T>.Subtraction(Matrix<T>, Matrix<T>)
        VB: Matrix(Of T).Subtraction(Matrix(Of T), Matrix(Of T))
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Subtraction(MatrixDotNet.Matrix<T>, MatrixDotNet.Matrix<T>)
        VB: MatrixDotNet.Matrix(Of T).Subtraction(MatrixDotNet.Matrix(Of T), MatrixDotNet.Matrix(Of T))
      type: Operator
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: op_Subtraction
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 214
      summary: "\nSubtract operation of two matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public static Matrix<T> operator -(Matrix<T> left, Matrix<T> right)
          VB: Public Shared Operator -(left As Matrix(Of T), right As Matrix(Of T)) As Matrix(Of T)
        parameters:
        - id: left
          type: MatrixDotNet.Matrix`1
          description: left matrix.
        - id: right
          type: MatrixDotNet.Matrix`1
          description: right matrix.
        return:
          type: MatrixDotNet.Matrix`1
          description: <xref href="MatrixDotNet.Matrix%601" data-throw-if-not-resolved="false"></xref>.
      overload: MatrixDotNet.Matrix`1.op_Subtraction*
      exceptions:
      - type: MatrixDotNet.Exceptions.MatrixDotNetException
        commentId: T:MatrixDotNet.Exceptions.MatrixDotNetException
        description: "\nLength of two matrix not equal.\n"
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        MatrixDotNet.Matrix`1: 
        MatrixDotNet.Exceptions.MatrixDotNetException: 
    - id: MatrixDotNet.Matrix`1.op_Multiply(MatrixDotNet.Matrix{`0},MatrixDotNet.Matrix{`0})
      commentId: M:MatrixDotNet.Matrix`1.op_Multiply(MatrixDotNet.Matrix{`0},MatrixDotNet.Matrix{`0})
      language: CSharp
      name:
        CSharp: Multiply(Matrix<T>, Matrix<T>)
        VB: Multiply(Matrix(Of T), Matrix(Of T))
      nameWithType:
        CSharp: Matrix<T>.Multiply(Matrix<T>, Matrix<T>)
        VB: Matrix(Of T).Multiply(Matrix(Of T), Matrix(Of T))
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Multiply(MatrixDotNet.Matrix<T>, MatrixDotNet.Matrix<T>)
        VB: MatrixDotNet.Matrix(Of T).Multiply(MatrixDotNet.Matrix(Of T), MatrixDotNet.Matrix(Of T))
      type: Operator
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: op_Multiply
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 242
      summary: "\nMultiply operation of two matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public static Matrix<T> operator *(Matrix<T> left, Matrix<T> right)
          VB: Public Shared Operator *(left As Matrix(Of T), right As Matrix(Of T)) As Matrix(Of T)
        parameters:
        - id: left
          type: MatrixDotNet.Matrix`1
          description: ''
        - id: right
          type: MatrixDotNet.Matrix`1
          description: ''
        return:
          type: MatrixDotNet.Matrix`1
          description: ''
      overload: MatrixDotNet.Matrix`1.op_Multiply*
      exceptions:
      - type: MatrixDotNet.Exceptions.MatrixDotNetException
        commentId: T:MatrixDotNet.Exceptions.MatrixDotNetException
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        MatrixDotNet.Exceptions.MatrixDotNetException: 
    - id: MatrixDotNet.Matrix`1.op_Multiply(MatrixDotNet.Matrix{`0},`0)
      commentId: M:MatrixDotNet.Matrix`1.op_Multiply(MatrixDotNet.Matrix{`0},`0)
      language: CSharp
      name:
        CSharp: Multiply(Matrix<T>, T)
        VB: Multiply(Matrix(Of T), T)
      nameWithType:
        CSharp: Matrix<T>.Multiply(Matrix<T>, T)
        VB: Matrix(Of T).Multiply(Matrix(Of T), T)
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Multiply(MatrixDotNet.Matrix<T>, T)
        VB: MatrixDotNet.Matrix(Of T).Multiply(MatrixDotNet.Matrix(Of T), T)
      type: Operator
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: op_Multiply
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 274
      summary: "\nMultiply operation matrix on digit right side.\n"
      example: []
      syntax:
        content:
          CSharp: public static Matrix<T> operator *(Matrix<T> matrix, T digit)
          VB: Public Shared Operator *(matrix As Matrix(Of T), digit As T) As Matrix(Of T)
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix`1
          description: matrix.
        - id: digit
          type: '{T}'
          description: digit.
        return:
          type: MatrixDotNet.Matrix`1
          description: <xref href="MatrixDotNet.Matrix%601" data-throw-if-not-resolved="false"></xref>
      overload: MatrixDotNet.Matrix`1.op_Multiply*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        MatrixDotNet.Matrix`1: 
    - id: MatrixDotNet.Matrix`1.op_Multiply(`0,MatrixDotNet.Matrix{`0})
      commentId: M:MatrixDotNet.Matrix`1.op_Multiply(`0,MatrixDotNet.Matrix{`0})
      language: CSharp
      name:
        CSharp: Multiply(T, Matrix<T>)
        VB: Multiply(T, Matrix(Of T))
      nameWithType:
        CSharp: Matrix<T>.Multiply(T, Matrix<T>)
        VB: Matrix(Of T).Multiply(T, Matrix(Of T))
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Multiply(T, MatrixDotNet.Matrix<T>)
        VB: MatrixDotNet.Matrix(Of T).Multiply(T, MatrixDotNet.Matrix(Of T))
      type: Operator
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: op_Multiply
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 294
      summary: "\nMultiply operation matrix on digit left side.\n"
      example: []
      syntax:
        content:
          CSharp: public static Matrix<T> operator *(T digit, Matrix<T> matrix)
          VB: Public Shared Operator *(digit As T, matrix As Matrix(Of T)) As Matrix(Of T)
        parameters:
        - id: digit
          type: '{T}'
          description: digit
        - id: matrix
          type: MatrixDotNet.Matrix`1
          description: matrix
        return:
          type: MatrixDotNet.Matrix`1
          description: <xref href="MatrixDotNet.Matrix%601" data-throw-if-not-resolved="false"></xref>
      overload: MatrixDotNet.Matrix`1.op_Multiply*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        MatrixDotNet.Matrix`1: 
    - id: MatrixDotNet.Matrix`1.op_Division(MatrixDotNet.Matrix{`0},`0)
      commentId: M:MatrixDotNet.Matrix`1.op_Division(MatrixDotNet.Matrix{`0},`0)
      language: CSharp
      name:
        CSharp: Division(Matrix<T>, T)
        VB: Division(Matrix(Of T), T)
      nameWithType:
        CSharp: Matrix<T>.Division(Matrix<T>, T)
        VB: Matrix(Of T).Division(Matrix(Of T), T)
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Division(MatrixDotNet.Matrix<T>, T)
        VB: MatrixDotNet.Matrix(Of T).Division(MatrixDotNet.Matrix(Of T), T)
      type: Operator
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: op_Division
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 314
      summary: "\nDivide operation matrix on digit right side.\n"
      example: []
      syntax:
        content:
          CSharp: public static Matrix<T> operator /(Matrix<T> matrix, T digit)
          VB: Public Shared Operator /(matrix As Matrix(Of T), digit As T) As Matrix(Of T)
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix`1
          description: ''
        - id: digit
          type: '{T}'
          description: ''
        return:
          type: MatrixDotNet.Matrix`1
          description: ''
      overload: MatrixDotNet.Matrix`1.op_Division*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: MatrixDotNet.Matrix`1.op_Division(`0,MatrixDotNet.Matrix{`0})
      commentId: M:MatrixDotNet.Matrix`1.op_Division(`0,MatrixDotNet.Matrix{`0})
      language: CSharp
      name:
        CSharp: Division(T, Matrix<T>)
        VB: Division(T, Matrix(Of T))
      nameWithType:
        CSharp: Matrix<T>.Division(T, Matrix<T>)
        VB: Matrix(Of T).Division(T, Matrix(Of T))
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Division(T, MatrixDotNet.Matrix<T>)
        VB: MatrixDotNet.Matrix(Of T).Division(T, MatrixDotNet.Matrix(Of T))
      type: Operator
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: op_Division
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 334
      summary: "\nDivide operation matrix on digit left side.\n"
      example: []
      syntax:
        content:
          CSharp: public static Matrix<T> operator /(T digit, Matrix<T> matrix)
          VB: Public Shared Operator /(digit As T, matrix As Matrix(Of T)) As Matrix(Of T)
        parameters:
        - id: digit
          type: '{T}'
          description: ''
        - id: matrix
          type: MatrixDotNet.Matrix`1
          description: ''
        return:
          type: MatrixDotNet.Matrix`1
          description: ''
      overload: MatrixDotNet.Matrix`1.op_Division*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: MatrixDotNet.Matrix`1.op_Multiply(`0[],MatrixDotNet.Matrix{`0})
      commentId: M:MatrixDotNet.Matrix`1.op_Multiply(`0[],MatrixDotNet.Matrix{`0})
      language: CSharp
      name:
        CSharp: Multiply(T[], Matrix<T>)
        VB: Multiply(T(), Matrix(Of T))
      nameWithType:
        CSharp: Matrix<T>.Multiply(T[], Matrix<T>)
        VB: Matrix(Of T).Multiply(T(), Matrix(Of T))
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Multiply(T[], MatrixDotNet.Matrix<T>)
        VB: MatrixDotNet.Matrix(Of T).Multiply(T(), MatrixDotNet.Matrix(Of T))
      type: Operator
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: op_Multiply
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 355
      summary: "\nReturns vector sum of each multiply element of row.\n"
      example: []
      syntax:
        content:
          CSharp: public static T[] operator *(T[] array, Matrix<T> matrix)
          VB: Public Shared Operator *(array As T(), matrix As Matrix(Of T)) As T()
        parameters:
        - id: array
          type: '{T}[]'
          description: array.
        - id: matrix
          type: MatrixDotNet.Matrix`1
          description: matrix.
        return:
          type: '{T}[]'
          description: sum of each multiply element of row.
      overload: MatrixDotNet.Matrix`1.op_Multiply*
      exceptions:
      - type: MatrixDotNet.Exceptions.MatrixDotNetException
        commentId: T:MatrixDotNet.Exceptions.MatrixDotNetException
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        MatrixDotNet.Exceptions.MatrixDotNetException: 
    - id: MatrixDotNet.Matrix`1.op_Multiply(MatrixDotNet.Matrix{`0},`0[])
      commentId: M:MatrixDotNet.Matrix`1.op_Multiply(MatrixDotNet.Matrix{`0},`0[])
      language: CSharp
      name:
        CSharp: Multiply(Matrix<T>, T[])
        VB: Multiply(Matrix(Of T), T())
      nameWithType:
        CSharp: Matrix<T>.Multiply(Matrix<T>, T[])
        VB: Matrix(Of T).Multiply(Matrix(Of T), T())
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Multiply(MatrixDotNet.Matrix<T>, T[])
        VB: MatrixDotNet.Matrix(Of T).Multiply(MatrixDotNet.Matrix(Of T), T())
      type: Operator
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: op_Multiply
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 385
      summary: "\nReturns vector sum of each multiply element of row.\n"
      example: []
      syntax:
        content:
          CSharp: public static T[] operator *(Matrix<T> matrix, T[] array)
          VB: Public Shared Operator *(matrix As Matrix(Of T), array As T()) As T()
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix`1
          description: matrix.
        - id: array
          type: '{T}[]'
          description: array.
        return:
          type: '{T}[]'
          description: sum of each multiply element of row.
      overload: MatrixDotNet.Matrix`1.op_Multiply*
      exceptions:
      - type: MatrixDotNet.Exceptions.MatrixDotNetException
        commentId: T:MatrixDotNet.Exceptions.MatrixDotNetException
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        MatrixDotNet.Exceptions.MatrixDotNetException: 
    - id: MatrixDotNet.Matrix`1.ToString
      commentId: M:MatrixDotNet.Matrix`1.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: Matrix<T>.ToString()
        VB: Matrix(Of T).ToString()
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.ToString()
        VB: MatrixDotNet.Matrix(Of T).ToString()
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: ToString
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 426
      summary: "\n<inheritdoc cref=\"!:object.ToString\"></inheritdoc>\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: <see cref="!:System.String"></see>
      overload: MatrixDotNet.Matrix`1.ToString*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: MatrixDotNet.Matrix`1.Clone
      commentId: M:MatrixDotNet.Matrix`1.Clone
      language: CSharp
      name:
        CSharp: Clone()
        VB: Clone()
      nameWithType:
        CSharp: Matrix<T>.Clone()
        VB: Matrix(Of T).Clone()
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Clone()
        VB: MatrixDotNet.Matrix(Of T).Clone()
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Clone
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 447
      summary: "\nClones matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public object Clone()
          VB: Public Function Clone As Object
        return:
          type: System.Object
          description: object.
      overload: MatrixDotNet.Matrix`1.Clone*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: MatrixDotNet.Matrix`1.Equals(System.Object)
      commentId: M:MatrixDotNet.Matrix`1.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: Matrix<T>.Equals(Object)
        VB: Matrix(Of T).Equals(Object)
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.Equals(System.Object)
        VB: MatrixDotNet.Matrix(Of T).Equals(System.Object)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Equals
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 467
      summary: "\nChecks on equals two matrix by rows - i ,columns - j\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: MatrixDotNet.Matrix`1.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: MatrixDotNet.Matrix`1.GetHashCode
      commentId: M:MatrixDotNet.Matrix`1.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: Matrix<T>.GetHashCode()
        VB: Matrix(Of T).GetHashCode()
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.GetHashCode()
        VB: MatrixDotNet.Matrix(Of T).GetHashCode()
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: GetHashCode
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 490
      summary: "\nGets hash code.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: ''
      overload: MatrixDotNet.Matrix`1.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: MatrixDotNet.Matrix`1.LNorm
      commentId: M:MatrixDotNet.Matrix`1.LNorm
      language: CSharp
      name:
        CSharp: LNorm()
        VB: LNorm()
      nameWithType:
        CSharp: Matrix<T>.LNorm()
        VB: Matrix(Of T).LNorm()
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.LNorm()
        VB: MatrixDotNet.Matrix(Of T).LNorm()
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: LNorm
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 521
      summary: "\nGets l-norm of matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public double LNorm()
          VB: Public Function LNorm As Double
        return:
          type: System.Double
          description: ''
      overload: MatrixDotNet.Matrix`1.LNorm*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: MatrixDotNet.Matrix`1.MNorm
      commentId: P:MatrixDotNet.Matrix`1.MNorm
      language: CSharp
      name:
        CSharp: MNorm
        VB: MNorm
      nameWithType:
        CSharp: Matrix<T>.MNorm
        VB: Matrix(Of T).MNorm
      qualifiedName:
        CSharp: MatrixDotNet.Matrix<T>.MNorm
        VB: MatrixDotNet.Matrix(Of T).MNorm
      type: Property
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: MNorm
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 542
      summary: "\nGets m-norm of matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public T MNorm { get; }
          VB: Public ReadOnly Property MNorm As T
        parameters: []
        return:
          type: '{T}'
      overload: MatrixDotNet.Matrix`1.MNorm*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: MatrixDotNet.State
    commentId: T:MatrixDotNet.State
    language: CSharp
    name:
      CSharp: State
      VB: State
    nameWithType:
      CSharp: State
      VB: State
    qualifiedName:
      CSharp: MatrixDotNet.State
      VB: MatrixDotNet.State
    type: Enum
    assemblies:
    - MatrixDotNet
    namespace: MatrixDotNet
    source:
      remote:
        path: src/MatrixDotNet/Matrix.cs
        branch: master
        repo: https://github.com/toor1245/MatrixDotNet.git
      id: State
      path: ../src/MatrixDotNet/Matrix.cs
      startLine: 548
    summary: "\nState column or row\n"
    example: []
    syntax:
      content:
        CSharp: 'public enum State : int'
        VB: Public Enum State As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: MatrixDotNet.State.Row
      commentId: F:MatrixDotNet.State.Row
      language: CSharp
      name:
        CSharp: Row
        VB: Row
      nameWithType:
        CSharp: State.Row
        VB: State.Row
      qualifiedName:
        CSharp: MatrixDotNet.State.Row
        VB: MatrixDotNet.State.Row
      type: Field
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Row
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 550
      syntax:
        content:
          CSharp: Row = 0
          VB: Row = 0
        return:
          type: MatrixDotNet.State
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: MatrixDotNet.State.Column
      commentId: F:MatrixDotNet.State.Column
      language: CSharp
      name:
        CSharp: Column
        VB: Column
      nameWithType:
        CSharp: State.Column
        VB: State.Column
      qualifiedName:
        CSharp: MatrixDotNet.State.Column
        VB: MatrixDotNet.State.Column
      type: Field
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet
      source:
        remote:
          path: src/MatrixDotNet/Matrix.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Column
        path: ../src/MatrixDotNet/Matrix.cs
        startLine: 551
      syntax:
        content:
          CSharp: Column = 1
          VB: Column = 1
        return:
          type: MatrixDotNet.State
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
- id: MatrixDotNet.Exceptions
  commentId: N:MatrixDotNet.Exceptions
  language: CSharp
  name:
    CSharp: MatrixDotNet.Exceptions
    VB: MatrixDotNet.Exceptions
  nameWithType:
    CSharp: MatrixDotNet.Exceptions
    VB: MatrixDotNet.Exceptions
  qualifiedName:
    CSharp: MatrixDotNet.Exceptions
    VB: MatrixDotNet.Exceptions
  type: Namespace
  assemblies:
  - MatrixDotNet
  modifiers: {}
  items:
  - id: MatrixDotNet.Exceptions.MatrixDotNetException
    commentId: T:MatrixDotNet.Exceptions.MatrixDotNetException
    language: CSharp
    name:
      CSharp: MatrixDotNetException
      VB: MatrixDotNetException
    nameWithType:
      CSharp: MatrixDotNetException
      VB: MatrixDotNetException
    qualifiedName:
      CSharp: MatrixDotNet.Exceptions.MatrixDotNetException
      VB: MatrixDotNet.Exceptions.MatrixDotNetException
    type: Class
    assemblies:
    - MatrixDotNet
    namespace: MatrixDotNet.Exceptions
    source:
      remote:
        path: src/MatrixDotNet/Exceptions/MatrixDotNetException.cs
        branch: master
        repo: https://github.com/toor1245/MatrixDotNet.git
      id: MatrixDotNetException
      path: ../src/MatrixDotNet/Exceptions/MatrixDotNetException.cs
      startLine: 7
    summary: "\nRepresent exception for <xref href=\"MatrixDotNet.Matrix%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class MatrixDotNetException : Exception'
        VB: >-
          Public Class MatrixDotNetException

              Inherits Exception
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: MatrixDotNet.Exceptions.MatrixDotNetException.#ctor(System.String,System.String)
      commentId: M:MatrixDotNet.Exceptions.MatrixDotNetException.#ctor(System.String,System.String)
      language: CSharp
      name:
        CSharp: MatrixDotNetException(String, String)
        VB: MatrixDotNetException(String, String)
      nameWithType:
        CSharp: MatrixDotNetException.MatrixDotNetException(String, String)
        VB: MatrixDotNetException.MatrixDotNetException(String, String)
      qualifiedName:
        CSharp: MatrixDotNet.Exceptions.MatrixDotNetException.MatrixDotNetException(System.String, System.String)
        VB: MatrixDotNet.Exceptions.MatrixDotNetException.MatrixDotNetException(System.String, System.String)
      type: Constructor
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Exceptions
      source:
        remote:
          path: src/MatrixDotNet/Exceptions/MatrixDotNetException.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: .ctor
        path: ../src/MatrixDotNet/Exceptions/MatrixDotNetException.cs
        startLine: 14
      summary: "\nException.\n"
      example: []
      syntax:
        content:
          CSharp: public MatrixDotNetException(string message, string argument)
          VB: Public Sub New(message As String, argument As String)
        parameters:
        - id: message
          type: System.String
          description: ''
        - id: argument
          type: System.String
          description: ''
      overload: MatrixDotNet.Exceptions.MatrixDotNetException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: MatrixDotNet.Exceptions.MatrixDotNetException.#ctor(System.String)
      commentId: M:MatrixDotNet.Exceptions.MatrixDotNetException.#ctor(System.String)
      language: CSharp
      name:
        CSharp: MatrixDotNetException(String)
        VB: MatrixDotNetException(String)
      nameWithType:
        CSharp: MatrixDotNetException.MatrixDotNetException(String)
        VB: MatrixDotNetException.MatrixDotNetException(String)
      qualifiedName:
        CSharp: MatrixDotNet.Exceptions.MatrixDotNetException.MatrixDotNetException(System.String)
        VB: MatrixDotNet.Exceptions.MatrixDotNetException.MatrixDotNetException(System.String)
      type: Constructor
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Exceptions
      source:
        remote:
          path: src/MatrixDotNet/Exceptions/MatrixDotNetException.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: .ctor
        path: ../src/MatrixDotNet/Exceptions/MatrixDotNetException.cs
        startLine: 24
      summary: "\nException.\n"
      example: []
      syntax:
        content:
          CSharp: public MatrixDotNetException(string message)
          VB: Public Sub New(message As String)
        parameters:
        - id: message
          type: System.String
          description: ''
      overload: MatrixDotNet.Exceptions.MatrixDotNetException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: MatrixDotNet.Exceptions.MatrixDotNetException.#ctor(System.String,System.String,System.String)
      commentId: M:MatrixDotNet.Exceptions.MatrixDotNetException.#ctor(System.String,System.String,System.String)
      language: CSharp
      name:
        CSharp: MatrixDotNetException(String, String, String)
        VB: MatrixDotNetException(String, String, String)
      nameWithType:
        CSharp: MatrixDotNetException.MatrixDotNetException(String, String, String)
        VB: MatrixDotNetException.MatrixDotNetException(String, String, String)
      qualifiedName:
        CSharp: MatrixDotNet.Exceptions.MatrixDotNetException.MatrixDotNetException(System.String, System.String, System.String)
        VB: MatrixDotNet.Exceptions.MatrixDotNetException.MatrixDotNetException(System.String, System.String, System.String)
      type: Constructor
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Exceptions
      source:
        remote:
          path: src/MatrixDotNet/Exceptions/MatrixDotNetException.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: .ctor
        path: ../src/MatrixDotNet/Exceptions/MatrixDotNetException.cs
        startLine: 35
      summary: "\nException.\n"
      example: []
      syntax:
        content:
          CSharp: public MatrixDotNetException(string message, string argument1, string argument2)
          VB: Public Sub New(message As String, argument1 As String, argument2 As String)
        parameters:
        - id: message
          type: System.String
          description: ''
        - id: argument1
          type: System.String
          description: ''
        - id: argument2
          type: System.String
          description: ''
      overload: MatrixDotNet.Exceptions.MatrixDotNetException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: MatrixDotNet.Exceptions.MatrixDotNetException.Message
      commentId: P:MatrixDotNet.Exceptions.MatrixDotNetException.Message
      language: CSharp
      name:
        CSharp: Message
        VB: Message
      nameWithType:
        CSharp: MatrixDotNetException.Message
        VB: MatrixDotNetException.Message
      qualifiedName:
        CSharp: MatrixDotNet.Exceptions.MatrixDotNetException.Message
        VB: MatrixDotNet.Exceptions.MatrixDotNetException.Message
      type: Property
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Exceptions
      source:
        remote:
          path: src/MatrixDotNet/Exceptions/MatrixDotNetException.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Message
        path: ../src/MatrixDotNet/Exceptions/MatrixDotNetException.cs
        startLine: 45
      summary: "\nGets message.\n"
      example: []
      syntax:
        content:
          CSharp: public string Message { get; }
          VB: Public ReadOnly Property Message As String
        parameters: []
        return:
          type: System.String
      overload: MatrixDotNet.Exceptions.MatrixDotNetException.Message*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: MatrixDotNet.Exceptions.MatrixDotNetException.Argument1
      commentId: P:MatrixDotNet.Exceptions.MatrixDotNetException.Argument1
      language: CSharp
      name:
        CSharp: Argument1
        VB: Argument1
      nameWithType:
        CSharp: MatrixDotNetException.Argument1
        VB: MatrixDotNetException.Argument1
      qualifiedName:
        CSharp: MatrixDotNet.Exceptions.MatrixDotNetException.Argument1
        VB: MatrixDotNet.Exceptions.MatrixDotNetException.Argument1
      type: Property
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Exceptions
      source:
        remote:
          path: src/MatrixDotNet/Exceptions/MatrixDotNetException.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Argument1
        path: ../src/MatrixDotNet/Exceptions/MatrixDotNetException.cs
        startLine: 50
      summary: "\nGets argument.\n"
      example: []
      syntax:
        content:
          CSharp: public string Argument1 { get; }
          VB: Public ReadOnly Property Argument1 As String
        parameters: []
        return:
          type: System.String
      overload: MatrixDotNet.Exceptions.MatrixDotNetException.Argument1*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: MatrixDotNet.Exceptions.MatrixDotNetException.Argument2
      commentId: P:MatrixDotNet.Exceptions.MatrixDotNetException.Argument2
      language: CSharp
      name:
        CSharp: Argument2
        VB: Argument2
      nameWithType:
        CSharp: MatrixDotNetException.Argument2
        VB: MatrixDotNetException.Argument2
      qualifiedName:
        CSharp: MatrixDotNet.Exceptions.MatrixDotNetException.Argument2
        VB: MatrixDotNet.Exceptions.MatrixDotNetException.Argument2
      type: Property
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Exceptions
      source:
        remote:
          path: src/MatrixDotNet/Exceptions/MatrixDotNetException.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Argument2
        path: ../src/MatrixDotNet/Exceptions/MatrixDotNetException.cs
        startLine: 55
      summary: "\nGets argument.\n"
      example: []
      syntax:
        content:
          CSharp: public string Argument2 { get; }
          VB: Public ReadOnly Property Argument2 As String
        parameters: []
        return:
          type: System.String
      overload: MatrixDotNet.Exceptions.MatrixDotNetException.Argument2*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    references:
      MatrixDotNet.Matrix`1: 
- id: MatrixDotNet.Extensions
  commentId: N:MatrixDotNet.Extensions
  language: CSharp
  name:
    CSharp: MatrixDotNet.Extensions
    VB: MatrixDotNet.Extensions
  nameWithType:
    CSharp: MatrixDotNet.Extensions
    VB: MatrixDotNet.Extensions
  qualifiedName:
    CSharp: MatrixDotNet.Extensions
    VB: MatrixDotNet.Extensions
  type: Namespace
  assemblies:
  - MatrixDotNet
  modifiers: {}
  items:
  - id: MatrixDotNet.Extensions.BitMatrixExtension
    commentId: T:MatrixDotNet.Extensions.BitMatrixExtension
    language: CSharp
    name:
      CSharp: BitMatrixExtension
      VB: BitMatrixExtension
    nameWithType:
      CSharp: BitMatrixExtension
      VB: BitMatrixExtension
    qualifiedName:
      CSharp: MatrixDotNet.Extensions.BitMatrixExtension
      VB: MatrixDotNet.Extensions.BitMatrixExtension
    type: Class
    assemblies:
    - MatrixDotNet
    namespace: MatrixDotNet.Extensions
    source:
      remote:
        path: src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
        branch: master
        repo: https://github.com/toor1245/MatrixDotNet.git
      id: BitMatrixExtension
      path: ../src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
      startLine: 5
    syntax:
      content:
        CSharp: 'public static class BitMatrixExtension : object'
        VB: >-
          Public Module BitMatrixExtension

              Inherits Object
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.Max``1(MatrixDotNet.Matrix{``0})
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.Max``1(MatrixDotNet.Matrix{``0})
      language: CSharp
      name:
        CSharp: Max<T>(Matrix<T>)
        VB: Max(Of T)(Matrix(Of T))
      nameWithType:
        CSharp: BitMatrixExtension.Max<T>(Matrix<T>)
        VB: BitMatrixExtension.Max(Of T)(Matrix(Of T))
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.Max<T>(MatrixDotNet.Matrix<T>)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.Max(Of T)(MatrixDotNet.Matrix(Of T))
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Max
        path: ../src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
        startLine: 7
      syntax:
        content:
          CSharp: >-
            public static T Max<T>(this Matrix<T> matrix)

                where T : struct
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Max(Of T As Structure)(matrix As Matrix(Of T)) As T
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{{T}}
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: MatrixDotNet.Extensions.BitMatrixExtension.Max*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow``1(MatrixDotNet.Matrix{``0},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow``1(MatrixDotNet.Matrix{``0},System.Int32)
      language: CSharp
      name:
        CSharp: MaxByRow<T>(Matrix<T>, Int32)
        VB: MaxByRow(Of T)(Matrix(Of T), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.MaxByRow<T>(Matrix<T>, Int32)
        VB: BitMatrixExtension.MaxByRow(Of T)(Matrix(Of T), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow<T>(MatrixDotNet.Matrix<T>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow(Of T)(MatrixDotNet.Matrix(Of T), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: MaxByRow
        path: ../src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
        startLine: 27
      syntax:
        content:
          CSharp: >-
            public static T MaxByRow<T>(this Matrix<T> matrix, int dimension)

                where T : struct
          VB: >-
            <ExtensionAttribute>

            Public Shared Function MaxByRow(Of T As Structure)(matrix As Matrix(Of T), dimension As Integer) As T
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{{T}}
        - id: dimension
          type: System.Int32
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
      language: CSharp
      name:
        CSharp: MaxByColumn<T>(Matrix<T>, Int32)
        VB: MaxByColumn(Of T)(Matrix(Of T), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.MaxByColumn<T>(Matrix<T>, Int32)
        VB: BitMatrixExtension.MaxByColumn(Of T)(Matrix(Of T), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn<T>(MatrixDotNet.Matrix<T>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn(Of T)(MatrixDotNet.Matrix(Of T), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: MaxByColumn
        path: ../src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
        startLine: 44
      syntax:
        content:
          CSharp: >-
            public static T MaxByColumn<T>(this Matrix<T> matrix, int dimension)

                where T : struct
          VB: >-
            <ExtensionAttribute>

            Public Shared Function MaxByColumn(Of T As Structure)(matrix As Matrix(Of T), dimension As Integer) As T
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{{T}}
        - id: dimension
          type: System.Int32
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.Max(MatrixDotNet.Matrix{System.Int32})
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.Max(MatrixDotNet.Matrix{System.Int32})
      language: CSharp
      name:
        CSharp: Max(Matrix<Int32>)
        VB: Max(Matrix(Of Int32))
      nameWithType:
        CSharp: BitMatrixExtension.Max(Matrix<Int32>)
        VB: BitMatrixExtension.Max(Matrix(Of Int32))
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.Max(MatrixDotNet.Matrix<System.Int32>)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.Max(MatrixDotNet.Matrix(Of System.Int32))
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Max
        path: ../src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
        startLine: 62
      syntax:
        content:
          CSharp: public static int Max(this Matrix<int> matrix)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Max(matrix As Matrix(Of Integer)) As Integer
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Int32}
        return:
          type: System.Int32
      overload: MatrixDotNet.Extensions.BitMatrixExtension.Max*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.Max(MatrixDotNet.Matrix{System.Byte})
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.Max(MatrixDotNet.Matrix{System.Byte})
      language: CSharp
      name:
        CSharp: Max(Matrix<Byte>)
        VB: Max(Matrix(Of Byte))
      nameWithType:
        CSharp: BitMatrixExtension.Max(Matrix<Byte>)
        VB: BitMatrixExtension.Max(Matrix(Of Byte))
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.Max(MatrixDotNet.Matrix<System.Byte>)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.Max(MatrixDotNet.Matrix(Of System.Byte))
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Max
        path: ../src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
        startLine: 78
      syntax:
        content:
          CSharp: public static int Max(this Matrix<byte> matrix)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Max(matrix As Matrix(Of Byte)) As Integer
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Byte}
        return:
          type: System.Int32
      overload: MatrixDotNet.Extensions.BitMatrixExtension.Max*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.Max(MatrixDotNet.Matrix{System.Int64})
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.Max(MatrixDotNet.Matrix{System.Int64})
      language: CSharp
      name:
        CSharp: Max(Matrix<Int64>)
        VB: Max(Matrix(Of Int64))
      nameWithType:
        CSharp: BitMatrixExtension.Max(Matrix<Int64>)
        VB: BitMatrixExtension.Max(Matrix(Of Int64))
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.Max(MatrixDotNet.Matrix<System.Int64>)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.Max(MatrixDotNet.Matrix(Of System.Int64))
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Max
        path: ../src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
        startLine: 94
      syntax:
        content:
          CSharp: public static long Max(this Matrix<long> matrix)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Max(matrix As Matrix(Of Long)) As Long
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Int64}
        return:
          type: System.Int64
      overload: MatrixDotNet.Extensions.BitMatrixExtension.Max*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.Max(MatrixDotNet.Matrix{System.Int16})
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.Max(MatrixDotNet.Matrix{System.Int16})
      language: CSharp
      name:
        CSharp: Max(Matrix<Int16>)
        VB: Max(Matrix(Of Int16))
      nameWithType:
        CSharp: BitMatrixExtension.Max(Matrix<Int16>)
        VB: BitMatrixExtension.Max(Matrix(Of Int16))
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.Max(MatrixDotNet.Matrix<System.Int16>)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.Max(MatrixDotNet.Matrix(Of System.Int16))
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Max
        path: ../src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
        startLine: 110
      syntax:
        content:
          CSharp: public static int Max(this Matrix<short> matrix)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Max(matrix As Matrix(Of Short)) As Integer
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Int16}
        return:
          type: System.Int32
      overload: MatrixDotNet.Extensions.BitMatrixExtension.Max*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow(MatrixDotNet.Matrix{System.Int32},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow(MatrixDotNet.Matrix{System.Int32},System.Int32)
      language: CSharp
      name:
        CSharp: MaxByRow(Matrix<Int32>, Int32)
        VB: MaxByRow(Matrix(Of Int32), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.MaxByRow(Matrix<Int32>, Int32)
        VB: BitMatrixExtension.MaxByRow(Matrix(Of Int32), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow(MatrixDotNet.Matrix<System.Int32>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow(MatrixDotNet.Matrix(Of System.Int32), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: MaxByRow
        path: ../src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
        startLine: 126
      syntax:
        content:
          CSharp: public static int MaxByRow(this Matrix<int> matrix, int dimension)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function MaxByRow(matrix As Matrix(Of Integer), dimension As Integer) As Integer
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Int32}
        - id: dimension
          type: System.Int32
        return:
          type: System.Int32
      overload: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow(MatrixDotNet.Matrix{System.Byte},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow(MatrixDotNet.Matrix{System.Byte},System.Int32)
      language: CSharp
      name:
        CSharp: MaxByRow(Matrix<Byte>, Int32)
        VB: MaxByRow(Matrix(Of Byte), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.MaxByRow(Matrix<Byte>, Int32)
        VB: BitMatrixExtension.MaxByRow(Matrix(Of Byte), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow(MatrixDotNet.Matrix<System.Byte>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow(MatrixDotNet.Matrix(Of System.Byte), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: MaxByRow
        path: ../src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
        startLine: 139
      syntax:
        content:
          CSharp: public static int MaxByRow(this Matrix<byte> matrix, int dimension)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function MaxByRow(matrix As Matrix(Of Byte), dimension As Integer) As Integer
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Byte}
        - id: dimension
          type: System.Int32
        return:
          type: System.Int32
      overload: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow(MatrixDotNet.Matrix{System.Int16},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow(MatrixDotNet.Matrix{System.Int16},System.Int32)
      language: CSharp
      name:
        CSharp: MaxByRow(Matrix<Int16>, Int32)
        VB: MaxByRow(Matrix(Of Int16), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.MaxByRow(Matrix<Int16>, Int32)
        VB: BitMatrixExtension.MaxByRow(Matrix(Of Int16), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow(MatrixDotNet.Matrix<System.Int16>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow(MatrixDotNet.Matrix(Of System.Int16), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: MaxByRow
        path: ../src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
        startLine: 152
      syntax:
        content:
          CSharp: public static int MaxByRow(this Matrix<short> matrix, int dimension)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function MaxByRow(matrix As Matrix(Of Short), dimension As Integer) As Integer
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Int16}
        - id: dimension
          type: System.Int32
        return:
          type: System.Int32
      overload: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow(MatrixDotNet.Matrix{System.Int64},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow(MatrixDotNet.Matrix{System.Int64},System.Int32)
      language: CSharp
      name:
        CSharp: MaxByRow(Matrix<Int64>, Int32)
        VB: MaxByRow(Matrix(Of Int64), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.MaxByRow(Matrix<Int64>, Int32)
        VB: BitMatrixExtension.MaxByRow(Matrix(Of Int64), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow(MatrixDotNet.Matrix<System.Int64>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow(MatrixDotNet.Matrix(Of System.Int64), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: MaxByRow
        path: ../src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
        startLine: 165
      syntax:
        content:
          CSharp: public static long MaxByRow(this Matrix<long> matrix, int dimension)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function MaxByRow(matrix As Matrix(Of Long), dimension As Integer) As Long
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Int64}
        - id: dimension
          type: System.Int32
        return:
          type: System.Int64
      overload: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn(MatrixDotNet.Matrix{System.Byte},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn(MatrixDotNet.Matrix{System.Byte},System.Int32)
      language: CSharp
      name:
        CSharp: MaxByColumn(Matrix<Byte>, Int32)
        VB: MaxByColumn(Matrix(Of Byte), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.MaxByColumn(Matrix<Byte>, Int32)
        VB: BitMatrixExtension.MaxByColumn(Matrix(Of Byte), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn(MatrixDotNet.Matrix<System.Byte>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn(MatrixDotNet.Matrix(Of System.Byte), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: MaxByColumn
        path: ../src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
        startLine: 178
      syntax:
        content:
          CSharp: public static int MaxByColumn(this Matrix<byte> matrix, int dimension)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function MaxByColumn(matrix As Matrix(Of Byte), dimension As Integer) As Integer
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Byte}
        - id: dimension
          type: System.Int32
        return:
          type: System.Int32
      overload: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn(MatrixDotNet.Matrix{System.Int16},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn(MatrixDotNet.Matrix{System.Int16},System.Int32)
      language: CSharp
      name:
        CSharp: MaxByColumn(Matrix<Int16>, Int32)
        VB: MaxByColumn(Matrix(Of Int16), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.MaxByColumn(Matrix<Int16>, Int32)
        VB: BitMatrixExtension.MaxByColumn(Matrix(Of Int16), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn(MatrixDotNet.Matrix<System.Int16>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn(MatrixDotNet.Matrix(Of System.Int16), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: MaxByColumn
        path: ../src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
        startLine: 191
      syntax:
        content:
          CSharp: public static int MaxByColumn(this Matrix<short> matrix, int dimension)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function MaxByColumn(matrix As Matrix(Of Short), dimension As Integer) As Integer
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Int16}
        - id: dimension
          type: System.Int32
        return:
          type: System.Int32
      overload: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn(MatrixDotNet.Matrix{System.Int32},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn(MatrixDotNet.Matrix{System.Int32},System.Int32)
      language: CSharp
      name:
        CSharp: MaxByColumn(Matrix<Int32>, Int32)
        VB: MaxByColumn(Matrix(Of Int32), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.MaxByColumn(Matrix<Int32>, Int32)
        VB: BitMatrixExtension.MaxByColumn(Matrix(Of Int32), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn(MatrixDotNet.Matrix<System.Int32>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn(MatrixDotNet.Matrix(Of System.Int32), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: MaxByColumn
        path: ../src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
        startLine: 204
      syntax:
        content:
          CSharp: public static int MaxByColumn(this Matrix<int> matrix, int dimension)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function MaxByColumn(matrix As Matrix(Of Integer), dimension As Integer) As Integer
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Int32}
        - id: dimension
          type: System.Int32
        return:
          type: System.Int32
      overload: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn(MatrixDotNet.Matrix{System.Int64},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn(MatrixDotNet.Matrix{System.Int64},System.Int32)
      language: CSharp
      name:
        CSharp: MaxByColumn(Matrix<Int64>, Int32)
        VB: MaxByColumn(Matrix(Of Int64), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.MaxByColumn(Matrix<Int64>, Int32)
        VB: BitMatrixExtension.MaxByColumn(Matrix(Of Int64), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn(MatrixDotNet.Matrix<System.Int64>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn(MatrixDotNet.Matrix(Of System.Int64), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: MaxByColumn
        path: ../src/MatrixDotNet/Extensions/BitMatrixMaxExtension.cs
        startLine: 217
      syntax:
        content:
          CSharp: public static long MaxByColumn(this Matrix<long> matrix, int dimension)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function MaxByColumn(matrix As Matrix(Of Long), dimension As Integer) As Long
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Int64}
        - id: dimension
          type: System.Int32
        return:
          type: System.Int64
      overload: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.Min``1(MatrixDotNet.Matrix{``0})
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.Min``1(MatrixDotNet.Matrix{``0})
      language: CSharp
      name:
        CSharp: Min<T>(Matrix<T>)
        VB: Min(Of T)(Matrix(Of T))
      nameWithType:
        CSharp: BitMatrixExtension.Min<T>(Matrix<T>)
        VB: BitMatrixExtension.Min(Of T)(Matrix(Of T))
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.Min<T>(MatrixDotNet.Matrix<T>)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.Min(Of T)(MatrixDotNet.Matrix(Of T))
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Min
        path: ../src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
        startLine: 8
      syntax:
        content:
          CSharp: >-
            public static T Min<T>(this Matrix<T> matrix)

                where T : struct
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Min(Of T As Structure)(matrix As Matrix(Of T)) As T
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{{T}}
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: MatrixDotNet.Extensions.BitMatrixExtension.Min*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.MinByRow``1(MatrixDotNet.Matrix{``0},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MinByRow``1(MatrixDotNet.Matrix{``0},System.Int32)
      language: CSharp
      name:
        CSharp: MinByRow<T>(Matrix<T>, Int32)
        VB: MinByRow(Of T)(Matrix(Of T), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.MinByRow<T>(Matrix<T>, Int32)
        VB: BitMatrixExtension.MinByRow(Of T)(Matrix(Of T), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.MinByRow<T>(MatrixDotNet.Matrix<T>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.MinByRow(Of T)(MatrixDotNet.Matrix(Of T), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: MinByRow
        path: ../src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
        startLine: 29
      syntax:
        content:
          CSharp: >-
            public static T MinByRow<T>(this Matrix<T> matrix, int dimension)

                where T : struct
          VB: >-
            <ExtensionAttribute>

            Public Shared Function MinByRow(Of T As Structure)(matrix As Matrix(Of T), dimension As Integer) As T
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{{T}}
        - id: dimension
          type: System.Int32
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: MatrixDotNet.Extensions.BitMatrixExtension.MinByRow*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
      language: CSharp
      name:
        CSharp: MinByColumn<T>(Matrix<T>, Int32)
        VB: MinByColumn(Of T)(Matrix(Of T), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.MinByColumn<T>(Matrix<T>, Int32)
        VB: BitMatrixExtension.MinByColumn(Of T)(Matrix(Of T), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn<T>(MatrixDotNet.Matrix<T>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn(Of T)(MatrixDotNet.Matrix(Of T), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: MinByColumn
        path: ../src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
        startLine: 48
      syntax:
        content:
          CSharp: >-
            public static T MinByColumn<T>(this Matrix<T> matrix, int dimension)

                where T : struct
          VB: >-
            <ExtensionAttribute>

            Public Shared Function MinByColumn(Of T As Structure)(matrix As Matrix(Of T), dimension As Integer) As T
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{{T}}
        - id: dimension
          type: System.Int32
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.BitMin(MatrixDotNet.Matrix{System.Int64})
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.BitMin(MatrixDotNet.Matrix{System.Int64})
      language: CSharp
      name:
        CSharp: BitMin(Matrix<Int64>)
        VB: BitMin(Matrix(Of Int64))
      nameWithType:
        CSharp: BitMatrixExtension.BitMin(Matrix<Int64>)
        VB: BitMatrixExtension.BitMin(Matrix(Of Int64))
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.BitMin(MatrixDotNet.Matrix<System.Int64>)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.BitMin(MatrixDotNet.Matrix(Of System.Int64))
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: BitMin
        path: ../src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
        startLine: 67
      syntax:
        content:
          CSharp: public static long BitMin(this Matrix<long> matrix)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function BitMin(matrix As Matrix(Of Long)) As Long
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Int64}
        return:
          type: System.Int64
      overload: MatrixDotNet.Extensions.BitMatrixExtension.BitMin*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.BitMin(MatrixDotNet.Matrix{System.Int32})
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.BitMin(MatrixDotNet.Matrix{System.Int32})
      language: CSharp
      name:
        CSharp: BitMin(Matrix<Int32>)
        VB: BitMin(Matrix(Of Int32))
      nameWithType:
        CSharp: BitMatrixExtension.BitMin(Matrix<Int32>)
        VB: BitMatrixExtension.BitMin(Matrix(Of Int32))
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.BitMin(MatrixDotNet.Matrix<System.Int32>)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.BitMin(MatrixDotNet.Matrix(Of System.Int32))
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: BitMin
        path: ../src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
        startLine: 80
      syntax:
        content:
          CSharp: public static int BitMin(this Matrix<int> matrix)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function BitMin(matrix As Matrix(Of Integer)) As Integer
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Int32}
        return:
          type: System.Int32
      overload: MatrixDotNet.Extensions.BitMatrixExtension.BitMin*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.BitMin(MatrixDotNet.Matrix{System.Int16})
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.BitMin(MatrixDotNet.Matrix{System.Int16})
      language: CSharp
      name:
        CSharp: BitMin(Matrix<Int16>)
        VB: BitMin(Matrix(Of Int16))
      nameWithType:
        CSharp: BitMatrixExtension.BitMin(Matrix<Int16>)
        VB: BitMatrixExtension.BitMin(Matrix(Of Int16))
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.BitMin(MatrixDotNet.Matrix<System.Int16>)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.BitMin(MatrixDotNet.Matrix(Of System.Int16))
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: BitMin
        path: ../src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
        startLine: 93
      syntax:
        content:
          CSharp: public static int BitMin(this Matrix<short> matrix)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function BitMin(matrix As Matrix(Of Short)) As Integer
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Int16}
        return:
          type: System.Int32
      overload: MatrixDotNet.Extensions.BitMatrixExtension.BitMin*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.BitMin(MatrixDotNet.Matrix{System.Byte})
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.BitMin(MatrixDotNet.Matrix{System.Byte})
      language: CSharp
      name:
        CSharp: BitMin(Matrix<Byte>)
        VB: BitMin(Matrix(Of Byte))
      nameWithType:
        CSharp: BitMatrixExtension.BitMin(Matrix<Byte>)
        VB: BitMatrixExtension.BitMin(Matrix(Of Byte))
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.BitMin(MatrixDotNet.Matrix<System.Byte>)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.BitMin(MatrixDotNet.Matrix(Of System.Byte))
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: BitMin
        path: ../src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
        startLine: 106
      syntax:
        content:
          CSharp: public static int BitMin(this Matrix<byte> matrix)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function BitMin(matrix As Matrix(Of Byte)) As Integer
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Byte}
        return:
          type: System.Int32
      overload: MatrixDotNet.Extensions.BitMatrixExtension.BitMin*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow(MatrixDotNet.Matrix{System.Int64},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow(MatrixDotNet.Matrix{System.Int64},System.Int32)
      language: CSharp
      name:
        CSharp: BitMinByRow(Matrix<Int64>, Int32)
        VB: BitMinByRow(Matrix(Of Int64), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.BitMinByRow(Matrix<Int64>, Int32)
        VB: BitMatrixExtension.BitMinByRow(Matrix(Of Int64), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow(MatrixDotNet.Matrix<System.Int64>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow(MatrixDotNet.Matrix(Of System.Int64), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: BitMinByRow
        path: ../src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
        startLine: 119
      syntax:
        content:
          CSharp: public static long BitMinByRow(this Matrix<long> matrix, int dimension)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function BitMinByRow(matrix As Matrix(Of Long), dimension As Integer) As Long
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Int64}
        - id: dimension
          type: System.Int32
        return:
          type: System.Int64
      overload: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow(MatrixDotNet.Matrix{System.Int32},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow(MatrixDotNet.Matrix{System.Int32},System.Int32)
      language: CSharp
      name:
        CSharp: BitMinByRow(Matrix<Int32>, Int32)
        VB: BitMinByRow(Matrix(Of Int32), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.BitMinByRow(Matrix<Int32>, Int32)
        VB: BitMatrixExtension.BitMinByRow(Matrix(Of Int32), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow(MatrixDotNet.Matrix<System.Int32>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow(MatrixDotNet.Matrix(Of System.Int32), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: BitMinByRow
        path: ../src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
        startLine: 132
      syntax:
        content:
          CSharp: public static int BitMinByRow(this Matrix<int> matrix, int dimension)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function BitMinByRow(matrix As Matrix(Of Integer), dimension As Integer) As Integer
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Int32}
        - id: dimension
          type: System.Int32
        return:
          type: System.Int32
      overload: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow(MatrixDotNet.Matrix{System.Int16},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow(MatrixDotNet.Matrix{System.Int16},System.Int32)
      language: CSharp
      name:
        CSharp: BitMinByRow(Matrix<Int16>, Int32)
        VB: BitMinByRow(Matrix(Of Int16), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.BitMinByRow(Matrix<Int16>, Int32)
        VB: BitMatrixExtension.BitMinByRow(Matrix(Of Int16), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow(MatrixDotNet.Matrix<System.Int16>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow(MatrixDotNet.Matrix(Of System.Int16), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: BitMinByRow
        path: ../src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
        startLine: 145
      syntax:
        content:
          CSharp: public static int BitMinByRow(this Matrix<short> matrix, int dimension)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function BitMinByRow(matrix As Matrix(Of Short), dimension As Integer) As Integer
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Int16}
        - id: dimension
          type: System.Int32
        return:
          type: System.Int32
      overload: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow(MatrixDotNet.Matrix{System.Byte},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow(MatrixDotNet.Matrix{System.Byte},System.Int32)
      language: CSharp
      name:
        CSharp: BitMinByRow(Matrix<Byte>, Int32)
        VB: BitMinByRow(Matrix(Of Byte), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.BitMinByRow(Matrix<Byte>, Int32)
        VB: BitMatrixExtension.BitMinByRow(Matrix(Of Byte), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow(MatrixDotNet.Matrix<System.Byte>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow(MatrixDotNet.Matrix(Of System.Byte), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: BitMinByRow
        path: ../src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
        startLine: 158
      syntax:
        content:
          CSharp: public static int BitMinByRow(this Matrix<byte> matrix, int dimension)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function BitMinByRow(matrix As Matrix(Of Byte), dimension As Integer) As Integer
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Byte}
        - id: dimension
          type: System.Int32
        return:
          type: System.Int32
      overload: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn(MatrixDotNet.Matrix{System.Int64},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn(MatrixDotNet.Matrix{System.Int64},System.Int32)
      language: CSharp
      name:
        CSharp: BitMinByColumn(Matrix<Int64>, Int32)
        VB: BitMinByColumn(Matrix(Of Int64), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.BitMinByColumn(Matrix<Int64>, Int32)
        VB: BitMatrixExtension.BitMinByColumn(Matrix(Of Int64), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn(MatrixDotNet.Matrix<System.Int64>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn(MatrixDotNet.Matrix(Of System.Int64), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: BitMinByColumn
        path: ../src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
        startLine: 171
      syntax:
        content:
          CSharp: public static long BitMinByColumn(this Matrix<long> matrix, int dimension)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function BitMinByColumn(matrix As Matrix(Of Long), dimension As Integer) As Long
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Int64}
        - id: dimension
          type: System.Int32
        return:
          type: System.Int64
      overload: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn(MatrixDotNet.Matrix{System.Int32},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn(MatrixDotNet.Matrix{System.Int32},System.Int32)
      language: CSharp
      name:
        CSharp: BitMinByColumn(Matrix<Int32>, Int32)
        VB: BitMinByColumn(Matrix(Of Int32), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.BitMinByColumn(Matrix<Int32>, Int32)
        VB: BitMatrixExtension.BitMinByColumn(Matrix(Of Int32), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn(MatrixDotNet.Matrix<System.Int32>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn(MatrixDotNet.Matrix(Of System.Int32), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: BitMinByColumn
        path: ../src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
        startLine: 184
      syntax:
        content:
          CSharp: public static int BitMinByColumn(this Matrix<int> matrix, int dimension)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function BitMinByColumn(matrix As Matrix(Of Integer), dimension As Integer) As Integer
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Int32}
        - id: dimension
          type: System.Int32
        return:
          type: System.Int32
      overload: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn(MatrixDotNet.Matrix{System.Int16},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn(MatrixDotNet.Matrix{System.Int16},System.Int32)
      language: CSharp
      name:
        CSharp: BitMinByColumn(Matrix<Int16>, Int32)
        VB: BitMinByColumn(Matrix(Of Int16), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.BitMinByColumn(Matrix<Int16>, Int32)
        VB: BitMatrixExtension.BitMinByColumn(Matrix(Of Int16), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn(MatrixDotNet.Matrix<System.Int16>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn(MatrixDotNet.Matrix(Of System.Int16), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: BitMinByColumn
        path: ../src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
        startLine: 197
      syntax:
        content:
          CSharp: public static int BitMinByColumn(this Matrix<short> matrix, int dimension)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function BitMinByColumn(matrix As Matrix(Of Short), dimension As Integer) As Integer
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Int16}
        - id: dimension
          type: System.Int32
        return:
          type: System.Int32
      overload: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn(MatrixDotNet.Matrix{System.Byte},System.Int32)
      commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn(MatrixDotNet.Matrix{System.Byte},System.Int32)
      language: CSharp
      name:
        CSharp: BitMinByColumn(Matrix<Byte>, Int32)
        VB: BitMinByColumn(Matrix(Of Byte), Int32)
      nameWithType:
        CSharp: BitMatrixExtension.BitMinByColumn(Matrix<Byte>, Int32)
        VB: BitMatrixExtension.BitMinByColumn(Matrix(Of Byte), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn(MatrixDotNet.Matrix<System.Byte>, System.Int32)
        VB: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn(MatrixDotNet.Matrix(Of System.Byte), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: BitMinByColumn
        path: ../src/MatrixDotNet/Extensions/BitMatrixMinExtension.cs
        startLine: 210
      syntax:
        content:
          CSharp: public static int BitMinByColumn(this Matrix<byte> matrix, int dimension)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function BitMinByColumn(matrix As Matrix(Of Byte), dimension As Integer) As Integer
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{System.Byte}
        - id: dimension
          type: System.Int32
        return:
          type: System.Int32
      overload: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: MatrixDotNet.Extensions.MatrixExtension
    commentId: T:MatrixDotNet.Extensions.MatrixExtension
    language: CSharp
    name:
      CSharp: MatrixExtension
      VB: MatrixExtension
    nameWithType:
      CSharp: MatrixExtension
      VB: MatrixExtension
    qualifiedName:
      CSharp: MatrixDotNet.Extensions.MatrixExtension
      VB: MatrixDotNet.Extensions.MatrixExtension
    type: Class
    assemblies:
    - MatrixDotNet
    namespace: MatrixDotNet.Extensions
    source:
      remote:
        path: src/MatrixDotNet/Extensions/MatrixSortExtension.cs
        branch: master
        repo: https://github.com/toor1245/MatrixDotNet.git
      id: MatrixExtension
      path: ../src/MatrixDotNet/Extensions/MatrixSortExtension.cs
      startLine: 2
    summary: "\nRepresents Matrix extension.\n"
    example: []
    syntax:
      content:
        CSharp: 'public static class MatrixExtension : object'
        VB: >-
          Public Module MatrixExtension

              Inherits Object
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.MatrixExtension.GetRow``1(MatrixDotNet.Matrix{``0},System.Int32)
      commentId: M:MatrixDotNet.Extensions.MatrixExtension.GetRow``1(MatrixDotNet.Matrix{``0},System.Int32)
      language: CSharp
      name:
        CSharp: GetRow<T>(Matrix<T>, Int32)
        VB: GetRow(Of T)(Matrix(Of T), Int32)
      nameWithType:
        CSharp: MatrixExtension.GetRow<T>(Matrix<T>, Int32)
        VB: MatrixExtension.GetRow(Of T)(Matrix(Of T), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.MatrixExtension.GetRow<T>(MatrixDotNet.Matrix<T>, System.Int32)
        VB: MatrixDotNet.Extensions.MatrixExtension.GetRow(Of T)(MatrixDotNet.Matrix(Of T), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/MatrixExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: GetRow
        path: ../src/MatrixDotNet/Extensions/MatrixExtension.cs
        startLine: 19
      summary: "\nGets row array of matrix by row index.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            public static T[] GetRow<T>(this Matrix<T> matrix, int index)

                where T : struct
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GetRow(Of T As Structure)(matrix As Matrix(Of T), index As Integer) As T()
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{{T}}
          description: ''
        - id: index
          type: System.Int32
          description: ''
        typeParameters:
        - id: T
          description: ''
        return:
          type: '{T}[]'
          description: ''
      overload: MatrixDotNet.Extensions.MatrixExtension.GetRow*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.MatrixExtension.GetColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
      commentId: M:MatrixDotNet.Extensions.MatrixExtension.GetColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
      language: CSharp
      name:
        CSharp: GetColumn<T>(Matrix<T>, Int32)
        VB: GetColumn(Of T)(Matrix(Of T), Int32)
      nameWithType:
        CSharp: MatrixExtension.GetColumn<T>(Matrix<T>, Int32)
        VB: MatrixExtension.GetColumn(Of T)(Matrix(Of T), Int32)
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.MatrixExtension.GetColumn<T>(MatrixDotNet.Matrix<T>, System.Int32)
        VB: MatrixDotNet.Extensions.MatrixExtension.GetColumn(Of T)(MatrixDotNet.Matrix(Of T), System.Int32)
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/MatrixExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: GetColumn
        path: ../src/MatrixDotNet/Extensions/MatrixExtension.cs
        startLine: 46
      summary: "\nGets column array of matrix by columns index.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            public static T[] GetColumn<T>(this Matrix<T> matrix, int index)

                where T : struct
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GetColumn(Of T As Structure)(matrix As Matrix(Of T), index As Integer) As T()
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{{T}}
          description: matrix.
        - id: index
          type: System.Int32
          description: index.
        typeParameters:
        - id: T
          description: unmanaged type.
        return:
          type: '{T}[]'
          description: ''
      overload: MatrixDotNet.Extensions.MatrixExtension.GetColumn*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.MatrixExtension.Transport``1(MatrixDotNet.Matrix{``0})
      commentId: M:MatrixDotNet.Extensions.MatrixExtension.Transport``1(MatrixDotNet.Matrix{``0})
      language: CSharp
      name:
        CSharp: Transport<T>(Matrix<T>)
        VB: Transport(Of T)(Matrix(Of T))
      nameWithType:
        CSharp: MatrixExtension.Transport<T>(Matrix<T>)
        VB: MatrixExtension.Transport(Of T)(Matrix(Of T))
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.MatrixExtension.Transport<T>(MatrixDotNet.Matrix<T>)
        VB: MatrixDotNet.Extensions.MatrixExtension.Transport(Of T)(MatrixDotNet.Matrix(Of T))
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/MatrixExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Transport
        path: ../src/MatrixDotNet/Extensions/MatrixExtension.cs
        startLine: 71
      summary: "\nGets transport matrix.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            public static Matrix<T> Transport<T>(this Matrix<T> matrix)

                where T : struct
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Transport(Of T As Structure)(matrix As Matrix(Of T)) As Matrix(Of T)
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{{T}}
          description: the matrix.
        typeParameters:
        - id: T
          description: unmanaged type.
        return:
          type: MatrixDotNet.Matrix{{T}}
          description: ''
      overload: MatrixDotNet.Extensions.MatrixExtension.Transport*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive``1(MatrixDotNet.Matrix{``0})
      commentId: M:MatrixDotNet.Extensions.MatrixExtension.ToPrimitive``1(MatrixDotNet.Matrix{``0})
      language: CSharp
      name:
        CSharp: ToPrimitive<T>(Matrix<T>)
        VB: ToPrimitive(Of T)(Matrix(Of T))
      nameWithType:
        CSharp: MatrixExtension.ToPrimitive<T>(Matrix<T>)
        VB: MatrixExtension.ToPrimitive(Of T)(Matrix(Of T))
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive<T>(MatrixDotNet.Matrix<T>)
        VB: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive(Of T)(MatrixDotNet.Matrix(Of T))
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/MatrixExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: ToPrimitive
        path: ../src/MatrixDotNet/Extensions/MatrixExtension.cs
        startLine: 93
      summary: "\nConvert matrix to primitive matrix.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            public static T[, ] ToPrimitive<T>(this Matrix<T> matrix)

                where T : struct
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ToPrimitive(Of T As Structure)(matrix As Matrix(Of T)) As T(,)
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{{T}}
          description: ''
        typeParameters:
        - id: T
          description: ''
        return:
          type: '{T}[,]'
          description: ''
      overload: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet``1(``0[0:,0:])
      commentId: M:MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet``1(``0[0:,0:])
      language: CSharp
      name:
        CSharp: ToMatrixDotNet<T>(T[,])
        VB: ToMatrixDotNet(Of T)(T(,))
      nameWithType:
        CSharp: MatrixExtension.ToMatrixDotNet<T>(T[,])
        VB: MatrixExtension.ToMatrixDotNet(Of T)(T(,))
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet<T>(T[,])
        VB: MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet(Of T)(T(,))
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/MatrixExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: ToMatrixDotNet
        path: ../src/MatrixDotNet/Extensions/MatrixExtension.cs
        startLine: 114
      summary: "\nConvert primitive matrix to <xref href=\"MatrixDotNet.Matrix%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            public static Matrix<T> ToMatrixDotNet<T>(this T[, ] matrix)

                where T : struct
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ToMatrixDotNet(Of T As Structure)(matrix As T(,)) As Matrix(Of T)
        parameters:
        - id: matrix
          type: '{T}[,]'
          description: primitive matrix.
        typeParameters:
        - id: T
          description: unmanaged type
        return:
          type: MatrixDotNet.Matrix{{T}}
          description: ''
      overload: MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        MatrixDotNet.Matrix`1: 
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate``1(MatrixDotNet.Matrix{``0})
      commentId: M:MatrixDotNet.Extensions.MatrixExtension.GetDeterminate``1(MatrixDotNet.Matrix{``0})
      language: CSharp
      name:
        CSharp: GetDeterminate<T>(Matrix<T>)
        VB: GetDeterminate(Of T)(Matrix(Of T))
      nameWithType:
        CSharp: MatrixExtension.GetDeterminate<T>(Matrix<T>)
        VB: MatrixExtension.GetDeterminate(Of T)(Matrix(Of T))
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate<T>(MatrixDotNet.Matrix<T>)
        VB: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate(Of T)(MatrixDotNet.Matrix(Of T))
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/MatrixExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: GetDeterminate
        path: ../src/MatrixDotNet/Extensions/MatrixExtension.cs
        startLine: 161
      summary: "\nGets determinant of matrix.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            public static double GetDeterminate<T>(this Matrix<T> matrix)

                where T : struct
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GetDeterminate(Of T As Structure)(matrix As Matrix(Of T)) As Double
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{{T}}
          description: matrix.
        typeParameters:
        - id: T
          description: unmanaged type
        return:
          type: System.Double
          description: double.
      overload: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate*
      exceptions:
      - type: MatrixDotNet.Exceptions.MatrixDotNetException
        commentId: T:MatrixDotNet.Exceptions.MatrixDotNetException
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        MatrixDotNet.Exceptions.MatrixDotNetException: 
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.MatrixExtension.KramerSolve``1(MatrixDotNet.Matrix{``0},``0[])
      commentId: M:MatrixDotNet.Extensions.MatrixExtension.KramerSolve``1(MatrixDotNet.Matrix{``0},``0[])
      language: CSharp
      name:
        CSharp: KramerSolve<T>(Matrix<T>, T[])
        VB: KramerSolve(Of T)(Matrix(Of T), T())
      nameWithType:
        CSharp: MatrixExtension.KramerSolve<T>(Matrix<T>, T[])
        VB: MatrixExtension.KramerSolve(Of T)(Matrix(Of T), T())
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.MatrixExtension.KramerSolve<T>(MatrixDotNet.Matrix<T>, T[])
        VB: MatrixDotNet.Extensions.MatrixExtension.KramerSolve(Of T)(MatrixDotNet.Matrix(Of T), T())
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/MatrixExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: KramerSolve
        path: ../src/MatrixDotNet/Extensions/MatrixExtension.cs
        startLine: 195
      summary: "\nGets determinant matrix by Kramer algorithm.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            public static double[] KramerSolve<T>(this Matrix<T> matrix, T[] arr)

                where T : struct
          VB: >-
            <ExtensionAttribute>

            Public Shared Function KramerSolve(Of T As Structure)(matrix As Matrix(Of T), arr As T()) As Double()
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{{T}}
          description: matrix.
        - id: arr
          type: '{T}[]'
          description: array.
        typeParameters:
        - id: T
          description: unmanaged type.
        return:
          type: System.Double[]
          description: ''
      overload: MatrixDotNet.Extensions.MatrixExtension.KramerSolve*
      exceptions:
      - type: MatrixDotNet.Exceptions.MatrixDotNetException
        commentId: T:MatrixDotNet.Exceptions.MatrixDotNetException
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        MatrixDotNet.Exceptions.MatrixDotNetException: 
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.MatrixExtension.Gause(MatrixDotNet.Matrix{System.Double},System.Double[])
      commentId: M:MatrixDotNet.Extensions.MatrixExtension.Gause(MatrixDotNet.Matrix{System.Double},System.Double[])
      language: CSharp
      name:
        CSharp: Gause(Matrix<Double>, Double[])
        VB: Gause(Matrix(Of Double), Double())
      nameWithType:
        CSharp: MatrixExtension.Gause(Matrix<Double>, Double[])
        VB: MatrixExtension.Gause(Matrix(Of Double), Double())
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.MatrixExtension.Gause(MatrixDotNet.Matrix<System.Double>, System.Double[])
        VB: MatrixDotNet.Extensions.MatrixExtension.Gause(MatrixDotNet.Matrix(Of System.Double), System.Double())
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/MatrixExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Gause
        path: ../src/MatrixDotNet/Extensions/MatrixExtension.cs
        startLine: 223
      summary: "\nGets determinant matrix by Gause algorithm.\n"
      example: []
      syntax:
        content:
          CSharp: public static double[] Gause(this Matrix<double> A1, double[] b1)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Gause(A1 As Matrix(Of Double), b1 As Double()) As Double()
        parameters:
        - id: A1
          type: MatrixDotNet.Matrix{System.Double}
          description: ''
        - id: b1
          type: System.Double[]
          description: ''
        return:
          type: System.Double[]
          description: ''
      overload: MatrixDotNet.Extensions.MatrixExtension.Gause*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.MatrixExtension.Pretty``1(MatrixDotNet.Matrix{``0})
      commentId: M:MatrixDotNet.Extensions.MatrixExtension.Pretty``1(MatrixDotNet.Matrix{``0})
      language: CSharp
      name:
        CSharp: Pretty<T>(Matrix<T>)
        VB: Pretty(Of T)(Matrix(Of T))
      nameWithType:
        CSharp: MatrixExtension.Pretty<T>(Matrix<T>)
        VB: MatrixExtension.Pretty(Of T)(Matrix(Of T))
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.MatrixExtension.Pretty<T>(MatrixDotNet.Matrix<T>)
        VB: MatrixDotNet.Extensions.MatrixExtension.Pretty(Of T)(MatrixDotNet.Matrix(Of T))
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/MatrixOutputExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: Pretty
        path: ../src/MatrixDotNet/Extensions/MatrixOutputExtension.cs
        startLine: 7
      syntax:
        content:
          CSharp: >-
            public static string Pretty<T>(this Matrix<T> matrix)

                where T : struct
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Pretty(Of T As Structure)(matrix As Matrix(Of T)) As String
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{{T}}
        typeParameters:
        - id: T
        return:
          type: System.String
      overload: MatrixDotNet.Extensions.MatrixExtension.Pretty*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: MatrixDotNet.Extensions.MatrixExtension.BubbleSort``1(MatrixDotNet.Matrix{``0})
      commentId: M:MatrixDotNet.Extensions.MatrixExtension.BubbleSort``1(MatrixDotNet.Matrix{``0})
      language: CSharp
      name:
        CSharp: BubbleSort<T>(Matrix<T>)
        VB: BubbleSort(Of T)(Matrix(Of T))
      nameWithType:
        CSharp: MatrixExtension.BubbleSort<T>(Matrix<T>)
        VB: MatrixExtension.BubbleSort(Of T)(Matrix(Of T))
      qualifiedName:
        CSharp: MatrixDotNet.Extensions.MatrixExtension.BubbleSort<T>(MatrixDotNet.Matrix<T>)
        VB: MatrixDotNet.Extensions.MatrixExtension.BubbleSort(Of T)(MatrixDotNet.Matrix(Of T))
      type: Method
      assemblies:
      - MatrixDotNet
      namespace: MatrixDotNet.Extensions
      source:
        remote:
          path: src/MatrixDotNet/Extensions/MatrixSortExtension.cs
          branch: master
          repo: https://github.com/toor1245/MatrixDotNet.git
        id: BubbleSort
        path: ../src/MatrixDotNet/Extensions/MatrixSortExtension.cs
        startLine: 4
      syntax:
        content:
          CSharp: >-
            public static void BubbleSort<T>(this Matrix<T> matrix)

                where T : struct
          VB: >-
            <ExtensionAttribute>

            Public Shared Sub BubbleSort(Of T As Structure)(matrix As Matrix(Of T))
        parameters:
        - id: matrix
          type: MatrixDotNet.Matrix{{T}}
        typeParameters:
        - id: T
      overload: MatrixDotNet.Extensions.MatrixExtension.BubbleSort*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
references:
  MatrixDemonstrate.Program:
    name:
      CSharp:
      - id: MatrixDemonstrate.Program
        name: Program
        nameWithType: Program
        qualifiedName: MatrixDemonstrate.Program
      VB:
      - id: MatrixDemonstrate.Program
        name: Program
        nameWithType: Program
        qualifiedName: MatrixDemonstrate.Program
    isDefinition: true
    commentId: T:MatrixDemonstrate.Program
  MatrixDemonstrate:
    name:
      CSharp:
      - name: MatrixDemonstrate
        nameWithType: MatrixDemonstrate
        qualifiedName: MatrixDemonstrate
      VB:
      - name: MatrixDemonstrate
        nameWithType: MatrixDemonstrate
        qualifiedName: MatrixDemonstrate
    isDefinition: true
    commentId: N:MatrixDemonstrate
  MatrixDotNet.Extensions.BitMatrixExtension.Max``1(MatrixDotNet.Matrix{``0}):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.Max``1(MatrixDotNet.Matrix{``0})
        name: Max<T>
        nameWithType: BitMatrixExtension.Max<T>
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.Max<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.Max``1(MatrixDotNet.Matrix{``0})
        name: Max(Of T)
        nameWithType: BitMatrixExtension.Max(Of T)
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.Max(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.Max``1(MatrixDotNet.Matrix{``0})
  MatrixDotNet.Extensions:
    name:
      CSharp:
      - name: MatrixDotNet.Extensions
        nameWithType: MatrixDotNet.Extensions
        qualifiedName: MatrixDotNet.Extensions
      VB:
      - name: MatrixDotNet.Extensions
        nameWithType: MatrixDotNet.Extensions
        qualifiedName: MatrixDotNet.Extensions
    isDefinition: true
    commentId: N:MatrixDotNet.Extensions
  MatrixDotNet.Extensions.BitMatrixExtension:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension
        name: BitMatrixExtension
        nameWithType: BitMatrixExtension
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension
        name: BitMatrixExtension
        nameWithType: BitMatrixExtension
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension
    isDefinition: true
    parent: MatrixDotNet.Extensions
    commentId: T:MatrixDotNet.Extensions.BitMatrixExtension
  MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.BitMatrixExtension.Max``1:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.Max``1
        name: Max<T>
        nameWithType: BitMatrixExtension.Max<T>
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.Max<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.Max``1
        name: Max(Of T)
        nameWithType: BitMatrixExtension.Max(Of T)
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.Max(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Extensions.BitMatrixExtension.Max``1(MatrixDotNet.Matrix{``0})
    parent: MatrixDotNet.Extensions.BitMatrixExtension
    commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.Max``1(MatrixDotNet.Matrix{``0})
  MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow``1(MatrixDotNet.Matrix{``0},System.Int32):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow``1(MatrixDotNet.Matrix{``0},System.Int32)
        name: MaxByRow<T>
        nameWithType: BitMatrixExtension.MaxByRow<T>
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow``1(MatrixDotNet.Matrix{``0},System.Int32)
        name: MaxByRow(Of T)
        nameWithType: BitMatrixExtension.MaxByRow(Of T)
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow``1(MatrixDotNet.Matrix{``0},System.Int32)
  MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow``1(System.Int32):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow``1(System.Int32)
        name: MaxByRow<T>
        nameWithType: BitMatrixExtension.MaxByRow<T>
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow``1(System.Int32)
        name: MaxByRow(Of T)
        nameWithType: BitMatrixExtension.MaxByRow(Of T)
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow``1(MatrixDotNet.Matrix{``0},System.Int32)
    parent: MatrixDotNet.Extensions.BitMatrixExtension
    commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow``1(MatrixDotNet.Matrix{``0},System.Int32)
  MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn``1(MatrixDotNet.Matrix{``0},System.Int32):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
        name: MaxByColumn<T>
        nameWithType: BitMatrixExtension.MaxByColumn<T>
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
        name: MaxByColumn(Of T)
        nameWithType: BitMatrixExtension.MaxByColumn(Of T)
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
  MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn``1(System.Int32):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn``1(System.Int32)
        name: MaxByColumn<T>
        nameWithType: BitMatrixExtension.MaxByColumn<T>
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn``1(System.Int32)
        name: MaxByColumn(Of T)
        nameWithType: BitMatrixExtension.MaxByColumn(Of T)
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
    parent: MatrixDotNet.Extensions.BitMatrixExtension
    commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
  MatrixDotNet.Extensions.BitMatrixExtension.Min``1(MatrixDotNet.Matrix{``0}):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.Min``1(MatrixDotNet.Matrix{``0})
        name: Min<T>
        nameWithType: BitMatrixExtension.Min<T>
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.Min<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.Min``1(MatrixDotNet.Matrix{``0})
        name: Min(Of T)
        nameWithType: BitMatrixExtension.Min(Of T)
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.Min(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.Min``1(MatrixDotNet.Matrix{``0})
  MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.BitMatrixExtension.Min``1:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.Min``1
        name: Min<T>
        nameWithType: BitMatrixExtension.Min<T>
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.Min<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.Min``1
        name: Min(Of T)
        nameWithType: BitMatrixExtension.Min(Of T)
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.Min(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Extensions.BitMatrixExtension.Min``1(MatrixDotNet.Matrix{``0})
    parent: MatrixDotNet.Extensions.BitMatrixExtension
    commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.Min``1(MatrixDotNet.Matrix{``0})
  MatrixDotNet.Extensions.BitMatrixExtension.MinByRow``1(MatrixDotNet.Matrix{``0},System.Int32):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MinByRow``1(MatrixDotNet.Matrix{``0},System.Int32)
        name: MinByRow<T>
        nameWithType: BitMatrixExtension.MinByRow<T>
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MinByRow<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MinByRow``1(MatrixDotNet.Matrix{``0},System.Int32)
        name: MinByRow(Of T)
        nameWithType: BitMatrixExtension.MinByRow(Of T)
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MinByRow(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MinByRow``1(MatrixDotNet.Matrix{``0},System.Int32)
  MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.BitMatrixExtension.MinByRow``1(System.Int32):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MinByRow``1(System.Int32)
        name: MinByRow<T>
        nameWithType: BitMatrixExtension.MinByRow<T>
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MinByRow<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MinByRow``1(System.Int32)
        name: MinByRow(Of T)
        nameWithType: BitMatrixExtension.MinByRow(Of T)
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MinByRow(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Extensions.BitMatrixExtension.MinByRow``1(MatrixDotNet.Matrix{``0},System.Int32)
    parent: MatrixDotNet.Extensions.BitMatrixExtension
    commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MinByRow``1(MatrixDotNet.Matrix{``0},System.Int32)
  MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn``1(MatrixDotNet.Matrix{``0},System.Int32):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
        name: MinByColumn<T>
        nameWithType: BitMatrixExtension.MinByColumn<T>
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
        name: MinByColumn(Of T)
        nameWithType: BitMatrixExtension.MinByColumn(Of T)
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
  MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn``1(System.Int32):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn``1(System.Int32)
        name: MinByColumn<T>
        nameWithType: BitMatrixExtension.MinByColumn<T>
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn``1(System.Int32)
        name: MinByColumn(Of T)
        nameWithType: BitMatrixExtension.MinByColumn(Of T)
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
    parent: MatrixDotNet.Extensions.BitMatrixExtension
    commentId: M:MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
  MatrixDotNet.Extensions.MatrixExtension.GetRow``1(MatrixDotNet.Matrix{``0},System.Int32):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.GetRow``1(MatrixDotNet.Matrix{``0},System.Int32)
        name: GetRow<T>
        nameWithType: MatrixExtension.GetRow<T>
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.GetRow<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.GetRow``1(MatrixDotNet.Matrix{``0},System.Int32)
        name: GetRow(Of T)
        nameWithType: MatrixExtension.GetRow(Of T)
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.GetRow(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:MatrixDotNet.Extensions.MatrixExtension.GetRow``1(MatrixDotNet.Matrix{``0},System.Int32)
  MatrixDotNet.Extensions.MatrixExtension:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension
        name: MatrixExtension
        nameWithType: MatrixExtension
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension
        name: MatrixExtension
        nameWithType: MatrixExtension
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension
    isDefinition: true
    parent: MatrixDotNet.Extensions
    commentId: T:MatrixDotNet.Extensions.MatrixExtension
  MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.MatrixExtension.GetRow``1(System.Int32):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.GetRow``1(System.Int32)
        name: GetRow<T>
        nameWithType: MatrixExtension.GetRow<T>
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.GetRow<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.GetRow``1(System.Int32)
        name: GetRow(Of T)
        nameWithType: MatrixExtension.GetRow(Of T)
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.GetRow(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Extensions.MatrixExtension.GetRow``1(MatrixDotNet.Matrix{``0},System.Int32)
    parent: MatrixDotNet.Extensions.MatrixExtension
    commentId: M:MatrixDotNet.Extensions.MatrixExtension.GetRow``1(MatrixDotNet.Matrix{``0},System.Int32)
  MatrixDotNet.Extensions.MatrixExtension.GetColumn``1(MatrixDotNet.Matrix{``0},System.Int32):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.GetColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
        name: GetColumn<T>
        nameWithType: MatrixExtension.GetColumn<T>
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.GetColumn<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.GetColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
        name: GetColumn(Of T)
        nameWithType: MatrixExtension.GetColumn(Of T)
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.GetColumn(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:MatrixDotNet.Extensions.MatrixExtension.GetColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
  MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.MatrixExtension.GetColumn``1(System.Int32):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.GetColumn``1(System.Int32)
        name: GetColumn<T>
        nameWithType: MatrixExtension.GetColumn<T>
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.GetColumn<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.GetColumn``1(System.Int32)
        name: GetColumn(Of T)
        nameWithType: MatrixExtension.GetColumn(Of T)
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.GetColumn(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Extensions.MatrixExtension.GetColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
    parent: MatrixDotNet.Extensions.MatrixExtension
    commentId: M:MatrixDotNet.Extensions.MatrixExtension.GetColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
  MatrixDotNet.Extensions.MatrixExtension.Transport``1(MatrixDotNet.Matrix{``0}):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.Transport``1(MatrixDotNet.Matrix{``0})
        name: Transport<T>
        nameWithType: MatrixExtension.Transport<T>
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.Transport<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.Transport``1(MatrixDotNet.Matrix{``0})
        name: Transport(Of T)
        nameWithType: MatrixExtension.Transport(Of T)
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.Transport(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:MatrixDotNet.Extensions.MatrixExtension.Transport``1(MatrixDotNet.Matrix{``0})
  MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.MatrixExtension.Transport``1:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.Transport``1
        name: Transport<T>
        nameWithType: MatrixExtension.Transport<T>
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.Transport<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.Transport``1
        name: Transport(Of T)
        nameWithType: MatrixExtension.Transport(Of T)
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.Transport(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Extensions.MatrixExtension.Transport``1(MatrixDotNet.Matrix{``0})
    parent: MatrixDotNet.Extensions.MatrixExtension
    commentId: M:MatrixDotNet.Extensions.MatrixExtension.Transport``1(MatrixDotNet.Matrix{``0})
  MatrixDotNet.Extensions.MatrixExtension.ToPrimitive``1(MatrixDotNet.Matrix{``0}):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive``1(MatrixDotNet.Matrix{``0})
        name: ToPrimitive<T>
        nameWithType: MatrixExtension.ToPrimitive<T>
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive``1(MatrixDotNet.Matrix{``0})
        name: ToPrimitive(Of T)
        nameWithType: MatrixExtension.ToPrimitive(Of T)
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:MatrixDotNet.Extensions.MatrixExtension.ToPrimitive``1(MatrixDotNet.Matrix{``0})
  MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.MatrixExtension.ToPrimitive``1:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive``1
        name: ToPrimitive<T>
        nameWithType: MatrixExtension.ToPrimitive<T>
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive``1
        name: ToPrimitive(Of T)
        nameWithType: MatrixExtension.ToPrimitive(Of T)
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive``1(MatrixDotNet.Matrix{``0})
    parent: MatrixDotNet.Extensions.MatrixExtension
    commentId: M:MatrixDotNet.Extensions.MatrixExtension.ToPrimitive``1(MatrixDotNet.Matrix{``0})
  MatrixDotNet.Extensions.MatrixExtension.GetDeterminate``1(MatrixDotNet.Matrix{``0}):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate``1(MatrixDotNet.Matrix{``0})
        name: GetDeterminate<T>
        nameWithType: MatrixExtension.GetDeterminate<T>
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate``1(MatrixDotNet.Matrix{``0})
        name: GetDeterminate(Of T)
        nameWithType: MatrixExtension.GetDeterminate(Of T)
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:MatrixDotNet.Extensions.MatrixExtension.GetDeterminate``1(MatrixDotNet.Matrix{``0})
  MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.MatrixExtension.GetDeterminate``1:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate``1
        name: GetDeterminate<T>
        nameWithType: MatrixExtension.GetDeterminate<T>
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate``1
        name: GetDeterminate(Of T)
        nameWithType: MatrixExtension.GetDeterminate(Of T)
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate``1(MatrixDotNet.Matrix{``0})
    parent: MatrixDotNet.Extensions.MatrixExtension
    commentId: M:MatrixDotNet.Extensions.MatrixExtension.GetDeterminate``1(MatrixDotNet.Matrix{``0})
  MatrixDotNet.Extensions.MatrixExtension.KramerSolve``1(MatrixDotNet.Matrix{``0},``0[]):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.KramerSolve``1(MatrixDotNet.Matrix{``0},``0[])
        name: KramerSolve<T>
        nameWithType: MatrixExtension.KramerSolve<T>
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.KramerSolve<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.KramerSolve``1(MatrixDotNet.Matrix{``0},``0[])
        name: KramerSolve(Of T)
        nameWithType: MatrixExtension.KramerSolve(Of T)
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.KramerSolve(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:MatrixDotNet.Extensions.MatrixExtension.KramerSolve``1(MatrixDotNet.Matrix{``0},``0[])
  MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.MatrixExtension.KramerSolve``1({T}[]):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.KramerSolve``1(``0[])
        name: KramerSolve<T>
        nameWithType: MatrixExtension.KramerSolve<T>
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.KramerSolve<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.KramerSolve``1(``0[])
        name: KramerSolve(Of T)
        nameWithType: MatrixExtension.KramerSolve(Of T)
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.KramerSolve(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Extensions.MatrixExtension.KramerSolve``1(MatrixDotNet.Matrix{``0},``0[])
    parent: MatrixDotNet.Extensions.MatrixExtension
    commentId: M:MatrixDotNet.Extensions.MatrixExtension.KramerSolve``1(MatrixDotNet.Matrix{``0},``0[])
  MatrixDotNet.Extensions.MatrixExtension.Pretty``1(MatrixDotNet.Matrix{``0}):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.Pretty``1(MatrixDotNet.Matrix{``0})
        name: Pretty<T>
        nameWithType: MatrixExtension.Pretty<T>
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.Pretty<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.Pretty``1(MatrixDotNet.Matrix{``0})
        name: Pretty(Of T)
        nameWithType: MatrixExtension.Pretty(Of T)
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.Pretty(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:MatrixDotNet.Extensions.MatrixExtension.Pretty``1(MatrixDotNet.Matrix{``0})
  MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.MatrixExtension.Pretty``1:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.Pretty``1
        name: Pretty<T>
        nameWithType: MatrixExtension.Pretty<T>
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.Pretty<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.Pretty``1
        name: Pretty(Of T)
        nameWithType: MatrixExtension.Pretty(Of T)
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.Pretty(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Extensions.MatrixExtension.Pretty``1(MatrixDotNet.Matrix{``0})
    parent: MatrixDotNet.Extensions.MatrixExtension
    commentId: M:MatrixDotNet.Extensions.MatrixExtension.Pretty``1(MatrixDotNet.Matrix{``0})
  MatrixDotNet.Extensions.MatrixExtension.BubbleSort``1(MatrixDotNet.Matrix{``0}):
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.BubbleSort``1(MatrixDotNet.Matrix{``0})
        name: BubbleSort<T>
        nameWithType: MatrixExtension.BubbleSort<T>
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.BubbleSort<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.BubbleSort``1(MatrixDotNet.Matrix{``0})
        name: BubbleSort(Of T)
        nameWithType: MatrixExtension.BubbleSort(Of T)
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.BubbleSort(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:MatrixDotNet.Extensions.MatrixExtension.BubbleSort``1(MatrixDotNet.Matrix{``0})
  MatrixDotNet.Matrix`1.MatrixDotNet.Extensions.MatrixExtension.BubbleSort``1:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.BubbleSort``1
        name: BubbleSort<T>
        nameWithType: MatrixExtension.BubbleSort<T>
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.BubbleSort<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.BubbleSort``1
        name: BubbleSort(Of T)
        nameWithType: MatrixExtension.BubbleSort(Of T)
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.BubbleSort(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Extensions.MatrixExtension.BubbleSort``1(MatrixDotNet.Matrix{``0})
    parent: MatrixDotNet.Extensions.MatrixExtension
    commentId: M:MatrixDotNet.Extensions.MatrixExtension.BubbleSort``1(MatrixDotNet.Matrix{``0})
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
  MatrixDotNet.Matrix`1.Length*:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1.Length*
        name: Length
        nameWithType: Matrix<T>.Length
        qualifiedName: MatrixDotNet.Matrix<T>.Length
      VB:
      - id: MatrixDotNet.Matrix`1.Length*
        name: Length
        nameWithType: Matrix(Of T).Length
        qualifiedName: MatrixDotNet.Matrix(Of T).Length
    isDefinition: true
    commentId: Overload:MatrixDotNet.Matrix`1.Length
  MatrixDotNet.Matrix`1.Rows*:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1.Rows*
        name: Rows
        nameWithType: Matrix<T>.Rows
        qualifiedName: MatrixDotNet.Matrix<T>.Rows
      VB:
      - id: MatrixDotNet.Matrix`1.Rows*
        name: Rows
        nameWithType: Matrix(Of T).Rows
        qualifiedName: MatrixDotNet.Matrix(Of T).Rows
    isDefinition: true
    commentId: Overload:MatrixDotNet.Matrix`1.Rows
  MatrixDotNet.Matrix`1.Columns*:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1.Columns*
        name: Columns
        nameWithType: Matrix<T>.Columns
        qualifiedName: MatrixDotNet.Matrix<T>.Columns
      VB:
      - id: MatrixDotNet.Matrix`1.Columns*
        name: Columns
        nameWithType: Matrix(Of T).Columns
        qualifiedName: MatrixDotNet.Matrix(Of T).Columns
    isDefinition: true
    commentId: Overload:MatrixDotNet.Matrix`1.Columns
  System.Double:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
    isDefinition: true
  MatrixDotNet.Matrix`1.Rank*:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1.Rank*
        name: Rank
        nameWithType: Matrix<T>.Rank
        qualifiedName: MatrixDotNet.Matrix<T>.Rank
      VB:
      - id: MatrixDotNet.Matrix`1.Rank*
        name: Rank
        nameWithType: Matrix(Of T).Rank
        qualifiedName: MatrixDotNet.Matrix(Of T).Rank
    isDefinition: true
    commentId: Overload:MatrixDotNet.Matrix`1.Rank
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
  MatrixDotNet.Matrix`1.IsSquare*:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1.IsSquare*
        name: IsSquare
        nameWithType: Matrix<T>.IsSquare
        qualifiedName: MatrixDotNet.Matrix<T>.IsSquare
      VB:
      - id: MatrixDotNet.Matrix`1.IsSquare*
        name: IsSquare
        nameWithType: Matrix(Of T).IsSquare
        qualifiedName: MatrixDotNet.Matrix(Of T).IsSquare
    isDefinition: true
    commentId: Overload:MatrixDotNet.Matrix`1.IsSquare
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  MatrixDotNet.Matrix`1.Item*:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1.Item*
        name: Item
        nameWithType: Matrix<T>.Item
        qualifiedName: MatrixDotNet.Matrix<T>.Item
      VB:
      - id: MatrixDotNet.Matrix`1.Item*
        name: Item
        nameWithType: Matrix(Of T).Item
        qualifiedName: MatrixDotNet.Matrix(Of T).Item
    isDefinition: true
    commentId: Overload:MatrixDotNet.Matrix`1.Item
  '{T}[]':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  MatrixDotNet:
    name:
      CSharp:
      - name: MatrixDotNet
        nameWithType: MatrixDotNet
        qualifiedName: MatrixDotNet
      VB:
      - name: MatrixDotNet
        nameWithType: MatrixDotNet
        qualifiedName: MatrixDotNet
    isDefinition: true
    commentId: N:MatrixDotNet
  MatrixDotNet.State:
    name:
      CSharp:
      - id: MatrixDotNet.State
        name: State
        nameWithType: State
        qualifiedName: MatrixDotNet.State
      VB:
      - id: MatrixDotNet.State
        name: State
        nameWithType: State
        qualifiedName: MatrixDotNet.State
    isDefinition: true
    parent: MatrixDotNet
    commentId: T:MatrixDotNet.State
  '{T}[,]':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '[,]'
        nameWithType: '[,]'
        qualifiedName: '[,]'
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: (,)
        nameWithType: (,)
        qualifiedName: (,)
    isDefinition: false
  MatrixDotNet.Matrix`1.#ctor*:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1.#ctor*
        name: Matrix
        nameWithType: Matrix<T>.Matrix
        qualifiedName: MatrixDotNet.Matrix<T>.Matrix
      VB:
      - id: MatrixDotNet.Matrix`1.#ctor*
        name: Matrix
        nameWithType: Matrix(Of T).Matrix
        qualifiedName: MatrixDotNet.Matrix(Of T).Matrix
    isDefinition: true
    commentId: Overload:MatrixDotNet.Matrix`1.#ctor
  MatrixDotNet.Matrix`1:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: MatrixDotNet
    commentId: T:MatrixDotNet.Matrix`1
  MatrixDotNet.Exceptions.MatrixDotNetException:
    name:
      CSharp:
      - id: MatrixDotNet.Exceptions.MatrixDotNetException
        name: MatrixDotNetException
        nameWithType: MatrixDotNetException
        qualifiedName: MatrixDotNet.Exceptions.MatrixDotNetException
      VB:
      - id: MatrixDotNet.Exceptions.MatrixDotNetException
        name: MatrixDotNetException
        nameWithType: MatrixDotNetException
        qualifiedName: MatrixDotNet.Exceptions.MatrixDotNetException
    isDefinition: true
    commentId: T:MatrixDotNet.Exceptions.MatrixDotNetException
  MatrixDotNet.Matrix`1.op_Addition*:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1.op_Addition*
        name: Addition
        nameWithType: Matrix<T>.Addition
        qualifiedName: MatrixDotNet.Matrix<T>.Addition
      VB:
      - id: MatrixDotNet.Matrix`1.op_Addition*
        name: Addition
        nameWithType: Matrix(Of T).Addition
        qualifiedName: MatrixDotNet.Matrix(Of T).Addition
    isDefinition: true
    commentId: Overload:MatrixDotNet.Matrix`1.op_Addition
  MatrixDotNet.Matrix`1.op_Subtraction*:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1.op_Subtraction*
        name: Subtraction
        nameWithType: Matrix<T>.Subtraction
        qualifiedName: MatrixDotNet.Matrix<T>.Subtraction
      VB:
      - id: MatrixDotNet.Matrix`1.op_Subtraction*
        name: Subtraction
        nameWithType: Matrix(Of T).Subtraction
        qualifiedName: MatrixDotNet.Matrix(Of T).Subtraction
    isDefinition: true
    commentId: Overload:MatrixDotNet.Matrix`1.op_Subtraction
  MatrixDotNet.Matrix`1.op_Multiply*:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1.op_Multiply*
        name: Multiply
        nameWithType: Matrix<T>.Multiply
        qualifiedName: MatrixDotNet.Matrix<T>.Multiply
      VB:
      - id: MatrixDotNet.Matrix`1.op_Multiply*
        name: Multiply
        nameWithType: Matrix(Of T).Multiply
        qualifiedName: MatrixDotNet.Matrix(Of T).Multiply
    isDefinition: true
    commentId: Overload:MatrixDotNet.Matrix`1.op_Multiply
  MatrixDotNet.Matrix`1.op_Division*:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1.op_Division*
        name: Division
        nameWithType: Matrix<T>.Division
        qualifiedName: MatrixDotNet.Matrix<T>.Division
      VB:
      - id: MatrixDotNet.Matrix`1.op_Division*
        name: Division
        nameWithType: Matrix(Of T).Division
        qualifiedName: MatrixDotNet.Matrix(Of T).Division
    isDefinition: true
    commentId: Overload:MatrixDotNet.Matrix`1.op_Division
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
  MatrixDotNet.Matrix`1.ToString*:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1.ToString*
        name: ToString
        nameWithType: Matrix<T>.ToString
        qualifiedName: MatrixDotNet.Matrix<T>.ToString
      VB:
      - id: MatrixDotNet.Matrix`1.ToString*
        name: ToString
        nameWithType: Matrix(Of T).ToString
        qualifiedName: MatrixDotNet.Matrix(Of T).ToString
    isDefinition: true
    commentId: Overload:MatrixDotNet.Matrix`1.ToString
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
  MatrixDotNet.Matrix`1.Clone*:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1.Clone*
        name: Clone
        nameWithType: Matrix<T>.Clone
        qualifiedName: MatrixDotNet.Matrix<T>.Clone
      VB:
      - id: MatrixDotNet.Matrix`1.Clone*
        name: Clone
        nameWithType: Matrix(Of T).Clone
        qualifiedName: MatrixDotNet.Matrix(Of T).Clone
    isDefinition: true
    commentId: Overload:MatrixDotNet.Matrix`1.Clone
  MatrixDotNet.Matrix`1.Equals*:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1.Equals*
        name: Equals
        nameWithType: Matrix<T>.Equals
        qualifiedName: MatrixDotNet.Matrix<T>.Equals
      VB:
      - id: MatrixDotNet.Matrix`1.Equals*
        name: Equals
        nameWithType: Matrix(Of T).Equals
        qualifiedName: MatrixDotNet.Matrix(Of T).Equals
    isDefinition: true
    commentId: Overload:MatrixDotNet.Matrix`1.Equals
  MatrixDotNet.Matrix`1.GetHashCode*:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1.GetHashCode*
        name: GetHashCode
        nameWithType: Matrix<T>.GetHashCode
        qualifiedName: MatrixDotNet.Matrix<T>.GetHashCode
      VB:
      - id: MatrixDotNet.Matrix`1.GetHashCode*
        name: GetHashCode
        nameWithType: Matrix(Of T).GetHashCode
        qualifiedName: MatrixDotNet.Matrix(Of T).GetHashCode
    isDefinition: true
    commentId: Overload:MatrixDotNet.Matrix`1.GetHashCode
  MatrixDotNet.Matrix`1.LNorm*:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1.LNorm*
        name: LNorm
        nameWithType: Matrix<T>.LNorm
        qualifiedName: MatrixDotNet.Matrix<T>.LNorm
      VB:
      - id: MatrixDotNet.Matrix`1.LNorm*
        name: LNorm
        nameWithType: Matrix(Of T).LNorm
        qualifiedName: MatrixDotNet.Matrix(Of T).LNorm
    isDefinition: true
    commentId: Overload:MatrixDotNet.Matrix`1.LNorm
  MatrixDotNet.Matrix`1.MNorm*:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1.MNorm*
        name: MNorm
        nameWithType: Matrix<T>.MNorm
        qualifiedName: MatrixDotNet.Matrix<T>.MNorm
      VB:
      - id: MatrixDotNet.Matrix`1.MNorm*
        name: MNorm
        nameWithType: Matrix(Of T).MNorm
        qualifiedName: MatrixDotNet.Matrix(Of T).MNorm
    isDefinition: true
    commentId: Overload:MatrixDotNet.Matrix`1.MNorm
  MatrixDotNet.Exceptions.MatrixDotNetException.#ctor*:
    name:
      CSharp:
      - id: MatrixDotNet.Exceptions.MatrixDotNetException.#ctor*
        name: MatrixDotNetException
        nameWithType: MatrixDotNetException.MatrixDotNetException
        qualifiedName: MatrixDotNet.Exceptions.MatrixDotNetException.MatrixDotNetException
      VB:
      - id: MatrixDotNet.Exceptions.MatrixDotNetException.#ctor*
        name: MatrixDotNetException
        nameWithType: MatrixDotNetException.MatrixDotNetException
        qualifiedName: MatrixDotNet.Exceptions.MatrixDotNetException.MatrixDotNetException
    isDefinition: true
    commentId: Overload:MatrixDotNet.Exceptions.MatrixDotNetException.#ctor
  MatrixDotNet.Exceptions.MatrixDotNetException.Message*:
    name:
      CSharp:
      - id: MatrixDotNet.Exceptions.MatrixDotNetException.Message*
        name: Message
        nameWithType: MatrixDotNetException.Message
        qualifiedName: MatrixDotNet.Exceptions.MatrixDotNetException.Message
      VB:
      - id: MatrixDotNet.Exceptions.MatrixDotNetException.Message*
        name: Message
        nameWithType: MatrixDotNetException.Message
        qualifiedName: MatrixDotNet.Exceptions.MatrixDotNetException.Message
    isDefinition: true
    commentId: Overload:MatrixDotNet.Exceptions.MatrixDotNetException.Message
  MatrixDotNet.Exceptions.MatrixDotNetException.Argument1*:
    name:
      CSharp:
      - id: MatrixDotNet.Exceptions.MatrixDotNetException.Argument1*
        name: Argument1
        nameWithType: MatrixDotNetException.Argument1
        qualifiedName: MatrixDotNet.Exceptions.MatrixDotNetException.Argument1
      VB:
      - id: MatrixDotNet.Exceptions.MatrixDotNetException.Argument1*
        name: Argument1
        nameWithType: MatrixDotNetException.Argument1
        qualifiedName: MatrixDotNet.Exceptions.MatrixDotNetException.Argument1
    isDefinition: true
    commentId: Overload:MatrixDotNet.Exceptions.MatrixDotNetException.Argument1
  MatrixDotNet.Exceptions.MatrixDotNetException.Argument2*:
    name:
      CSharp:
      - id: MatrixDotNet.Exceptions.MatrixDotNetException.Argument2*
        name: Argument2
        nameWithType: MatrixDotNetException.Argument2
        qualifiedName: MatrixDotNet.Exceptions.MatrixDotNetException.Argument2
      VB:
      - id: MatrixDotNet.Exceptions.MatrixDotNetException.Argument2*
        name: Argument2
        nameWithType: MatrixDotNetException.Argument2
        qualifiedName: MatrixDotNet.Exceptions.MatrixDotNetException.Argument2
    isDefinition: true
    commentId: Overload:MatrixDotNet.Exceptions.MatrixDotNetException.Argument2
  MatrixDotNet.Exceptions:
    name:
      CSharp:
      - name: MatrixDotNet.Exceptions
        nameWithType: MatrixDotNet.Exceptions
        qualifiedName: MatrixDotNet.Exceptions
      VB:
      - name: MatrixDotNet.Exceptions
        nameWithType: MatrixDotNet.Exceptions
        qualifiedName: MatrixDotNet.Exceptions
    isDefinition: true
    commentId: N:MatrixDotNet.Exceptions
  MatrixDotNet.Matrix{{T}}:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Matrix`1
    parent: MatrixDotNet
    commentId: T:MatrixDotNet.Matrix{``0}
  MatrixDotNet.Extensions.BitMatrixExtension.Max*:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.Max*
        name: Max
        nameWithType: BitMatrixExtension.Max
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.Max
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.Max*
        name: Max
        nameWithType: BitMatrixExtension.Max
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.Max
    isDefinition: true
    commentId: Overload:MatrixDotNet.Extensions.BitMatrixExtension.Max
  MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow*:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow*
        name: MaxByRow
        nameWithType: BitMatrixExtension.MaxByRow
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow*
        name: MaxByRow
        nameWithType: BitMatrixExtension.MaxByRow
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow
    isDefinition: true
    commentId: Overload:MatrixDotNet.Extensions.BitMatrixExtension.MaxByRow
  MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn*:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn*
        name: MaxByColumn
        nameWithType: BitMatrixExtension.MaxByColumn
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn*
        name: MaxByColumn
        nameWithType: BitMatrixExtension.MaxByColumn
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn
    isDefinition: true
    commentId: Overload:MatrixDotNet.Extensions.BitMatrixExtension.MaxByColumn
  MatrixDotNet.Matrix{System.Int32}:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Matrix`1
    parent: MatrixDotNet
    commentId: T:MatrixDotNet.Matrix{System.Int32}
  MatrixDotNet.Matrix{System.Byte}:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Matrix`1
    parent: MatrixDotNet
    commentId: T:MatrixDotNet.Matrix{System.Byte}
  System.Int64:
    name:
      CSharp:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
      VB:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
    isDefinition: true
  MatrixDotNet.Matrix{System.Int64}:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Matrix`1
    parent: MatrixDotNet
    commentId: T:MatrixDotNet.Matrix{System.Int64}
  MatrixDotNet.Matrix{System.Int16}:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int16
        name: Int16
        nameWithType: Int16
        qualifiedName: System.Int16
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int16
        name: Int16
        nameWithType: Int16
        qualifiedName: System.Int16
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Matrix`1
    parent: MatrixDotNet
    commentId: T:MatrixDotNet.Matrix{System.Int16}
  MatrixDotNet.Extensions.BitMatrixExtension.Min*:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.Min*
        name: Min
        nameWithType: BitMatrixExtension.Min
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.Min
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.Min*
        name: Min
        nameWithType: BitMatrixExtension.Min
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.Min
    isDefinition: true
    commentId: Overload:MatrixDotNet.Extensions.BitMatrixExtension.Min
  MatrixDotNet.Extensions.BitMatrixExtension.MinByRow*:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MinByRow*
        name: MinByRow
        nameWithType: BitMatrixExtension.MinByRow
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MinByRow
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MinByRow*
        name: MinByRow
        nameWithType: BitMatrixExtension.MinByRow
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MinByRow
    isDefinition: true
    commentId: Overload:MatrixDotNet.Extensions.BitMatrixExtension.MinByRow
  MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn*:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn*
        name: MinByColumn
        nameWithType: BitMatrixExtension.MinByColumn
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn*
        name: MinByColumn
        nameWithType: BitMatrixExtension.MinByColumn
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn
    isDefinition: true
    commentId: Overload:MatrixDotNet.Extensions.BitMatrixExtension.MinByColumn
  MatrixDotNet.Extensions.BitMatrixExtension.BitMin*:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.BitMin*
        name: BitMin
        nameWithType: BitMatrixExtension.BitMin
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.BitMin
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.BitMin*
        name: BitMin
        nameWithType: BitMatrixExtension.BitMin
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.BitMin
    isDefinition: true
    commentId: Overload:MatrixDotNet.Extensions.BitMatrixExtension.BitMin
  MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow*:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow*
        name: BitMinByRow
        nameWithType: BitMatrixExtension.BitMinByRow
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow*
        name: BitMinByRow
        nameWithType: BitMatrixExtension.BitMinByRow
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow
    isDefinition: true
    commentId: Overload:MatrixDotNet.Extensions.BitMatrixExtension.BitMinByRow
  MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn*:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn*
        name: BitMinByColumn
        nameWithType: BitMatrixExtension.BitMinByColumn
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn
      VB:
      - id: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn*
        name: BitMinByColumn
        nameWithType: BitMatrixExtension.BitMinByColumn
        qualifiedName: MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn
    isDefinition: true
    commentId: Overload:MatrixDotNet.Extensions.BitMatrixExtension.BitMinByColumn
  MatrixDotNet.Extensions.MatrixExtension.GetRow*:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.GetRow*
        name: GetRow
        nameWithType: MatrixExtension.GetRow
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.GetRow
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.GetRow*
        name: GetRow
        nameWithType: MatrixExtension.GetRow
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.GetRow
    isDefinition: true
    commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.GetRow
  MatrixDotNet.Extensions.MatrixExtension.GetColumn*:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.GetColumn*
        name: GetColumn
        nameWithType: MatrixExtension.GetColumn
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.GetColumn
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.GetColumn*
        name: GetColumn
        nameWithType: MatrixExtension.GetColumn
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.GetColumn
    isDefinition: true
    commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.GetColumn
  MatrixDotNet.Extensions.MatrixExtension.Transport*:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.Transport*
        name: Transport
        nameWithType: MatrixExtension.Transport
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.Transport
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.Transport*
        name: Transport
        nameWithType: MatrixExtension.Transport
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.Transport
    isDefinition: true
    commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.Transport
  MatrixDotNet.Extensions.MatrixExtension.ToPrimitive*:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive*
        name: ToPrimitive
        nameWithType: MatrixExtension.ToPrimitive
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive*
        name: ToPrimitive
        nameWithType: MatrixExtension.ToPrimitive
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive
    isDefinition: true
    commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.ToPrimitive
  MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet*:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet*
        name: ToMatrixDotNet
        nameWithType: MatrixExtension.ToMatrixDotNet
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet*
        name: ToMatrixDotNet
        nameWithType: MatrixExtension.ToMatrixDotNet
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet
    isDefinition: true
    commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet
  MatrixDotNet.Extensions.MatrixExtension.GetDeterminate*:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate*
        name: GetDeterminate
        nameWithType: MatrixExtension.GetDeterminate
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate*
        name: GetDeterminate
        nameWithType: MatrixExtension.GetDeterminate
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate
    isDefinition: true
    commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.GetDeterminate
  System.Double[]:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  MatrixDotNet.Extensions.MatrixExtension.KramerSolve*:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.KramerSolve*
        name: KramerSolve
        nameWithType: MatrixExtension.KramerSolve
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.KramerSolve
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.KramerSolve*
        name: KramerSolve
        nameWithType: MatrixExtension.KramerSolve
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.KramerSolve
    isDefinition: true
    commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.KramerSolve
  MatrixDotNet.Matrix{System.Double}:
    name:
      CSharp:
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: MatrixDotNet.Matrix`1
        name: Matrix
        nameWithType: Matrix
        qualifiedName: MatrixDotNet.Matrix
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: MatrixDotNet.Matrix`1
    parent: MatrixDotNet
    commentId: T:MatrixDotNet.Matrix{System.Double}
  MatrixDotNet.Extensions.MatrixExtension.Gause*:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.Gause*
        name: Gause
        nameWithType: MatrixExtension.Gause
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.Gause
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.Gause*
        name: Gause
        nameWithType: MatrixExtension.Gause
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.Gause
    isDefinition: true
    commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.Gause
  MatrixDotNet.Extensions.MatrixExtension.Pretty*:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.Pretty*
        name: Pretty
        nameWithType: MatrixExtension.Pretty
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.Pretty
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.Pretty*
        name: Pretty
        nameWithType: MatrixExtension.Pretty
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.Pretty
    isDefinition: true
    commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.Pretty
  MatrixDotNet.Extensions.MatrixExtension.BubbleSort*:
    name:
      CSharp:
      - id: MatrixDotNet.Extensions.MatrixExtension.BubbleSort*
        name: BubbleSort
        nameWithType: MatrixExtension.BubbleSort
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.BubbleSort
      VB:
      - id: MatrixDotNet.Extensions.MatrixExtension.BubbleSort*
        name: BubbleSort
        nameWithType: MatrixExtension.BubbleSort
        qualifiedName: MatrixDotNet.Extensions.MatrixExtension.BubbleSort
    isDefinition: true
    commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.BubbleSort
