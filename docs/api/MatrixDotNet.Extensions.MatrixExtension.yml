### YamlMime:ManagedReference
items:
- uid: MatrixDotNet.Extensions.MatrixExtension
  commentId: T:MatrixDotNet.Extensions.MatrixExtension
  id: MatrixExtension
  parent: MatrixDotNet.Extensions
  children:
  - MatrixDotNet.Extensions.MatrixExtension.BubbleSort``1(MatrixDotNet.Matrix{``0})
  - MatrixDotNet.Extensions.MatrixExtension.Gause(MatrixDotNet.Matrix{System.Double},System.Double[])
  - MatrixDotNet.Extensions.MatrixExtension.GetColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
  - MatrixDotNet.Extensions.MatrixExtension.GetDeterminate``1(MatrixDotNet.Matrix{``0})
  - MatrixDotNet.Extensions.MatrixExtension.GetRow``1(MatrixDotNet.Matrix{``0},System.Int32)
  - MatrixDotNet.Extensions.MatrixExtension.KramerSolve``1(MatrixDotNet.Matrix{``0},``0[])
  - MatrixDotNet.Extensions.MatrixExtension.Pretty``1(MatrixDotNet.Matrix{``0})
  - MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet``1(``0[0:,0:])
  - MatrixDotNet.Extensions.MatrixExtension.ToPrimitive``1(MatrixDotNet.Matrix{``0})
  - MatrixDotNet.Extensions.MatrixExtension.Transport``1(MatrixDotNet.Matrix{``0})
  langs:
  - csharp
  - vb
  name: MatrixExtension
  nameWithType: MatrixExtension
  fullName: MatrixDotNet.Extensions.MatrixExtension
  type: Class
  source:
    remote:
      path: src/MatrixDotNet/Extensions/MatrixSortExtension.cs
      branch: master
      repo: https://github.com/toor1245/MatrixDotNet.git
    id: MatrixExtension
    path: ../src/MatrixDotNet/Extensions/MatrixSortExtension.cs
    startLine: 2
  assemblies:
  - MatrixDotNet
  namespace: MatrixDotNet.Extensions
  summary: "\nRepresents Matrix extension.\n"
  example: []
  syntax:
    content: public static class MatrixExtension
    content.vb: Public Module MatrixExtension
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: MatrixDotNet.Extensions.MatrixExtension.GetRow``1(MatrixDotNet.Matrix{``0},System.Int32)
  commentId: M:MatrixDotNet.Extensions.MatrixExtension.GetRow``1(MatrixDotNet.Matrix{``0},System.Int32)
  id: GetRow``1(MatrixDotNet.Matrix{``0},System.Int32)
  isExtensionMethod: true
  parent: MatrixDotNet.Extensions.MatrixExtension
  langs:
  - csharp
  - vb
  name: GetRow<T>(Matrix<T>, Int32)
  nameWithType: MatrixExtension.GetRow<T>(Matrix<T>, Int32)
  fullName: MatrixDotNet.Extensions.MatrixExtension.GetRow<T>(MatrixDotNet.Matrix<T>, System.Int32)
  type: Method
  source:
    remote:
      path: src/MatrixDotNet/Extensions/MatrixExtension.cs
      branch: master
      repo: https://github.com/toor1245/MatrixDotNet.git
    id: GetRow
    path: ../src/MatrixDotNet/Extensions/MatrixExtension.cs
    startLine: 19
  assemblies:
  - MatrixDotNet
  namespace: MatrixDotNet.Extensions
  summary: "\nGets row array of matrix by row index.\n"
  example: []
  syntax:
    content: >-
      public static T[] GetRow<T>(this Matrix<T> matrix, int index)

          where T : struct
    parameters:
    - id: matrix
      type: MatrixDotNet.Matrix{{T}}
      description: ''
    - id: index
      type: System.Int32
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}[]'
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRow(Of T As Structure)(matrix As Matrix(Of T), index As Integer) As T()
  overload: MatrixDotNet.Extensions.MatrixExtension.GetRow*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
  nameWithType.vb: MatrixExtension.GetRow(Of T)(Matrix(Of T), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MatrixDotNet.Extensions.MatrixExtension.GetRow(Of T)(MatrixDotNet.Matrix(Of T), System.Int32)
  name.vb: GetRow(Of T)(Matrix(Of T), Int32)
- uid: MatrixDotNet.Extensions.MatrixExtension.GetColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
  commentId: M:MatrixDotNet.Extensions.MatrixExtension.GetColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
  id: GetColumn``1(MatrixDotNet.Matrix{``0},System.Int32)
  isExtensionMethod: true
  parent: MatrixDotNet.Extensions.MatrixExtension
  langs:
  - csharp
  - vb
  name: GetColumn<T>(Matrix<T>, Int32)
  nameWithType: MatrixExtension.GetColumn<T>(Matrix<T>, Int32)
  fullName: MatrixDotNet.Extensions.MatrixExtension.GetColumn<T>(MatrixDotNet.Matrix<T>, System.Int32)
  type: Method
  source:
    remote:
      path: src/MatrixDotNet/Extensions/MatrixExtension.cs
      branch: master
      repo: https://github.com/toor1245/MatrixDotNet.git
    id: GetColumn
    path: ../src/MatrixDotNet/Extensions/MatrixExtension.cs
    startLine: 46
  assemblies:
  - MatrixDotNet
  namespace: MatrixDotNet.Extensions
  summary: "\nGets column array of matrix by columns index.\n"
  example: []
  syntax:
    content: >-
      public static T[] GetColumn<T>(this Matrix<T> matrix, int index)

          where T : struct
    parameters:
    - id: matrix
      type: MatrixDotNet.Matrix{{T}}
      description: matrix.
    - id: index
      type: System.Int32
      description: index.
    typeParameters:
    - id: T
      description: unmanaged type.
    return:
      type: '{T}[]'
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetColumn(Of T As Structure)(matrix As Matrix(Of T), index As Integer) As T()
  overload: MatrixDotNet.Extensions.MatrixExtension.GetColumn*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
  nameWithType.vb: MatrixExtension.GetColumn(Of T)(Matrix(Of T), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MatrixDotNet.Extensions.MatrixExtension.GetColumn(Of T)(MatrixDotNet.Matrix(Of T), System.Int32)
  name.vb: GetColumn(Of T)(Matrix(Of T), Int32)
- uid: MatrixDotNet.Extensions.MatrixExtension.Transport``1(MatrixDotNet.Matrix{``0})
  commentId: M:MatrixDotNet.Extensions.MatrixExtension.Transport``1(MatrixDotNet.Matrix{``0})
  id: Transport``1(MatrixDotNet.Matrix{``0})
  isExtensionMethod: true
  parent: MatrixDotNet.Extensions.MatrixExtension
  langs:
  - csharp
  - vb
  name: Transport<T>(Matrix<T>)
  nameWithType: MatrixExtension.Transport<T>(Matrix<T>)
  fullName: MatrixDotNet.Extensions.MatrixExtension.Transport<T>(MatrixDotNet.Matrix<T>)
  type: Method
  source:
    remote:
      path: src/MatrixDotNet/Extensions/MatrixExtension.cs
      branch: master
      repo: https://github.com/toor1245/MatrixDotNet.git
    id: Transport
    path: ../src/MatrixDotNet/Extensions/MatrixExtension.cs
    startLine: 71
  assemblies:
  - MatrixDotNet
  namespace: MatrixDotNet.Extensions
  summary: "\nGets transport matrix.\n"
  example: []
  syntax:
    content: >-
      public static Matrix<T> Transport<T>(this Matrix<T> matrix)

          where T : struct
    parameters:
    - id: matrix
      type: MatrixDotNet.Matrix{{T}}
      description: the matrix.
    typeParameters:
    - id: T
      description: unmanaged type.
    return:
      type: MatrixDotNet.Matrix{{T}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Transport(Of T As Structure)(matrix As Matrix(Of T)) As Matrix(Of T)
  overload: MatrixDotNet.Extensions.MatrixExtension.Transport*
  nameWithType.vb: MatrixExtension.Transport(Of T)(Matrix(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MatrixDotNet.Extensions.MatrixExtension.Transport(Of T)(MatrixDotNet.Matrix(Of T))
  name.vb: Transport(Of T)(Matrix(Of T))
- uid: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive``1(MatrixDotNet.Matrix{``0})
  commentId: M:MatrixDotNet.Extensions.MatrixExtension.ToPrimitive``1(MatrixDotNet.Matrix{``0})
  id: ToPrimitive``1(MatrixDotNet.Matrix{``0})
  isExtensionMethod: true
  parent: MatrixDotNet.Extensions.MatrixExtension
  langs:
  - csharp
  - vb
  name: ToPrimitive<T>(Matrix<T>)
  nameWithType: MatrixExtension.ToPrimitive<T>(Matrix<T>)
  fullName: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive<T>(MatrixDotNet.Matrix<T>)
  type: Method
  source:
    remote:
      path: src/MatrixDotNet/Extensions/MatrixExtension.cs
      branch: master
      repo: https://github.com/toor1245/MatrixDotNet.git
    id: ToPrimitive
    path: ../src/MatrixDotNet/Extensions/MatrixExtension.cs
    startLine: 93
  assemblies:
  - MatrixDotNet
  namespace: MatrixDotNet.Extensions
  summary: "\nConvert matrix to primitive matrix.\n"
  example: []
  syntax:
    content: >-
      public static T[, ] ToPrimitive<T>(this Matrix<T> matrix)

          where T : struct
    parameters:
    - id: matrix
      type: MatrixDotNet.Matrix{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}[,]'
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToPrimitive(Of T As Structure)(matrix As Matrix(Of T)) As T(,)
  overload: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive*
  nameWithType.vb: MatrixExtension.ToPrimitive(Of T)(Matrix(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive(Of T)(MatrixDotNet.Matrix(Of T))
  name.vb: ToPrimitive(Of T)(Matrix(Of T))
- uid: MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet``1(``0[0:,0:])
  commentId: M:MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet``1(``0[0:,0:])
  id: ToMatrixDotNet``1(``0[0:,0:])
  isExtensionMethod: true
  parent: MatrixDotNet.Extensions.MatrixExtension
  langs:
  - csharp
  - vb
  name: ToMatrixDotNet<T>(T[,])
  nameWithType: MatrixExtension.ToMatrixDotNet<T>(T[,])
  fullName: MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet<T>(T[,])
  type: Method
  source:
    remote:
      path: src/MatrixDotNet/Extensions/MatrixExtension.cs
      branch: master
      repo: https://github.com/toor1245/MatrixDotNet.git
    id: ToMatrixDotNet
    path: ../src/MatrixDotNet/Extensions/MatrixExtension.cs
    startLine: 114
  assemblies:
  - MatrixDotNet
  namespace: MatrixDotNet.Extensions
  summary: "\nConvert primitive matrix to <xref href=\"MatrixDotNet.Matrix%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public static Matrix<T> ToMatrixDotNet<T>(this T[, ] matrix)

          where T : struct
    parameters:
    - id: matrix
      type: '{T}[,]'
      description: primitive matrix.
    typeParameters:
    - id: T
      description: unmanaged type
    return:
      type: MatrixDotNet.Matrix{{T}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToMatrixDotNet(Of T As Structure)(matrix As T(,)) As Matrix(Of T)
  overload: MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet*
  nameWithType.vb: MatrixExtension.ToMatrixDotNet(Of T)(T(,))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet(Of T)(T(,))
  name.vb: ToMatrixDotNet(Of T)(T(,))
- uid: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate``1(MatrixDotNet.Matrix{``0})
  commentId: M:MatrixDotNet.Extensions.MatrixExtension.GetDeterminate``1(MatrixDotNet.Matrix{``0})
  id: GetDeterminate``1(MatrixDotNet.Matrix{``0})
  isExtensionMethod: true
  parent: MatrixDotNet.Extensions.MatrixExtension
  langs:
  - csharp
  - vb
  name: GetDeterminate<T>(Matrix<T>)
  nameWithType: MatrixExtension.GetDeterminate<T>(Matrix<T>)
  fullName: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate<T>(MatrixDotNet.Matrix<T>)
  type: Method
  source:
    remote:
      path: src/MatrixDotNet/Extensions/MatrixExtension.cs
      branch: master
      repo: https://github.com/toor1245/MatrixDotNet.git
    id: GetDeterminate
    path: ../src/MatrixDotNet/Extensions/MatrixExtension.cs
    startLine: 161
  assemblies:
  - MatrixDotNet
  namespace: MatrixDotNet.Extensions
  summary: "\nGets determinant of matrix.\n"
  example: []
  syntax:
    content: >-
      public static double GetDeterminate<T>(this Matrix<T> matrix)

          where T : struct
    parameters:
    - id: matrix
      type: MatrixDotNet.Matrix{{T}}
      description: matrix.
    typeParameters:
    - id: T
      description: unmanaged type
    return:
      type: System.Double
      description: double.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDeterminate(Of T As Structure)(matrix As Matrix(Of T)) As Double
  overload: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate*
  exceptions:
  - type: MatrixDotNet.Exceptions.MatrixDotNetException
    commentId: T:MatrixDotNet.Exceptions.MatrixDotNetException
  nameWithType.vb: MatrixExtension.GetDeterminate(Of T)(Matrix(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate(Of T)(MatrixDotNet.Matrix(Of T))
  name.vb: GetDeterminate(Of T)(Matrix(Of T))
- uid: MatrixDotNet.Extensions.MatrixExtension.KramerSolve``1(MatrixDotNet.Matrix{``0},``0[])
  commentId: M:MatrixDotNet.Extensions.MatrixExtension.KramerSolve``1(MatrixDotNet.Matrix{``0},``0[])
  id: KramerSolve``1(MatrixDotNet.Matrix{``0},``0[])
  isExtensionMethod: true
  parent: MatrixDotNet.Extensions.MatrixExtension
  langs:
  - csharp
  - vb
  name: KramerSolve<T>(Matrix<T>, T[])
  nameWithType: MatrixExtension.KramerSolve<T>(Matrix<T>, T[])
  fullName: MatrixDotNet.Extensions.MatrixExtension.KramerSolve<T>(MatrixDotNet.Matrix<T>, T[])
  type: Method
  source:
    remote:
      path: src/MatrixDotNet/Extensions/MatrixExtension.cs
      branch: master
      repo: https://github.com/toor1245/MatrixDotNet.git
    id: KramerSolve
    path: ../src/MatrixDotNet/Extensions/MatrixExtension.cs
    startLine: 195
  assemblies:
  - MatrixDotNet
  namespace: MatrixDotNet.Extensions
  summary: "\nGets determinant matrix by Kramer algorithm.\n"
  example: []
  syntax:
    content: >-
      public static double[] KramerSolve<T>(this Matrix<T> matrix, T[] arr)

          where T : struct
    parameters:
    - id: matrix
      type: MatrixDotNet.Matrix{{T}}
      description: matrix.
    - id: arr
      type: '{T}[]'
      description: array.
    typeParameters:
    - id: T
      description: unmanaged type.
    return:
      type: System.Double[]
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function KramerSolve(Of T As Structure)(matrix As Matrix(Of T), arr As T()) As Double()
  overload: MatrixDotNet.Extensions.MatrixExtension.KramerSolve*
  exceptions:
  - type: MatrixDotNet.Exceptions.MatrixDotNetException
    commentId: T:MatrixDotNet.Exceptions.MatrixDotNetException
  nameWithType.vb: MatrixExtension.KramerSolve(Of T)(Matrix(Of T), T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MatrixDotNet.Extensions.MatrixExtension.KramerSolve(Of T)(MatrixDotNet.Matrix(Of T), T())
  name.vb: KramerSolve(Of T)(Matrix(Of T), T())
- uid: MatrixDotNet.Extensions.MatrixExtension.Gause(MatrixDotNet.Matrix{System.Double},System.Double[])
  commentId: M:MatrixDotNet.Extensions.MatrixExtension.Gause(MatrixDotNet.Matrix{System.Double},System.Double[])
  id: Gause(MatrixDotNet.Matrix{System.Double},System.Double[])
  isExtensionMethod: true
  parent: MatrixDotNet.Extensions.MatrixExtension
  langs:
  - csharp
  - vb
  name: Gause(Matrix<Double>, Double[])
  nameWithType: MatrixExtension.Gause(Matrix<Double>, Double[])
  fullName: MatrixDotNet.Extensions.MatrixExtension.Gause(MatrixDotNet.Matrix<System.Double>, System.Double[])
  type: Method
  source:
    remote:
      path: src/MatrixDotNet/Extensions/MatrixExtension.cs
      branch: master
      repo: https://github.com/toor1245/MatrixDotNet.git
    id: Gause
    path: ../src/MatrixDotNet/Extensions/MatrixExtension.cs
    startLine: 223
  assemblies:
  - MatrixDotNet
  namespace: MatrixDotNet.Extensions
  summary: "\nGets determinant matrix by Gause algorithm.\n"
  example: []
  syntax:
    content: public static double[] Gause(this Matrix<double> A1, double[] b1)
    parameters:
    - id: A1
      type: MatrixDotNet.Matrix{System.Double}
      description: ''
    - id: b1
      type: System.Double[]
      description: ''
    return:
      type: System.Double[]
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Gause(A1 As Matrix(Of Double), b1 As Double()) As Double()
  overload: MatrixDotNet.Extensions.MatrixExtension.Gause*
  nameWithType.vb: MatrixExtension.Gause(Matrix(Of Double), Double())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MatrixDotNet.Extensions.MatrixExtension.Gause(MatrixDotNet.Matrix(Of System.Double), System.Double())
  name.vb: Gause(Matrix(Of Double), Double())
- uid: MatrixDotNet.Extensions.MatrixExtension.Pretty``1(MatrixDotNet.Matrix{``0})
  commentId: M:MatrixDotNet.Extensions.MatrixExtension.Pretty``1(MatrixDotNet.Matrix{``0})
  id: Pretty``1(MatrixDotNet.Matrix{``0})
  isExtensionMethod: true
  parent: MatrixDotNet.Extensions.MatrixExtension
  langs:
  - csharp
  - vb
  name: Pretty<T>(Matrix<T>)
  nameWithType: MatrixExtension.Pretty<T>(Matrix<T>)
  fullName: MatrixDotNet.Extensions.MatrixExtension.Pretty<T>(MatrixDotNet.Matrix<T>)
  type: Method
  source:
    remote:
      path: src/MatrixDotNet/Extensions/MatrixOutputExtension.cs
      branch: master
      repo: https://github.com/toor1245/MatrixDotNet.git
    id: Pretty
    path: ../src/MatrixDotNet/Extensions/MatrixOutputExtension.cs
    startLine: 7
  assemblies:
  - MatrixDotNet
  namespace: MatrixDotNet.Extensions
  syntax:
    content: >-
      public static string Pretty<T>(this Matrix<T> matrix)

          where T : struct
    parameters:
    - id: matrix
      type: MatrixDotNet.Matrix{{T}}
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Pretty(Of T As Structure)(matrix As Matrix(Of T)) As String
  overload: MatrixDotNet.Extensions.MatrixExtension.Pretty*
  nameWithType.vb: MatrixExtension.Pretty(Of T)(Matrix(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MatrixDotNet.Extensions.MatrixExtension.Pretty(Of T)(MatrixDotNet.Matrix(Of T))
  name.vb: Pretty(Of T)(Matrix(Of T))
- uid: MatrixDotNet.Extensions.MatrixExtension.BubbleSort``1(MatrixDotNet.Matrix{``0})
  commentId: M:MatrixDotNet.Extensions.MatrixExtension.BubbleSort``1(MatrixDotNet.Matrix{``0})
  id: BubbleSort``1(MatrixDotNet.Matrix{``0})
  isExtensionMethod: true
  parent: MatrixDotNet.Extensions.MatrixExtension
  langs:
  - csharp
  - vb
  name: BubbleSort<T>(Matrix<T>)
  nameWithType: MatrixExtension.BubbleSort<T>(Matrix<T>)
  fullName: MatrixDotNet.Extensions.MatrixExtension.BubbleSort<T>(MatrixDotNet.Matrix<T>)
  type: Method
  source:
    remote:
      path: src/MatrixDotNet/Extensions/MatrixSortExtension.cs
      branch: master
      repo: https://github.com/toor1245/MatrixDotNet.git
    id: BubbleSort
    path: ../src/MatrixDotNet/Extensions/MatrixSortExtension.cs
    startLine: 4
  assemblies:
  - MatrixDotNet
  namespace: MatrixDotNet.Extensions
  syntax:
    content: >-
      public static void BubbleSort<T>(this Matrix<T> matrix)

          where T : struct
    parameters:
    - id: matrix
      type: MatrixDotNet.Matrix{{T}}
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub BubbleSort(Of T As Structure)(matrix As Matrix(Of T))
  overload: MatrixDotNet.Extensions.MatrixExtension.BubbleSort*
  nameWithType.vb: MatrixExtension.BubbleSort(Of T)(Matrix(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MatrixDotNet.Extensions.MatrixExtension.BubbleSort(Of T)(MatrixDotNet.Matrix(Of T))
  name.vb: BubbleSort(Of T)(Matrix(Of T))
references:
- uid: MatrixDotNet.Extensions
  commentId: N:MatrixDotNet.Extensions
  name: MatrixDotNet.Extensions
  nameWithType: MatrixDotNet.Extensions
  fullName: MatrixDotNet.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.NullReferenceException
  commentId: T:System.NullReferenceException
  isExternal: true
- uid: System.IndexOutOfRangeException
  commentId: T:System.IndexOutOfRangeException
  isExternal: true
- uid: MatrixDotNet.Extensions.MatrixExtension.GetRow*
  commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.GetRow
  name: GetRow
  nameWithType: MatrixExtension.GetRow
  fullName: MatrixDotNet.Extensions.MatrixExtension.GetRow
- uid: MatrixDotNet.Matrix{{T}}
  commentId: T:MatrixDotNet.Matrix{``0}
  parent: MatrixDotNet
  definition: MatrixDotNet.Matrix`1
  name: Matrix<T>
  nameWithType: Matrix<T>
  fullName: MatrixDotNet.Matrix<T>
  nameWithType.vb: Matrix(Of T)
  fullName.vb: MatrixDotNet.Matrix(Of T)
  name.vb: Matrix(Of T)
  spec.csharp:
  - uid: MatrixDotNet.Matrix`1
    name: Matrix
    nameWithType: Matrix
    fullName: MatrixDotNet.Matrix
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MatrixDotNet.Matrix`1
    name: Matrix
    nameWithType: Matrix
    fullName: MatrixDotNet.Matrix
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: MatrixDotNet.Matrix`1
  commentId: T:MatrixDotNet.Matrix`1
  parent: MatrixDotNet
  name: Matrix<T>
  nameWithType: Matrix<T>
  fullName: MatrixDotNet.Matrix<T>
  nameWithType.vb: Matrix(Of T)
  fullName.vb: MatrixDotNet.Matrix(Of T)
  name.vb: Matrix(Of T)
  spec.csharp:
  - uid: MatrixDotNet.Matrix`1
    name: Matrix
    nameWithType: Matrix
    fullName: MatrixDotNet.Matrix
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MatrixDotNet.Matrix`1
    name: Matrix
    nameWithType: Matrix
    fullName: MatrixDotNet.Matrix
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MatrixDotNet
  commentId: N:MatrixDotNet
  name: MatrixDotNet
  nameWithType: MatrixDotNet
  fullName: MatrixDotNet
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: MatrixDotNet.Extensions.MatrixExtension.GetColumn*
  commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.GetColumn
  name: GetColumn
  nameWithType: MatrixExtension.GetColumn
  fullName: MatrixDotNet.Extensions.MatrixExtension.GetColumn
- uid: MatrixDotNet.Extensions.MatrixExtension.Transport*
  commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.Transport
  name: Transport
  nameWithType: MatrixExtension.Transport
  fullName: MatrixDotNet.Extensions.MatrixExtension.Transport
- uid: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive*
  commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.ToPrimitive
  name: ToPrimitive
  nameWithType: MatrixExtension.ToPrimitive
  fullName: MatrixDotNet.Extensions.MatrixExtension.ToPrimitive
- uid: '{T}[,]'
  isExternal: true
  name: T[,]
  nameWithType: T[,]
  fullName: T[,]
  nameWithType.vb: T(,)
  fullName.vb: T(,)
  name.vb: T(,)
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[,]'
    nameWithType: '[,]'
    fullName: '[,]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: (,)
    nameWithType: (,)
    fullName: (,)
- uid: MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet*
  commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet
  name: ToMatrixDotNet
  nameWithType: MatrixExtension.ToMatrixDotNet
  fullName: MatrixDotNet.Extensions.MatrixExtension.ToMatrixDotNet
- uid: MatrixDotNet.Exceptions.MatrixDotNetException
  commentId: T:MatrixDotNet.Exceptions.MatrixDotNetException
  name: MatrixDotNetException
  nameWithType: MatrixDotNetException
  fullName: MatrixDotNet.Exceptions.MatrixDotNetException
- uid: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate*
  commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.GetDeterminate
  name: GetDeterminate
  nameWithType: MatrixExtension.GetDeterminate
  fullName: MatrixDotNet.Extensions.MatrixExtension.GetDeterminate
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: MatrixDotNet.Extensions.MatrixExtension.KramerSolve*
  commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.KramerSolve
  name: KramerSolve
  nameWithType: MatrixExtension.KramerSolve
  fullName: MatrixDotNet.Extensions.MatrixExtension.KramerSolve
- uid: System.Double[]
  isExternal: true
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullName.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: MatrixDotNet.Extensions.MatrixExtension.Gause*
  commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.Gause
  name: Gause
  nameWithType: MatrixExtension.Gause
  fullName: MatrixDotNet.Extensions.MatrixExtension.Gause
- uid: MatrixDotNet.Matrix{System.Double}
  commentId: T:MatrixDotNet.Matrix{System.Double}
  parent: MatrixDotNet
  definition: MatrixDotNet.Matrix`1
  name: Matrix<Double>
  nameWithType: Matrix<Double>
  fullName: MatrixDotNet.Matrix<System.Double>
  nameWithType.vb: Matrix(Of Double)
  fullName.vb: MatrixDotNet.Matrix(Of System.Double)
  name.vb: Matrix(Of Double)
  spec.csharp:
  - uid: MatrixDotNet.Matrix`1
    name: Matrix
    nameWithType: Matrix
    fullName: MatrixDotNet.Matrix
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MatrixDotNet.Matrix`1
    name: Matrix
    nameWithType: Matrix
    fullName: MatrixDotNet.Matrix
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MatrixDotNet.Extensions.MatrixExtension.Pretty*
  commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.Pretty
  name: Pretty
  nameWithType: MatrixExtension.Pretty
  fullName: MatrixDotNet.Extensions.MatrixExtension.Pretty
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MatrixDotNet.Extensions.MatrixExtension.BubbleSort*
  commentId: Overload:MatrixDotNet.Extensions.MatrixExtension.BubbleSort
  name: BubbleSort
  nameWithType: MatrixExtension.BubbleSort
  fullName: MatrixDotNet.Extensions.MatrixExtension.BubbleSort
