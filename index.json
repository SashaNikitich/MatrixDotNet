{
  "api/MatrixDotNet.Extensions.Core.Extensions.Conversion.html": {
    "href": "api/MatrixDotNet.Extensions.Core.Extensions.Conversion.html",
    "title": "Namespace MatrixDotNet.Extensions.Core.Extensions.Conversion | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Extensions.Core.Extensions.Conversion Structs Converter Represents conversion operations for matrix with fixed buffer size."
  },
  "api/MatrixDotNet.Extensions.Statistics.EmpiricalSample.html": {
    "href": "api/MatrixDotNet.Extensions.Statistics.EmpiricalSample.html",
    "title": "Enum EmpiricalSample | MatrixDotNet",
    "keywords": "Enum EmpiricalSample Namespace : MatrixDotNet.Extensions.Statistics Assembly : MatrixDotNet.dll Syntax public enum EmpiricalSample : int Fields Name Description NotUniform Uniform"
  },
  "api/MatrixDotNet.Extensions.Core.Simd.html": {
    "href": "api/MatrixDotNet.Extensions.Core.Simd.html",
    "title": "Namespace MatrixDotNet.Extensions.Core.Simd | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Extensions.Core.Simd Classes Simd"
  },
  "api/MatrixDotNet.Extensions.Core.Extensions.Sorting.ISorting.html": {
    "href": "api/MatrixDotNet.Extensions.Core.Extensions.Sorting.ISorting.html",
    "title": "Interface ISorting | MatrixDotNet",
    "keywords": "Interface ISorting Represents logic whole sorting algorithms. Namespace : MatrixDotNet.Extensions.Core.Extensions.Sorting Assembly : MatrixDotNet.NetCore.dll Syntax public interface ISorting Methods | Improve this Doc View Source Sort(ref MatrixAsFixedBuffer) Sorts whole matrix. Declaration void Sort(ref MatrixAsFixedBuffer matrix) Parameters Type Name Description MatrixAsFixedBuffer matrix the matrix. | Improve this Doc View Source SortByColumns(ref MatrixAsFixedBuffer) Sorts matrix by column. Declaration void SortByColumns(ref MatrixAsFixedBuffer matrix) Parameters Type Name Description MatrixAsFixedBuffer matrix the matrix. | Improve this Doc View Source SortByRows(ref MatrixAsFixedBuffer) Sorts matrix by rows. Declaration void SortByRows(ref MatrixAsFixedBuffer matrix) Parameters Type Name Description MatrixAsFixedBuffer matrix the matrix. | Improve this Doc View Source SortMainDiagonal(ref MatrixAsFixedBuffer) Sorts main diagonal of matrix. Declaration void SortMainDiagonal(ref MatrixAsFixedBuffer matrix) Parameters Type Name Description MatrixAsFixedBuffer matrix the matrix. | Improve this Doc View Source SortMinorDiagonal(ref MatrixAsFixedBuffer) Sorts minor diagonal of matrix. Declaration void SortMinorDiagonal(ref MatrixAsFixedBuffer matrix) Parameters Type Name Description MatrixAsFixedBuffer matrix the matrix."
  },
  "api/MatrixDotNet.Extensions.Determinants.Determinant.html": {
    "href": "api/MatrixDotNet.Extensions.Determinants.Determinant.html",
    "title": "Class Determinant | MatrixDotNet",
    "keywords": "Class Determinant Inheritance System.Object Determinant Namespace : MatrixDotNet.Extensions.Determinants Assembly : MatrixDotNet.dll Syntax public static class Determinant : object Methods | Improve this Doc View Source GetCholeskyDeterminant(Matrix<Decimal>) Gets determinant with happen Cholesky algorithm which decompose matrix A = L * L(transpose). Declaration public static decimal GetCholeskyDeterminant(this Matrix<decimal> matrix) Parameters Type Name Description Matrix < System.Decimal > matrix the matrix. Returns Type Description System.Decimal determinant. | Improve this Doc View Source GetCholeskyDeterminant(Matrix<Double>) Gets determinant with happen Cholesky algorithm which decompose matrix A = L * L(transpose). Declaration public static double GetCholeskyDeterminant(this Matrix<double> matrix) Parameters Type Name Description Matrix < System.Double > matrix the matrix. Returns Type Description System.Double determinant. | Improve this Doc View Source GetCholeskyDeterminant(Matrix<Single>) Gets determinant with happen Cholesky algorithm which decompose matrix A = L * L(transpose). Declaration public static float GetCholeskyDeterminant(this Matrix<float> matrix) Parameters Type Name Description Matrix < System.Single > matrix the matrix. Returns Type Description System.Single determinant. | Improve this Doc View Source GetCornerMinorDeterminant<T>(Matrix<T>, Int32) Gets determinant of corner Minor`s matrix Declaration public static T GetCornerMinorDeterminant<T>(this Matrix<T> matrix, int row) where T : struct Parameters Type Name Description Matrix <T> matrix matrix System.Int32 row index Returns Type Description T determinant of corner Minor Type Parameters Name Description T unmanaged type | Improve this Doc View Source GetDeterminant<T>(Matrix<T>) Gets determinant of matrix. Declaration public static T GetDeterminant<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix matrix. Returns Type Description T double. Type Parameters Name Description T unmanaged type Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source GetDoubleDeterminant<T>(Matrix<T>) Gets determinant of matrix. Declaration public static double GetDoubleDeterminant<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix matrix. Returns Type Description System.Double double. Type Parameters Name Description T unmanaged type Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source GetLowerUpperDeterminant<T>(Matrix<T>) Gets LU determinant. Declaration public static T GetLowerUpperDeterminant<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description T Determinant Type Parameters Name Description T unmanaged type. | Improve this Doc View Source GetLowerUpperPermutationDeterminant(Matrix<Double>) Gets LUP determinant. Declaration public static double GetLowerUpperPermutationDeterminant(this Matrix<double> matrix) Parameters Type Name Description Matrix < System.Double > matrix the matrix. Returns Type Description System.Double | Improve this Doc View Source GetLupDeterminantUnsafe(Matrix<Double>) Finds determinant of matrix with happen LUP. Declaration public static double GetLupDeterminantUnsafe(this Matrix<double> matrix) Parameters Type Name Description Matrix < System.Double > matrix the matrix Returns Type Description System.Double the determinant of matrix. | Improve this Doc View Source GetLupDeterminantUnsafe(Matrix<Single>) Finds determinant of matrix with happen LUP. Declaration public static float GetLupDeterminantUnsafe(this Matrix<float> matrix) Parameters Type Name Description Matrix < System.Single > matrix the matrix Returns Type Description System.Single the determinant of matrix. | Improve this Doc View Source GetMinorDeterminant(Matrix<Decimal>) Gets determinant of matrix. Declaration public static decimal GetMinorDeterminant(this Matrix<decimal> matrix) Parameters Type Name Description Matrix < System.Decimal > matrix matrix. Returns Type Description System.Decimal double. Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source GetMinorDeterminant(Matrix<Double>) Gets determinant of matrix. Declaration public static double GetMinorDeterminant(this Matrix<double> matrix) Parameters Type Name Description Matrix < System.Double > matrix matrix. Returns Type Description System.Double double. Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source GetMinorDeterminant(Matrix<Int32>) Gets determinant of matrix. Declaration public static int GetMinorDeterminant(this Matrix<int> matrix) Parameters Type Name Description Matrix < System.Int32 > matrix matrix. Returns Type Description System.Int32 double. Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source GetMinorDeterminant(Matrix<Int64>) Gets determinant of matrix. Declaration public static long GetMinorDeterminant(this Matrix<long> matrix) Parameters Type Name Description Matrix < System.Int64 > matrix matrix. Returns Type Description System.Int64 double. Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source GetMinorDeterminant(Matrix<Single>) Gets determinant of matrix. Declaration public static float GetMinorDeterminant(this Matrix<float> matrix) Parameters Type Name Description Matrix < System.Single > matrix matrix. Returns Type Description System.Single double. Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source GetShurDeterminant(Matrix<Decimal>) Gets determinant by Shur`s complement. Declaration public static decimal GetShurDeterminant(this Matrix<decimal> matrix) Parameters Type Name Description Matrix < System.Decimal > matrix the matrix. Returns Type Description System.Decimal Determinant Exceptions Type Condition MatrixDotNetException The matrix is not prime. | Improve this Doc View Source GetShurDeterminant(Matrix<Double>) Gets determinant by Shur`s complement. Declaration public static double GetShurDeterminant(this Matrix<double> matrix) Parameters Type Name Description Matrix < System.Double > matrix the matrix. Returns Type Description System.Double Determinant Exceptions Type Condition MatrixDotNetException The matrix is not prime. | Improve this Doc View Source GetShurDeterminant(Matrix<Single>) Gets determinant by Shur`s complement. Declaration public static float GetShurDeterminant(this Matrix<float> matrix) Parameters Type Name Description Matrix < System.Single > matrix the matrix. Returns Type Description System.Single Determinant Exceptions Type Condition MatrixDotNetException The matrix is not prime."
  },
  "api/MatrixDotNet.Extensions.Core.Simd.Simd.html": {
    "href": "api/MatrixDotNet.Extensions.Core.Simd.Simd.html",
    "title": "Class Simd | MatrixDotNet",
    "keywords": "Class Simd Inheritance System.Object Simd Namespace : MatrixDotNet.Extensions.Core.Simd Assembly : MatrixDotNet.NetCore.dll Syntax public static class Simd : object Methods | Improve this Doc View Source Add(Matrix<Double>, Matrix<Double>) Declaration public static Matrix<double> Add(Matrix<double> matrixA, Matrix<double> matrixB) Parameters Type Name Description Matrix < System.Double > matrixA Matrix < System.Double > matrixB Returns Type Description Matrix < System.Double > | Improve this Doc View Source Add(Matrix<Int32>, Matrix<Int32>) Declaration public static Matrix<int> Add(Matrix<int> matrixA, Matrix<int> matrixB) Parameters Type Name Description Matrix < System.Int32 > matrixA Matrix < System.Int32 > matrixB Returns Type Description Matrix < System.Int32 > | Improve this Doc View Source Add(Matrix<Int64>, Matrix<Int64>) Declaration public static Matrix<long> Add(Matrix<long> matrixA, Matrix<long> matrixB) Parameters Type Name Description Matrix < System.Int64 > matrixA Matrix < System.Int64 > matrixB Returns Type Description Matrix < System.Int64 > | Improve this Doc View Source Add(Matrix<Single>, Matrix<Single>) Declaration public static Matrix<float> Add(Matrix<float> matrixA, Matrix<float> matrixB) Parameters Type Name Description Matrix < System.Single > matrixA Matrix < System.Single > matrixB Returns Type Description Matrix < System.Single > | Improve this Doc View Source Equals(Matrix<Double>, Matrix<Double>) Declaration public static bool Equals(Matrix<double> a, Matrix<double> b) Parameters Type Name Description Matrix < System.Double > a Matrix < System.Double > b Returns Type Description System.Boolean | Improve this Doc View Source Equals(Matrix<Int32>, Matrix<Int32>) Declaration public static bool Equals(Matrix<int> a, Matrix<int> b) Parameters Type Name Description Matrix < System.Int32 > a Matrix < System.Int32 > b Returns Type Description System.Boolean | Improve this Doc View Source Equals(Matrix<Int64>, Matrix<Int64>) Declaration public static bool Equals(Matrix<long> a, Matrix<long> b) Parameters Type Name Description Matrix < System.Int64 > a Matrix < System.Int64 > b Returns Type Description System.Boolean | Improve this Doc View Source Equals(Matrix<Single>, Matrix<Single>) Declaration public static bool Equals(Matrix<float> a, Matrix<float> b) Parameters Type Name Description Matrix < System.Single > a Matrix < System.Single > b Returns Type Description System.Boolean | Improve this Doc View Source SumAll(Matrix<Double>) Declaration public static double SumAll(this Matrix<double> matrix) Parameters Type Name Description Matrix < System.Double > matrix Returns Type Description System.Double | Improve this Doc View Source SumAll(Matrix<Int32>) Declaration public static int SumAll(this Matrix<int> matrix) Parameters Type Name Description Matrix < System.Int32 > matrix Returns Type Description System.Int32 | Improve this Doc View Source SumAll(Matrix<Single>) Declaration public static float SumAll(this Matrix<float> matrix) Parameters Type Name Description Matrix < System.Single > matrix Returns Type Description System.Single"
  },
  "api/MatrixDotNet.Extensions.Core.Extensions.Sorting.html": {
    "href": "api/MatrixDotNet.Extensions.Core.Extensions.Sorting.html",
    "title": "Namespace MatrixDotNet.Extensions.Core.Extensions.Sorting | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Extensions.Core.Extensions.Sorting Structs BubbleSortFixed Represents bubble sorting algorithms of matrix with fixed buffer size. Interfaces ISorting Represents logic whole sorting algorithms."
  },
  "api/MatrixDotNet.Math.MathGeneric-1.html": {
    "href": "api/MatrixDotNet.Math.MathGeneric-1.html",
    "title": "Class MathGeneric<T> | MatrixDotNet",
    "keywords": "Class MathGeneric<T> Inheritance System.Object MathGeneric<T> Namespace : MatrixDotNet.Math Assembly : MatrixDotNet.Math.dll Syntax public static class MathGeneric<T> : object Type Parameters Name Description T Methods | Improve this Doc View Source Abs(T) Declaration public static T Abs(T left) Parameters Type Name Description T left Returns Type Description T | Improve this Doc View Source Add(T, T) Declaration public static T Add(T left, T right) Parameters Type Name Description T left T right Returns Type Description T | Improve this Doc View Source Divide(T, T) Declaration public static T Divide(T left, T right) Parameters Type Name Description T left T right Returns Type Description T | Improve this Doc View Source GetAbsFunc() Declaration public static Func<T, T> GetAbsFunc() Returns Type Description Func <T, T> | Improve this Doc View Source GetAddFunc() Declaration public static Func<T, T, T> GetAddFunc() Returns Type Description Func <T, T, T> | Improve this Doc View Source GetDivideFunc() Declaration public static Func<T, T, T> GetDivideFunc() Returns Type Description Func <T, T, T> | Improve this Doc View Source GetIncrementFunc() Declaration public static Func<T, T> GetIncrementFunc() Returns Type Description Func <T, T> | Improve this Doc View Source GetMultiplyFunc() Declaration public static Func<T, T, T> GetMultiplyFunc() Returns Type Description Func <T, T, T> | Improve this Doc View Source GetNegateFunc() Declaration public static Func<T, T> GetNegateFunc() Returns Type Description Func <T, T> | Improve this Doc View Source GetSubFunc() Declaration public static Func<T, T, T> GetSubFunc() Returns Type Description Func <T, T, T> | Improve this Doc View Source Increment(T) Declaration public static T Increment(T left) Parameters Type Name Description T left Returns Type Description T | Improve this Doc View Source Multiply(T, T) Declaration public static T Multiply(T left, T right) Parameters Type Name Description T left T right Returns Type Description T | Improve this Doc View Source Negate(T) Declaration public static T Negate(T left) Parameters Type Name Description T left Returns Type Description T | Improve this Doc View Source Sqrt() Declaration public static Func<T, T> Sqrt() Returns Type Description Func <T, T> | Improve this Doc View Source Sqrt(T) Declaration public static T Sqrt(T arg) Parameters Type Name Description T arg Returns Type Description T | Improve this Doc View Source Sub(T, T) Declaration public static T Sub(T left, T right) Parameters Type Name Description T left T right Returns Type Description T"
  },
  "api/MatrixDotNet.Matrix-1.Enumerator.html": {
    "href": "api/MatrixDotNet.Matrix-1.Enumerator.html",
    "title": "Struct Matrix<T>.Enumerator | MatrixDotNet",
    "keywords": "Struct Matrix<T>.Enumerator Represents implementations IEnumerator. Implements IEnumerator <T> Namespace : MatrixDotNet Assembly : MatrixDotNet.dll Syntax public struct Enumerator : IEnumerator<T> Properties | Improve this Doc View Source Current Declaration public T Current { get; } Property Value Type Description T Methods | Improve this Doc View Source Dispose() Isn't used here Declaration public void Dispose() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description System.Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Implements IEnumerator<>"
  },
  "api/MatrixDotNet.Extensions.Conversion.html": {
    "href": "api/MatrixDotNet.Extensions.Conversion.html",
    "title": "Namespace MatrixDotNet.Extensions.Conversion | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Extensions.Conversion Classes MatrixConverter Represents converter which can change matrix."
  },
  "api/MatrixDotNet.NotStableFeatures.UnsafeEqualsUnrolled.html": {
    "href": "api/MatrixDotNet.NotStableFeatures.UnsafeEqualsUnrolled.html",
    "title": "Class UnsafeEqualsUnrolled | MatrixDotNet",
    "keywords": "Class UnsafeEqualsUnrolled Inheritance System.Object UnsafeEqualsUnrolled Namespace : MatrixDotNet.NotStableFeatures Assembly : MatrixDotNet.dll Syntax public class UnsafeEqualsUnrolled : object Methods | Improve this Doc View Source ByteArrayCompare(Int32[], Int32[]) Declaration public static bool ByteArrayCompare(int[] b1, int[] b2) Parameters Type Name Description System.Int32 [] b1 System.Int32 [] b2 Returns Type Description System.Boolean | Improve this Doc View Source EqualBytesLongUnrolled<T>(T[], T[]) Declaration public static bool EqualBytesLongUnrolled<T>(T[] data1, T[] data2) where T : struct Parameters Type Name Description T[] data1 T[] data2 Returns Type Description System.Boolean Type Parameters Name Description T"
  },
  "api/MatrixDotNet.Extensions.Statistics.TableSetup.Setup-1.html": {
    "href": "api/MatrixDotNet.Extensions.Statistics.TableSetup.Setup-1.html",
    "title": "Class Setup<T> | MatrixDotNet",
    "keywords": "Class Setup<T> Represents store data such as matrix, tables. Share operations for all statistic classes. Inheritance System.Object Setup<T> SetupIntervals<T> SetupVariations<T> Namespace : MatrixDotNet.Extensions.Statistics.TableSetup Assembly : MatrixDotNet.dll Syntax public abstract class Setup<T> : object where T : struct Type Parameters Name Description T Constructors | Improve this Doc View Source Setup(Matrix<T>) Initialize Declaration protected Setup(Matrix<T> matrix) Parameters Type Name Description Matrix <T> matrix the matrix. Properties | Improve this Doc View Source ColumnNames Declaration protected string[] ColumnNames { get; } Property Value Type Description System.String [] | Improve this Doc View Source ColumnNumber Declaration protected int[] ColumnNumber { get; } Property Value Type Description System.Int32 [] | Improve this Doc View Source Matrix Declaration protected Matrix<T> Matrix { get; } Property Value Type Description Matrix <T> Methods | Improve this Doc View Source FindColumn(Int32) Finds column index in matrix. Declaration protected int FindColumn(int nameIndex) Parameters Type Name Description System.Int32 nameIndex index of column Returns Type Description System.Int32 index column Exceptions Type Condition MatrixDotNetException Index not found."
  },
  "api/MatrixDotNet.Extensions.Statistics.TableSetup.html": {
    "href": "api/MatrixDotNet.Extensions.Statistics.TableSetup.html",
    "title": "Namespace MatrixDotNet.Extensions.Statistics.TableSetup | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Extensions.Statistics.TableSetup Classes ConfigIntervals<T> Represents configuration for Intervals ConfigVariations<T> Represents configuration for Variations Setup<T> Represents store data such as matrix, tables. Share operations for all statistic classes. SetupIntervals<T> Represents store data such as matrix, tables. Share interval operations. SetupVariations<T> Represents store data such as matrix, tables. Share variations operations. Interfaces IConfig<T> Enums TableIntervals Represents columns for matrix intervals. TableVariations Represents columns for matrix variations."
  },
  "api/MatrixDotNet.Extensions.Options.Template.html": {
    "href": "api/MatrixDotNet.Extensions.Options.Template.html",
    "title": "Class Template | MatrixDotNet",
    "keywords": "Class Template Inheritance System.Object Template TemplateHtml TemplateMarkdown Namespace : MatrixDotNet.Extensions.Options Assembly : MatrixDotNet.dll Syntax public abstract class Template : object Constructors | Improve this Doc View Source Template(String) Declaration protected Template(string title) Parameters Type Name Description System.String title Properties | Improve this Doc View Source Assembly Declaration protected static Assembly Assembly { get; } Property Value Type Description Assembly | Improve this Doc View Source Columns Declaration protected int Columns { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source FileExtension Declaration public abstract string FileExtension { get; } Property Value Type Description System.String | Improve this Doc View Source FullPath Declaration public string FullPath { get; } Property Value Type Description System.String | Improve this Doc View Source RelativePath Declaration public string RelativePath { get; } Property Value Type Description System.String | Improve this Doc View Source RootPath Declaration protected static string RootPath { get; } Property Value Type Description System.String | Improve this Doc View Source Rows Declaration protected int Rows { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Title Declaration public string Title { get; } Property Value Type Description System.String Methods | Improve this Doc View Source BinaryOpenAsync<T>() Declaration public Task<Matrix<T>> BinaryOpenAsync<T>() where T : struct Returns Type Description Task < Matrix <T>> Type Parameters Name Description T | Improve this Doc View Source BinarySaveAsync<T>(Matrix<T>) Declaration public Task BinarySaveAsync<T>(Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source CreateText<T>(Matrix<T>) Declaration public abstract string CreateText<T>(Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix Returns Type Description System.String Type Parameters Name Description T | Improve this Doc View Source Open() Declaration public void Open()"
  },
  "api/MatrixDotNet.Extensions.Core.Extensions.Sorting.BubbleSortFixed.html": {
    "href": "api/MatrixDotNet.Extensions.Core.Extensions.Sorting.BubbleSortFixed.html",
    "title": "Struct BubbleSortFixed | MatrixDotNet",
    "keywords": "Struct BubbleSortFixed Represents bubble sorting algorithms of matrix with fixed buffer size. Namespace : MatrixDotNet.Extensions.Core.Extensions.Sorting Assembly : MatrixDotNet.NetCore.dll Syntax public struct BubbleSortFixed Methods | Improve this Doc View Source Sort(ref MatrixAsFixedBuffer) Sorts whole matrix. Declaration public void Sort(ref MatrixAsFixedBuffer matrix) Parameters Type Name Description MatrixAsFixedBuffer matrix the matrix. | Improve this Doc View Source SortByColumns(ref MatrixAsFixedBuffer) Sorts matrix by column. Declaration public void SortByColumns(ref MatrixAsFixedBuffer matrix) Parameters Type Name Description MatrixAsFixedBuffer matrix the matrix. | Improve this Doc View Source SortByRows(ref MatrixAsFixedBuffer) Sorts matrix by rows. Declaration public void SortByRows(ref MatrixAsFixedBuffer matrix) Parameters Type Name Description MatrixAsFixedBuffer matrix the matrix. | Improve this Doc View Source SortMainDiagonal(ref MatrixAsFixedBuffer) Sorts main diagonal of matrix. Declaration public void SortMainDiagonal(ref MatrixAsFixedBuffer matrix) Parameters Type Name Description MatrixAsFixedBuffer matrix the matrix. | Improve this Doc View Source SortMinorDiagonal(ref MatrixAsFixedBuffer) Sorts minor diagonal of matrix. Declaration public void SortMinorDiagonal(ref MatrixAsFixedBuffer matrix) Parameters Type Name Description MatrixAsFixedBuffer matrix the matrix."
  },
  "api/MatrixDotNet.Extensions.Builder.BuildMatrix.html": {
    "href": "api/MatrixDotNet.Extensions.Builder.BuildMatrix.html",
    "title": "Class BuildMatrix | MatrixDotNet",
    "keywords": "Class BuildMatrix Represents the functional of build matrix. Inheritance System.Object BuildMatrix Namespace : MatrixDotNet.Extensions.Builder Assembly : MatrixDotNet.dll Syntax public static class BuildMatrix : object Methods | Improve this Doc View Source Build<T>(Int32, Int32, Func<T, T, T>, T[]) Builds matrix by expression; Declaration public static Matrix<T> Build<T>(int row, int column, Func<T, T, T> expression, T[] arg1) where T : struct Parameters Type Name Description System.Int32 row row length of matrix. System.Int32 column column length of matrix. Func <T, T, T> expression expression. T[] arg1 argument1. Returns Type Description Matrix <T> Creates Matrix by formula. Type Parameters Name Description T unmanaged type. Exceptions Type Condition MatrixDotNetException throws exception if arg1 length not equal Max(row,column). | Improve this Doc View Source Build<T>(Int32, Int32, Func<T, T, T>, T[], T[]) Builds matrix by expression; Declaration public static Matrix<T> Build<T>(int row, int column, Func<T, T, T> expression, T[] arg1, T[] arg2) where T : struct Parameters Type Name Description System.Int32 row row length of matrix. System.Int32 column column length of matrix. Func <T, T, T> expression expression. T[] arg1 argument1. T[] arg2 argument2. Returns Type Description Matrix <T> Creates Matrix by formula. Type Parameters Name Description T unmanaged type. Exceptions Type Condition MatrixDotNetException throws exception if arg1 or arg2 length not equal Max(row,column). | Improve this Doc View Source Build<T>(Int32, Int32, Func<T, T>, T[]) Builds matrix by expression; Declaration public static Matrix<T> Build<T>(int row, int column, Func<T, T> expression, T[] arg1) where T : struct Parameters Type Name Description System.Int32 row row length of matrix. System.Int32 column column length of matrix. Func <T, T> expression expression. T[] arg1 argument1. Returns Type Description Matrix <T> Creates Matrix by formula. Type Parameters Name Description T unmanaged type. Exceptions Type Condition MatrixDotNetException throws exception if arg1 length not equal Max(row,column). | Improve this Doc View Source CreateIdentityMatrix(Matrix<Double>) Declaration public static Matrix<double> CreateIdentityMatrix(this Matrix<double> matrix) Parameters Type Name Description Matrix < System.Double > matrix Returns Type Description Matrix < System.Double > | Improve this Doc View Source CreateIdentityMatrix(Matrix<Int32>) Declaration public static Matrix<int> CreateIdentityMatrix(this Matrix<int> matrix) Parameters Type Name Description Matrix < System.Int32 > matrix Returns Type Description Matrix < System.Int32 > | Improve this Doc View Source CreateIdentityMatrix(Matrix<Int64>) Declaration public static Matrix<long> CreateIdentityMatrix(this Matrix<long> matrix) Parameters Type Name Description Matrix < System.Int64 > matrix Returns Type Description Matrix < System.Int64 > | Improve this Doc View Source CreateIdentityMatrix(Matrix<Single>) Declaration public static Matrix<float> CreateIdentityMatrix(this Matrix<float> matrix) Parameters Type Name Description Matrix < System.Single > matrix Returns Type Description Matrix < System.Single > | Improve this Doc View Source CreateIdentityMatrix<T>(Matrix<T>) Creates identity matrix by this size of matrix. Declaration public static Matrix<T> CreateIdentityMatrix<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description Matrix <T> Identity matrix. Type Parameters Name Description T unmanaged type. Exceptions Type Condition MatrixDotNetException throws exception if matrix is not square | Improve this Doc View Source CreateIdentityMatrix<T>(Int32, Int32) Creates identity matrix. Declaration public static Matrix<T> CreateIdentityMatrix<T>(int row, int col) where T : struct Parameters Type Name Description System.Int32 row System.Int32 col Returns Type Description Matrix <T> Type Parameters Name Description T Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source GetCornerMinor<T>(Matrix<T>, Int32) Gets corner Minor. Declaration public static Matrix<T> GetCornerMinor<T>(this Matrix<T> matrix, int row) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix System.Int32 row index of matrix Returns Type Description Matrix <T> corner minor as new matrix Type Parameters Name Description T unmanaged type Exceptions Type Condition MatrixDotNetException throws if matrix is not square. | Improve this Doc View Source GetMinor<T>(Matrix<T>, Int32) Gets minor of matrix by row. Declaration public static Matrix<T> GetMinor<T>(this Matrix<T> matrix, int n) where T : struct Parameters Type Name Description Matrix <T> matrix matrix System.Int32 n n Returns Type Description Matrix <T> Minor`s matrix by row index Type Parameters Name Description T | Improve this Doc View Source GetMinorMatrix<T>(Matrix<T>) Gets Minor`s matrix. Declaration public static Matrix<T> GetMinorMatrix<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description Matrix <T> Minor`s matrix. Type Parameters Name Description T unmanaged type, Exceptions Type Condition MatrixDotNetException Throws exception if matrix is not square | Improve this Doc View Source GetMinorMatrix<T>(Matrix<T>, Int32, Int32) Gets Minor`s matrix by row and column. Declaration public static Matrix<T> GetMinorMatrix<T>(this Matrix<T> matrix, int row, int col) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. System.Int32 row the row index. System.Int32 col the column index. Returns Type Description Matrix <T> Minor`s matrix by row and column index. Type Parameters Name Description T unmanaged type. | Improve this Doc View Source Random<T>(Int32, Int32, Int32, Int32) Declaration public static Matrix<T> Random<T>(int row, int column, int startRandom, int endRandom) where T : struct Parameters Type Name Description System.Int32 row System.Int32 column System.Int32 startRandom System.Int32 endRandom Returns Type Description Matrix <T> Type Parameters Name Description T | Improve this Doc View Source RandomByte(Int32, Int32, Byte, Byte) Declaration public static Matrix<byte> RandomByte(int row, int column, byte startRandom = null, byte endRandom = null) Parameters Type Name Description System.Int32 row System.Int32 column System.Byte startRandom System.Byte endRandom Returns Type Description Matrix < System.Byte > | Improve this Doc View Source RandomDouble(Int32, Int32, Int32, Int32) Declaration public static Matrix<double> RandomDouble(int row, int column, int startRandom = null, int endRandom = null) Parameters Type Name Description System.Int32 row System.Int32 column System.Int32 startRandom System.Int32 endRandom Returns Type Description Matrix < System.Double > | Improve this Doc View Source RandomInt(Int32, Int32, Int32, Int32) Declaration public static Matrix<int> RandomInt(int row, int column, int startRandom = null, int endRandom = null) Parameters Type Name Description System.Int32 row System.Int32 column System.Int32 startRandom System.Int32 endRandom Returns Type Description Matrix < System.Int32 >"
  },
  "api/MatrixDotNet.Extensions.Determinants.html": {
    "href": "api/MatrixDotNet.Extensions.Determinants.html",
    "title": "Namespace MatrixDotNet.Extensions.Determinants | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Extensions.Determinants Classes Determinant"
  },
  "api/MatrixDotNet.Extensions.Decompositions.Decomposition.html": {
    "href": "api/MatrixDotNet.Extensions.Decompositions.Decomposition.html",
    "title": "Class Decomposition | MatrixDotNet",
    "keywords": "Class Decomposition Represents any algorithm`s for decomposition of matrix. Inheritance System.Object Decomposition Namespace : MatrixDotNet.Extensions.Decompositions Assembly : MatrixDotNet.dll Syntax public static class Decomposition : object Methods | Improve this Doc View Source DimensionReductionPca() Declaration public static void DimensionReductionPca() | Improve this Doc View Source EigenVectorQrIterative<T>(Matrix<T>, Double, Int32, out Matrix<T>, out Matrix<T>) Declaration public static void EigenVectorQrIterative<T>(this Matrix<T> matrix, double accuracy, int maxIterations, out Matrix<T> iter, out Matrix<T> qIter) where T : struct Parameters Type Name Description Matrix <T> matrix System.Double accuracy System.Int32 maxIterations Matrix <T> iter Matrix <T> qIter Type Parameters Name Description T | Improve this Doc View Source GetCholesky(Matrix<Decimal>, out Matrix<Decimal>, out Matrix<Decimal>) Declaration public static void GetCholesky(this Matrix<decimal> matrix, out Matrix<decimal> lower, out Matrix<decimal> transpose) Parameters Type Name Description Matrix < System.Decimal > matrix Matrix < System.Decimal > lower Matrix < System.Decimal > transpose | Improve this Doc View Source GetCholesky(Matrix<Double>, out Matrix<Double>, out Matrix<Double>) Declaration public static void GetCholesky(this Matrix<double> matrix, out Matrix<double> lower, out Matrix<double> transpose) Parameters Type Name Description Matrix < System.Double > matrix Matrix < System.Double > lower Matrix < System.Double > transpose | Improve this Doc View Source GetCholesky(Matrix<Single>, out Matrix<Single>, out Matrix<Single>) Declaration public static void GetCholesky(this Matrix<float> matrix, out Matrix<float> lower, out Matrix<float> transpose) Parameters Type Name Description Matrix < System.Single > matrix Matrix < System.Single > lower Matrix < System.Single > transpose | Improve this Doc View Source GetLower<T>(Matrix<T>) Gets lower-triangular matrix, upper init zero values. Declaration public static Matrix<T> GetLower<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description Matrix <T> The lower matrix. Type Parameters Name Description T unmanaged type. Exceptions Type Condition MatrixDotNetException throws exception if matrix is not square. | Improve this Doc View Source GetLowerUpper<T>(Matrix<T>, out Matrix<T>, out Matrix<T>) Gets LU decomposition of matrix. Declaration public static void GetLowerUpper<T>(this Matrix<T> matrix, out Matrix<T> lower, out Matrix<T> upper) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Matrix <T> lower the lower triangular matrix. Matrix <T> upper the upper triangular matrix. Type Parameters Name Description T unmanaged type Exceptions Type Condition MatrixDotNetException throws exception if matrix is not square | Improve this Doc View Source GetLowerUpperPermutation(Matrix<Double>, out Matrix<Double>, out Matrix<Double>, out Matrix<Double>) Gets lower upper permutation; Declaration public static void GetLowerUpperPermutation(this Matrix<double> matrix, out Matrix<double> lower, out Matrix<double> upper, out Matrix<double> matrixP) Parameters Type Name Description Matrix < System.Double > matrix Matrix < System.Double > lower Matrix < System.Double > upper Matrix < System.Double > matrixP | Improve this Doc View Source GetLowerUpperPermutation<T>(Matrix<T>, out Matrix<T>, out Matrix<T>) Gets lower upper permutation with matrix C which calculate by formula: C=L+U-E Declaration public static void GetLowerUpperPermutation<T>(this Matrix<T> matrix, out Matrix<T> matrixC, out Matrix<T> matrixP) where T : struct Parameters Type Name Description Matrix <T> matrix Matrix <T> matrixC Matrix <T> matrixP Type Parameters Name Description T | Improve this Doc View Source GetLowerUpperPermutationUnsafe(Matrix<Double>, out Matrix<Double>, out Matrix<Double>, out Matrix<Double>) Declaration public static void GetLowerUpperPermutationUnsafe(this Matrix<double> matrix, out Matrix<double> lower, out Matrix<double> upper, out Matrix<double> matrixP) Parameters Type Name Description Matrix < System.Double > matrix Matrix < System.Double > lower Matrix < System.Double > upper Matrix < System.Double > matrixP | Improve this Doc View Source GetLowerUpperPermutationUnsafe(Matrix<Single>, out Matrix<Single>, out Matrix<Single>, out Matrix<Single>) Declaration public static void GetLowerUpperPermutationUnsafe(this Matrix<float> matrix, out Matrix<float> lower, out Matrix<float> upper, out Matrix<float> matrixP) Parameters Type Name Description Matrix < System.Single > matrix Matrix < System.Single > lower Matrix < System.Single > upper Matrix < System.Single > matrixP | Improve this Doc View Source GetNormByColumns<T>(Matrix<T>) Declaration public static Matrix<T> GetNormByColumns<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix Returns Type Description Matrix <T> Type Parameters Name Description T | Improve this Doc View Source GetNormByRows<T>(Matrix<T>) Declaration public static Matrix<T> GetNormByRows<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix Returns Type Description Matrix <T> Type Parameters Name Description T | Improve this Doc View Source GetQuasiTriangular<T>(Matrix<T>) Declaration public static Matrix<T> GetQuasiTriangular<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix Returns Type Description Matrix <T> Type Parameters Name Description T | Improve this Doc View Source GetUpper<T>(Matrix<T>) Gets upper-triangular matrix, lower init zero values. Declaration public static Matrix<T> GetUpper<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description Matrix <T> Type Parameters Name Description T unmanaged type Exceptions Type Condition MatrixDotNetException throws exception if matrix is not square. | Improve this Doc View Source IsIdentity<T>(Matrix<T>) Declaration public static bool IsIdentity<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source LqDecomposition<T>(Matrix<T>, out Matrix<T>, out Matrix<T>) Declaration public static void LqDecomposition<T>(this Matrix<T> matrix, out Matrix<T> l, out Matrix<T> q) where T : struct Parameters Type Name Description Matrix <T> matrix Matrix <T> l Matrix <T> q Type Parameters Name Description T | Improve this Doc View Source ProcessGrammShmidtByColumns<T>(Matrix<T>) Declaration public static Matrix<T> ProcessGrammShmidtByColumns<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix Returns Type Description Matrix <T> Type Parameters Name Description T | Improve this Doc View Source ProcessGrammShmidtByRows<T>(Matrix<T>) Declaration public static Matrix<T> ProcessGrammShmidtByRows<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix Returns Type Description Matrix <T> Type Parameters Name Description T | Improve this Doc View Source QrDecomposition<T>(Matrix<T>, out Matrix<T>, out Matrix<T>) Declaration public static void QrDecomposition<T>(this Matrix<T> matrix, out Matrix<T> q, out Matrix<T> r) where T : struct Parameters Type Name Description Matrix <T> matrix Matrix <T> q Matrix <T> r Type Parameters Name Description T | Improve this Doc View Source ShurDecomposition(Matrix<Double>, out Matrix<Double>, out Matrix<Double>, out Matrix<Double>) Declaration public static void ShurDecomposition(this Matrix<double> matrix, out Matrix<double> orthogonal, out Matrix<double> upper, out Matrix<double> ortTranspose) Parameters Type Name Description Matrix < System.Double > matrix Matrix < System.Double > orthogonal Matrix < System.Double > upper Matrix < System.Double > ortTranspose"
  },
  "api/MatrixDotNet.NotStableFeatures.html": {
    "href": "api/MatrixDotNet.NotStableFeatures.html",
    "title": "Namespace MatrixDotNet.NotStableFeatures | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.NotStableFeatures Classes UnsafeEqualsUnrolled"
  },
  "api/MatrixDotNet.Extensions.Criteries.html": {
    "href": "api/MatrixDotNet.Extensions.Criteries.html",
    "title": "Namespace MatrixDotNet.Extensions.Criteries | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Extensions.Criteries Classes Criterion Enums DefiniteType Represents quadratic form."
  },
  "api/MatrixDotNet.Extensions.Inverse.MatrixExtension.html": {
    "href": "api/MatrixDotNet.Extensions.Inverse.MatrixExtension.html",
    "title": "Class MatrixExtension | MatrixDotNet",
    "keywords": "Class MatrixExtension Inheritance System.Object MatrixExtension Namespace : MatrixDotNet.Extensions.Inverse Assembly : MatrixDotNet.dll Syntax public static class MatrixExtension : object Methods | Improve this Doc View Source GaussianEliminationInverse(Matrix<Double>) Inverse matrix with happen Gaussian elimination. Declaration public static Matrix<double> GaussianEliminationInverse(this Matrix<double> matrix) Parameters Type Name Description Matrix < System.Double > matrix the matrix. Returns Type Description Matrix < System.Double > Inverse matrix. Exceptions Type Condition MatrixDotNetException matrix is not square. | Improve this Doc View Source InverseAlgebraicComplement(Matrix<Decimal>) Gets inverse matrix. Declaration public static Matrix<decimal> InverseAlgebraicComplement(this Matrix<decimal> matrix) Parameters Type Name Description Matrix < System.Decimal > matrix the matrix. Returns Type Description Matrix < System.Decimal > Inverse matrix. | Improve this Doc View Source InverseAlgebraicComplement(Matrix<Double>) Gets inverse matrix. Declaration public static Matrix<double> InverseAlgebraicComplement(this Matrix<double> matrix) Parameters Type Name Description Matrix < System.Double > matrix the matrix. Returns Type Description Matrix < System.Double > Inverse matrix. | Improve this Doc View Source InverseAlgebraicComplement(Matrix<Single>) Gets inverse matrix. Declaration public static Matrix<float> InverseAlgebraicComplement(this Matrix<float> matrix) Parameters Type Name Description Matrix < System.Single > matrix the matrix. Returns Type Description Matrix < System.Single > Inverse matrix."
  },
  "api/MatrixDotNet.Extensions.Solver.html": {
    "href": "api/MatrixDotNet.Extensions.Solver.html",
    "title": "Namespace MatrixDotNet.Extensions.Solver | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Extensions.Solver Classes Solve"
  },
  "api/MatrixDotNet.Extensions.Options.TemplateMarkdown.html": {
    "href": "api/MatrixDotNet.Extensions.Options.TemplateMarkdown.html",
    "title": "Class TemplateMarkdown | MatrixDotNet",
    "keywords": "Class TemplateMarkdown Inheritance System.Object Template TemplateMarkdown Inherited Members Template.Title Template.Assembly Template.RootPath Template.Rows Template.Columns Template.RelativePath Template.FullPath Template.Open() Template.BinarySaveAsync<T>(Matrix<T>) Template.BinaryOpenAsync<T>() Namespace : MatrixDotNet.Extensions.Options Assembly : MatrixDotNet.dll Syntax public sealed class TemplateMarkdown : Template Constructors | Improve this Doc View Source TemplateMarkdown(String, Boolean) Declaration public TemplateMarkdown(string title, bool hasSize = false) Parameters Type Name Description System.String title System.Boolean hasSize Properties | Improve this Doc View Source FileExtension Declaration public override string FileExtension { get; } Property Value Type Description System.String Overrides Template.FileExtension | Improve this Doc View Source HasSize Declaration public bool HasSize { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CreateText<T>(Matrix<T>) Declaration public override string CreateText<T>(Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix Returns Type Description System.String Type Parameters Name Description T Overrides MatrixDotNet.Extensions.Options.Template.CreateText<T>(MatrixDotNet.Matrix<T>)"
  },
  "api/MatrixDotNet.Exceptions.MatrixDotNetException.html": {
    "href": "api/MatrixDotNet.Exceptions.MatrixDotNetException.html",
    "title": "Class MatrixDotNetException | MatrixDotNet",
    "keywords": "Class MatrixDotNetException Represent exception for Matrix<T> Inheritance System.Object MatrixDotNetException Namespace : MatrixDotNet.Exceptions Assembly : MatrixDotNet.dll Syntax public sealed class MatrixDotNetException : Exception Constructors | Improve this Doc View Source MatrixDotNetException(String) Exception. Declaration public MatrixDotNetException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source MatrixDotNetException(String, String) Exception. Declaration public MatrixDotNetException(string message, string argument) Parameters Type Name Description System.String message System.String argument | Improve this Doc View Source MatrixDotNetException(String, String, String) Exception. Declaration public MatrixDotNetException(string message, string argument1, string argument2) Parameters Type Name Description System.String message System.String argument1 System.String argument2 Properties | Improve this Doc View Source Argument1 Gets argument. Declaration public string Argument1 { get; } Property Value Type Description System.String | Improve this Doc View Source Argument2 Gets argument. Declaration public string Argument2 { get; } Property Value Type Description System.String | Improve this Doc View Source Message Gets message. Declaration public override string Message { get; } Property Value Type Description System.String"
  },
  "articles/guides/sorting.html": {
    "href": "articles/guides/sorting.html",
    "title": "Sorting overview. | MatrixDotNet",
    "keywords": "Sorting overview. Bubble sort in MatrixDotNet Bubble sort is a simple algorithm of sorting, which effective on small size array. Difficult algorithm - O(n 2 ) Lets consider how in MatrixDotNet can sort matrix. Sorting of matrix consist in MatrixDotNet.Extensions.Sorting . Also we will use MatrixDotNet.Extensions.Builder which contain static class BuildMatrix for to simplify matrix creation. using System; using MatrixDotNet; using MatrixDotNet.Extensions; using MatrixDotNet.Extensions.Builder; using MatrixDotNet.Extensions.Sorting; namespace Sample { public class BubbleSortSample { public static void Run() { // Build Matrix available from version 0.0.3+. Matrix<int> matrixA = BuildMatrix.Build(5, 5, (x,y) => x * x + y, new[] { -1, -232, 3, 4, 5 }, new[] { -5, -6, -9, 132, 12 } ); Console.WriteLine(\"initial matrix view:\"); matrixA.Pretty(); // 1. Sorts whole matrix. matrixA.BubbleSort(); Console.WriteLine(\"Bubble sort MatrixA\"); matrixA.Pretty(); // Builds Identity matrix. Matrix<int> matrixE = BuildMatrix.CreateIdentityMatrix<int>(4,4); // 2. Sorts all rows of matrix. matrixE.BubbleSortByRows(); Console.WriteLine(\"Sorts matrixE by rows:\"); matrixE.Pretty(); // 3. Sorts all columns of matrix. matrixE.BubbleSortByColumn(); Console.WriteLine(\"Sorts matrixE by columns:\"); matrixE.Pretty(); // 3. Sorts main diagonal of matrix. matrixA.BubbleSortMainDiagonal(); Console.WriteLine(\"Sorts main diagonal of matrixA:\"); matrixA.Pretty(); // 4. Sorts minor diagonal of matrix. matrixA.BubbleSortMinorDiagonal(); Console.WriteLine(\"Sorts minor diagonal of matrixA:\"); matrixA.Pretty(); } } } Output initial matrix view: Number of rows: 5 Number of columns: 5 -4 | -5 | -8 | 133 | 13 | 53819 | 53818 | 53815 | 53956 | 53836 | 4 | 3 | 0 | 141 | 21 | 11 | 10 | 7 | 148 | 28 | 20 | 19 | 16 | 157 | 37 | Bubble sort MatrixA Number of rows: 5 Number of columns: 5 -8 | -5 | -4 | 0 | 3 | 4 | 7 | 10 | 11 | 13 | 16 | 19 | 20 | 21 | 28 | 37 | 133 | 141 | 148 | 157 | 53815 | 53818 | 53819 | 53836 | 53956 | Sorts matrixE by rows: Number of rows: 4 Number of columns: 4 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | Sorts matrixE by columns: Number of rows: 4 Number of columns: 4 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | Sorts main diagonal of matrixA: Number of rows: 5 Number of columns: 5 -8 | -5 | -4 | 0 | 3 | 4 | 7 | 10 | 11 | 13 | 16 | 19 | 20 | 21 | 28 | 37 | 133 | 141 | 148 | 157 | 53815 | 53818 | 53819 | 53836 | 53956 | Sorts minor diagonal of matrixA: Number of rows: 5 Number of columns: 5 -8 | -5 | -4 | 0 | 3 | 4 | 7 | 10 | 11 | 13 | 16 | 19 | 20 | 21 | 28 | 37 | 133 | 141 | 148 | 157 | 53815 | 53818 | 53819 | 53836 | 53956 | Note Now at the moment from version 0.0.3 MatrixDotNet only support bubble sort. If you didn't find answer for your question on this page, ask it on gitter ."
  },
  "articles/features/statistics.html": {
    "href": "articles/features/statistics.html",
    "title": "Statistics overview | MatrixDotNet",
    "keywords": "Statistics overview How to use statistics in MatrixDotNet? Statistics namespace located in MatrixDotNet.Extensions.Statistics ."
  },
  "articles/guides/conversion.html": {
    "href": "articles/guides/conversion.html",
    "title": "Conversion matrix overview. | MatrixDotNet",
    "keywords": "Conversion matrix overview. Conversion of matrix consist in MatrixDotNet.Extensions.Conversion which contains static class MatrixConverter . How change size of Matrix? Lets consider the following sample. In this sample i`ll demonstrate how you can add column or row in any position of matrix and reduce them. using System; using MatrixDotNet; using MatrixDotNet.Extensions; using MatrixDotNet.Extensions.Builder; using MatrixDotNet.Extensions.Conversion; namespace Sample { public class ConverterSample { public static void Run() { // Build matrix. Matrix<int> matrix = BuildMatrix.Build(3,3, (x, y) => x + y * y, new[] { 43, 23, 54 }, new[] { 52, 12, 21 }); Console.WriteLine(\"Before conversion:\"); matrix.Pretty(); // Add row to matrix by index. Matrix<int> matrixA = matrix.AddRow(new[] { 1, 2, 3 }, 1); Console.WriteLine(\"Add row to matrix on second row index:\"); matrixA.Pretty(); // Add column to matrix by index. Matrix<int> matrixB = matrix.AddColumn(new[] { 4, 5, 6 }, 2); Console.WriteLine(\"Add column to matrix on second column index:\"); matrixB.Pretty(); // now we will reduce this new column and row. Matrix<int> matrixC = matrix.ReduceColumn(2); Matrix<int> matrixD = matrix.ReduceRow(1); Console.WriteLine(\"After reduce:\"); matrixC.Pretty(); matrixD.Pretty(); // Also in MatrixDotNet you can join two matrix with the same size row length. Matrix<int> matrixF = matrixA.Concat(matrixA); matrixF.Pretty(); } } } Output Before conversion: Number of rows: 3 Number of columns: 3 2747 | 187 | 484 | 2727 | 167 | 464 | 2758 | 198 | 495 | Add row to matrix on second row index: Number of rows: 4 Number of columns: 3 2747 | 187 | 484 | 1 | 2 | 3 | 2727 | 167 | 464 | 2758 | 198 | 495 | Add column to matrix on second column index: Number of rows: 3 Number of columns: 4 2747 | 187 | 4 | 484 | 2727 | 167 | 5 | 464 | 2758 | 198 | 6 | 495 | After reduce: Number of rows: 3 Number of columns: 2 2747 | 187 | 2727 | 167 | 2758 | 198 | Number of rows: 2 Number of columns: 3 2747 | 187 | 484 | 2758 | 198 | 495 | Number of rows: 4 Number of columns: 6 2747 | 187 | 484 | 2747 | 187 | 484 | 1 | 2 | 3 | 1 | 2 | 3 | 2727 | 167 | 464 | 2727 | 167 | 464 | 2758 | 198 | 495 | 2758 | 198 | 495 | How to cast matrix to two-dimensional array? using System; using MatrixDotNet; using MatrixDotNet.Extensions; using MatrixDotNet.Extensions.Builder; using MatrixDotNet.Extensions.Conversion; namespace Sample { public class ConverterSample() { public static void CastRun() { // Build matrix. Matrix<int> matrixA = BuildMatrix.Build(3,3, (x, y) => x + y * y, new[] { 43, 23, 54 }, new[] { 52, 12, 21 }); // If you want cast Matrix to two-dimensional // array use method ToPrimitive. int[,] array = matrixA.ToPrimitive(); // Converts two-dimensional array to Matrix. var matrixB = array.ToMatrix(); } } } As you can see for convert matrix to two-dimensional array you can easily use method ToPrimitive . If you didn't find answer for your question on this page, ask it on gitter ."
  },
  "articles/guides/Strassen.html": {
    "href": "articles/guides/Strassen.html",
    "title": "Strassen algorithm in MatrixDotNet overview | MatrixDotNet",
    "keywords": "Strassen algorithm in MatrixDotNet overview Strassen is a recursive algorithm, which multiplies two matrices of size n x n during O(n lg7 )) = O(n 2.81 ) For large enough n where n > 32 algorithm Strassen works faster then usual multiply. How to use algorithm Strassen? Lets consider the following sample: public class StrassenDemonstrate { public static void Run() { // 1. Initialize matrix. Matrix<int> matrixA = new int[128, 128]; Matrix<int> matrixB = new int[128, 128]; // 2. Initialize random values two matrices. Random random1 = new Random(); Random random2 = new Random(); for (int i = 0; i < matrixA.Rows; i++) { for (int j = 0; j < matrixA.Columns; j++) { matrixA[i, j] = random1.Next(1,10); matrixB[i, j] = random2.Next(1,10); } } // 3. Use static class MatrixExtension to use algorithm Strassen multiply. Matrix<int> matrixC = MatrixExtension.MultiplyStrassen(matrixA,matrixB); } } As you can see for use algorithm Strassen multiply matrix used static class MathExtension . When to use Strassen? The important that you remember it is algorithm Strassen should use when matrix square, n is prime(for example matrix 65x65 not will be works!!!) and n > 32. Lets consider benchmarking which we compare default multiply and Strassen public class StrassenSample { int[,] matrix = new int[512,512]; int[,] matrix2 = new int[512,512]; private Matrix<int> matrix3; private Matrix<int> matrix4; [GlobalSetup] public void Setup() { Random random = new Random(); Random random2 = new Random(); for (int i = 0; i < matrix.GetLength(0); i++) { for (int j = 0; j < matrix.GetLength(1); j++) { matrix[i, j] = random.Next(1, 10); } } matrix3 = new Matrix<int>(matrix); for (int i = 0; i < matrix2.GetLength(0); i++) { for (int j = 0; j < matrix2.GetLength(1); j++) { matrix2[i, j] = random2.Next(1, 10); } } matrix4 = new Matrix<int>(matrix2); } [Benchmark] public Matrix<int> Default() { return matrix3 * matrix4; } [Benchmark] public Matrix<int> Strassen() { return MatrixExtension.MultiplyStrassen(matrix3, matrix4); } } In this benchmark we multiplies two matrices of size 512x512 with random values. BenchmarkDotNet=v0.12.1, OS=Windows 10.0.14393.3808 (1607/AnniversaryUpdate/Redstone1) Intel Core i5-8250U CPU 1.60GHz (Kaby Lake R), 1 CPU, 8 logical and 4 physical cores Frequency=1757816 Hz, Resolution=568.8878 ns, Timer=TSC [Host] : .NET Framework 4.8 (4.8.4180.0), X86 LegacyJIT Job-YFITZW : .NET Framework 4.8 (4.8.4180.0), X86 LegacyJIT IterationCount=5 LaunchCount=1 WarmupCount=5 Method Mean Error StdDev Gen 0 Gen 1 Gen 2 Allocated Default 69.88 s 1.241 s 0.322 s - - - 1.01 MB Strassen 43.23 s 0.991 s 0.153 s 30000.0000 5000.0000 2000.0000 174.32 MB As you can see algorithm Strassen multiply works significant faster(x1.625) than default multiply matrix on big size 512x512 . If you didn't find answer for your question on this page, ask it on gitter ."
  },
  "articles/guides/access.html": {
    "href": "articles/guides/access.html",
    "title": "Access to matrix elements overview. | MatrixDotNet",
    "keywords": "Access to matrix elements overview. There are many approaches in Matrix DotNet receive element or vector of matrix. Lets see the following sample. using MatrixDotNet; using MatrixDotNet.Extensions; namespace Sample { public class AccessElementsSample { public static void Run() { // Initialize matrix. Matrix<int> matrix = new int[3,3] { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }; int[] arr = {10, 9, 11}; // Approaches for obtaining elements. int first = matrix[1,2]; // simple way for receive element int second = matrix[1, 1, State.Row]; // gets element by State.Row int third = matrix[0, 2, State.Column]; // gets element by State.Column int[] arr1 = matrix[0, State.Row]; // gets array of matrix by row index. int[] arr2 = matrix[0, State.Column]; // gets array of matrix by column index int[] arr3 = matrix.GetColumn(1); int[] arr4 = matrix.GetRow(2); // also we can reassign element or vector of matrix. matrix[1, 0, State.Column] = 5; matrix[0, State.Column] = arr; // deep copy!!! matrix[1, State.Row] = arr; // deep copy!!! } } } If you didn't find answer for your question on this page, ask it on gitter ."
  },
  "articles/guides/bitwise.html": {
    "href": "articles/guides/bitwise.html",
    "title": "| MatrixDotNet",
    "keywords": ""
  },
  "articles/guides/absorption.html": {
    "href": "articles/guides/absorption.html",
    "title": "Summation Kahan and Klein overview. | MatrixDotNet",
    "keywords": "Summation Kahan and Klein overview. The float and double types follow the IEEE 754 standard, which states that a floating-point number is represented by a sign S, an exponent E, and a mantissa M which can be converted to the real value by the following rule: V = (-1) S * 1.M * 2 E - E bias Computer can’t represent every real number in memory: the range and the precision depends on the number of bits that we have. In table you can see the main characteristics of the 32-bit, 64-bit, and 80-bit floating-point numbers. Sign Exponent Mantissa Digits E bias 32bit 1 8 23 ≈7.2 127 64bit 1 11 52 ≈15.9 1023 81bit 1 15 64 ≈19.2 16383 Most of the classic arithmetic rules don’t work with floating-point numbers. Here is one of the most famous IEEE 754 equations: 0.1d + 0.2 ≠ 0.3d We have such situations because 0.1d, 0.2d, and 0.3d can’t be perfectly presented in IEEE 754 notation: 0.1d ~ 0.100000000000000005551115123125783 + 0.2d ~ 0.200000000000000011102230246251565 = 0.300000000000000044408920985006262 0.3d ~ 0.299999999999999988897769753748435 Many arithmetic rules don’t work with float and double in general: (a + b) + c ≠ a + (b + c) (a * b) * c ≠ a * (b * c) (a + b) * c ≠ a * c + b * c a x + y ≠ a x * a y Lets consider the following sample: Warning It looks like the sample you are looking for does not exist. As you can see we have three matrix with 64 and 128 bit, so next step assign max values for this matrices for demonstration hit in absorption. For invoke Klein's or Kahan's algorithm must invoke method GetKahanSum() and GetKleinSum() Klein's algorithm have the most accuracy summation of matrix than Kahan's, however if values not big you can use Kahan's algorithm. Output Warning It looks like the sample you are looking for does not exist. Thus, the default sum counts incorrectly, the runtime rounds it because the floating type precision is not enough to handle digit numbers. Klein calculates with less error, but at the same time it works slower than Kahan. Note If you didn't find answer for your question on this page, ask it on gitter ."
  },
  "articles/license.html": {
    "href": "articles/license.html",
    "title": "MIT License | MatrixDotNet",
    "keywords": "MIT License Copyright (c) 2020 Nikolay Hohsadze Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Overview | MatrixDotNet",
    "keywords": "Overview Install Create new console application and install the MatrixDotNet NuGet package. We support: Projects: classic and modern with PackageReferences Runtimes: .NETStandard 2.1, NET Core 3.1+ OS: Windows, Linux, MacOS Languages: C# MatrixDotNet contains three main structures: Matrix Vector MatrixComplex Matrix There are many ways creates of matrix so let's consider the following sample how to create Matrix. Warning It looks like the sample you are looking for does not exist. As you can see class Matrix can assign any type implicit such as one, two dimensional and jugged array. Matrix stores your data in one dimensional array, you can get with happen method GetArray() . MatrixCreateSample.cs Output Warning It looks like the sample you are looking for does not exist. Simple operations of matrix. So, as we know how to create matrix let's to try make routine operations with matrix. Warning It looks like the sample you are looking for does not exist. As you can see thanks overload operators, it's possible write less code and becomes more readable. Output Warning It looks like the sample you are looking for does not exist. Note If you didn't find answer for your question on this page, ask it on gitter ."
  },
  "index.html": {
    "href": "index.html",
    "title": "| MatrixDotNet",
    "keywords": "Features · Getting started · Documentation · Optimization · API Reference MatrixDotNet is a powerful .NET library for calculate matrix. You can install MatrixDotNet via NuGet package . Features Have many algorithms such sections as: factorizations, solving a linear system, conversion matrix, statistics Have algorithms which enhance precision You can write your matrix to markdown or html and open them with happen .dat file MatrixDotNet.Extensions.Core for .NET Core which intended for significant speed calculations on big size matrices, due to SIMD(AVX2,Sse2), unsafe and parallel programming. See MatrixDotNet.Extensions.Core documentation. Have many algorithms such sections as: factorization, solver, conversion matrix, statistics Lets consider several algorithms on each section. Factorizations Solving a linear system Conversion matrix Statistics Factorizations In many applications, it is useful to decompose a matrix using other representations. All decompositions available in namespace MatrixDotNet.Extensions.Decomposition . So lets consider decompositions which supported by MatrixDotNet. LUP decomposition The LU decomposition finds a representation for the square matrix A as: A = LU where L is lower-triangular matrix n x n where U is upper-triangular matrix n x n for example lets take matrix size 3 x 3 Without a proper ordering or permutations in the matrix, the factorization may fail to materialize. For example, it is easy to verify (by expanding the matrix multiplication) that a 11 = l 11 * u 11 If a 11 = 0, then at least one of l 11 and u 11 has to be zero, which implies that either L or U is singular. This is impossible if A is nonsingular (invertible). This is a procedural problem. It can be removed by simply reordering the rows of A so that the first element of the permuted matrix is nonzero. The same problem in subsequent factorization steps can be removed the same way. Lets see LU factorization in MatrixDotNet public class LUSample { public static void Run() { // initialize matrix with random values. Matrix<double> matrix = BuildMatrix.Random(5, 5, -10, 10); // display matrix. matrix.Pretty(); // LU decomposition. matrix.GetLowerUpper(out var lower,out var upper); // display lower-triangular matrix. Console.WriteLine(\"lower-triangular matrix\"); lower.Pretty(); // display upper-triangular matrix. Console.WriteLine(\"upper-triangular matrix\"); upper.Pretty(); // A = LU Console.WriteLine(\"A = LU\"); Console.WriteLine(lower * upper); } } Output Number of rows: 5 Number of columns: 5 -8,00 | 9,00 | -3,00 | 2,00 | 6,00 | 7,00 | -6,00 | -5,00 | -9,00 | 6,00 | 5,00 | 4,00 | 6,00 | -1,00 | -9,00 | -4,00 | 3,00 | -8,00 | -9,00 | 5,00 | 6,00 | 0,00 | 3,00 | 3,00 | 8,00 | lower-triangular matrix Number of rows: 5 Number of columns: 5 1,00 | 0,00 | 0,00 | 0,00 | 0,00 | -0,88 | 1,00 | 0,00 | 0,00 | 0,00 | -0,62 | 5,13 | 1,00 | 0,00 | 0,00 | 0,50 | -0,80 | -0,29 | 1,00 | 0,00 | -0,75 | 3,60 | 0,65 | -1,26 | 1,00 | upper-triangular matrix Number of rows: 5 Number of columns: 5 -8,00 | 9,00 | -3,00 | 2,00 | 6,00 | 0,00 | 1,88 | -7,62 | -7,25 | 11,25 | 0,00 | 0,00 | 43,27 | 37,47 | -63,00 | 0,00 | 0,00 | 0,00 | -4,89 | -7,35 | 0,00 | 0,00 | 0,00 | 0,00 | 3,77 | A = LU -8,00 | 9,00 | -3,00 | 2,00 | 6,00 | 7,00 | -6,00 | -5,00 | -9,00 | 6,00 | 5,00 | 4,00 | 6,00 | -1,00 | -9,00 | -4,00 | 3,00 | -8,00 | -9,00 | 5,00 | 6,00 | 0,00 | 3,00 | 3,00 | 8,00 | LUP decomposition It turns out that a proper permutation in rows (or columns) is sufficient for LU factorization. LU factorization with partial pivoting (LUP) refers often to LU factorization with row permutations only: PA = LU where L and U are again lower and upper triangular matrices, and P is a permutation matrix, which, when left-multiplied to A, reorders the rows of A. It turns out that all square matrices can be factorized in this form, and the factorization is numerically stable in practice.This makes LUP decomposition a useful technique in practice. public class LUPSample { public static void Run() { // initialize matrix with random values. Matrix<double> matrix = BuildMatrix.Random(3, 3, -10, 10); // display matrix. matrix.Pretty(); // LU decomposition. matrix.GetLowerUpperPermutation(out var lower,out var upper,out var perm); // Gets permutation matrix and C = L + U - E. matrix.GetLowerUpperPermutation(out var matrixC,out var matrixP); // display lower-triangular matrix. Console.WriteLine(\"lower-triangular matrix\"); lower.Pretty(); // display upper-triangular matrix. Console.WriteLine(\"upper-triangular matrix\"); upper.Pretty(); // display permutation matrix. Console.WriteLine(\"permutation matrix\"); perm.Pretty(); // display matrix C Console.WriteLine(\"matrix C = L + U - E\"); matrixC.Pretty(); } } Output Number of rows: 3 Number of columns: 3 -8,00 | -6,00 | -1,00 | 5,00 | 6,00 | 6,00 | -1,00 | -2,00 | -5,00 | lower-triangular matrix Number of rows: 3 Number of columns: 3 1,00 | 0,00 | 0,00 | -0,62 | 1,00 | 0,00 | 0,12 | -1,80 | 1,00 | upper-triangular matrix Number of rows: 3 Number of columns: 3 -8,00 | -6,00 | -1,00 | 0,00 | -1,25 | -4,88 | 0,00 | 0,00 | -3,40 | permutation matrix Number of rows: 3 Number of columns: 3 1,00 | 0,00 | 0,00 | 0,00 | 0,00 | 1,00 | 0,00 | 1,00 | 0,00 | matrix C = L + U - E Number of rows: 3 Number of columns: 3 -8,00 | -6,00 | -1,00 | 5,00 | 6,00 | 6,00 | -1,00 | -0,33 | -3,00 | Solving a linear system Kramer solve Cramer's rule is an explicit formula for the solution of a system of linear equations with as many equations as unknowns, valid whenever the system has a unique solution. It expresses the solution in terms of the determinants of the (square) coefficient matrix and of matrices obtained from it by replacing one column by the column vector of right-hand-sides of the equations. public sealed class Program { static void Main(string[] args) { // initialize matrix. double[,] arr = { {5,56,7}, {3,6,3}, {5,9,15} }; Matrix<double> matrix = new Matrix<double>(arr); double[] right = { 1, 23, 5 }; double[] res = matrix.KramerSolve(right); for(var i = 0; i < res.Length; i++) { Console.Write($\"x{i}: {res[i]}\\n\"); } } } Output x0: 12,393939393939394 x1: -0,6637806637806638 x2: -3,3997113997114 Gauss solve Gaussian elimination, also known as row reduction, is an algorithm in linear algebra for solving a system of linear equations. It is usually understood as a sequence of operations performed on the corresponding matrix of coefficients. This method can also be used to find the rank of a matrix, to calculate the determinant of a matrix, and to calculate the inverse of an invertible square matrix. using System; using MatrixDotNet; using MatrixDotNet.Extensions.Solver; namespace Samples.Samples { public class GaussSolveSample { public static void Run() { // initialize matrix. Matrix<double> matrix = new double[,] { {5, 56, 7}, {3, 6, 3}, {5, 9, 15} }; double[] right = { 1, 23, 5 }; double[] res = matrix.GaussSolve(right); for(var i = 0; i < res.Length; i++) { Console.Write($\"x{i}: {res[i]}\\n\"); } } } } Output x0: 12,393939393939394 x1: -0,6637806637806638 x2: -3,3997113997114 Conversion Matrix Conversion of matrix consist in MatrixDotNet.Extensions.Conversion which contains static class MatrixConverter . How change size of Matrix? In this sample i`ll demonstrate how you can add column or row in any position of matrix and reduce them. using System; using MatrixDotNet; using MatrixDotNet.Extensions; using MatrixDotNet.Extensions.Builder; using MatrixDotNet.Extensions.Conversion; namespace Sample { public class ConverterSample { public static void Run() { // Build matrix. Matrix<int> matrix = BuildMatrix.Build(3,3, (x, y) => x + y * y, new[] { 43, 23, 54 }, new[] { 52, 12, 21 }); Console.WriteLine(\"Before conversion:\"); matrix.Pretty(); // Add row to matrix by index. Matrix<int> matrixA = matrix.AddRow(new[] { 1, 2, 3 }, 1); Console.WriteLine(\"Add row to matrix on second row index:\"); matrixA.Pretty(); // Add column to matrix by index. Matrix<int> matrixB = matrix.AddColumn(new[] { 4, 5, 6 }, 2); Console.WriteLine(\"Add column to matrix on second column index:\"); matrixB.Pretty(); // now we will reduce this new column and row. Matrix<int> matrixC = matrix.ReduceColumn(2); Matrix<int> matrixD = matrix.ReduceRow(1); Console.WriteLine(\"After reduce:\"); matrixC.Pretty(); matrixD.Pretty(); // Also in MatrixDotNet you can join two matrix with the same size row length. Matrix<int> matrixF = matrixA.Concat(matrixA); matrixF.Pretty(); } } } Output Before conversion: Number of rows: 3 Number of columns: 3 2747 | 187 | 484 | 2727 | 167 | 464 | 2758 | 198 | 495 | Add row to matrix on second row index: Number of rows: 4 Number of columns: 3 2747 | 187 | 484 | 1 | 2 | 3 | 2727 | 167 | 464 | 2758 | 198 | 495 | Add column to matrix on second column index: Number of rows: 3 Number of columns: 4 2747 | 187 | 4 | 484 | 2727 | 167 | 5 | 464 | 2758 | 198 | 6 | 495 | After reduce: Number of rows: 3 Number of columns: 2 2747 | 187 | 2727 | 167 | 2758 | 198 | Number of rows: 2 Number of columns: 3 2747 | 187 | 484 | 2758 | 198 | 495 | Number of rows: 4 Number of columns: 6 2747 | 187 | 484 | 2747 | 187 | 484 | 1 | 2 | 3 | 1 | 2 | 3 | 2727 | 167 | 464 | 2727 | 167 | 464 | 2758 | 198 | 495 | 2758 | 198 | 495 | How to cast matrix to two-dimensional array? using System; using MatrixDotNet; using MatrixDotNet.Extensions; using MatrixDotNet.Extensions.Builder; using MatrixDotNet.Extensions.Conversion; namespace Sample { public class ConverterSample() { public static void CastRun() { // Build matrix. Matrix<int> matrixA = BuildMatrix.Build(3,3, (x, y) => x + y * y, new[] { 43, 23, 54 }, new[] { 52, 12, 21 }); // If you want cast Matrix to two-dimensional // array use method ToPrimitive. int[,] array = matrixA.ToPrimitive(); // Converts two-dimensional array to Matrix. var matrixB = array.ToMatrix(); } } } As you can see for convert matrix to two-dimensional array you can easily use method ToPrimitive . public class StrassenSample { int[,] matrix = new int[512,512]; int[,] matrix2 = new int[512,512]; private Matrix<int> matrix3; private Matrix<int> matrix4; [GlobalSetup] public void Setup() { Random random = new Random(); Random random2 = new Random(); for (int i = 0; i < matrix.GetLength(0); i++) { for (int j = 0; j < matrix.GetLength(1); j++) { matrix[i, j] = random.Next(1, 10); } } matrix3 = new Matrix<int>(matrix); for (int i = 0; i < matrix2.GetLength(0); i++) { for (int j = 0; j < matrix2.GetLength(1); j++) { matrix2[i, j] = random2.Next(1, 10); } } matrix4 = new Matrix<int>(matrix2); } [Benchmark] public Matrix<int> Default() { return matrix3 * matrix4; } [Benchmark] public Matrix<int> Strassen() { return MatrixExtension.MultiplyStrassen(matrix3, matrix4); } } BenchmarkDotNet=v0.12.1, OS=Windows 10.0.14393.3808 (1607/AnniversaryUpdate/Redstone1) Intel Core i5-8250U CPU 1.60GHz (Kaby Lake R), 1 CPU, 8 logical and 4 physical cores Frequency=1757816 Hz, Resolution=568.8878 ns, Timer=TSC [Host] : .NET Framework 4.8 (4.8.4180.0), X86 LegacyJIT Job-YFITZW : .NET Framework 4.8 (4.8.4180.0), X86 LegacyJIT IterationCount=5 LaunchCount=1 WarmupCount=5 Method Mean Error StdDev Gen 0 Gen 1 Gen 2 Allocated Default 69.88 s 1.241 s 0.322 s - - - 1.01 MB Strassen 43.23 s 0.991 s 0.153 s 30000.0000 5000.0000 2000.0000 174.32 MB As you can see algorithm Strassen multiply works significant faster(x1.625) than default multiply matrix on big size M x N . Statistics In section statistics yo can find any metrics such as minimum, maximum, median. relative frequencies, distribution Also some algorithms works faster to due bit hacks which eliminate branch prediction. Lets consider simple benchmark which measure finding minimum of matrix with bitwise operation and custom. public class MatrixBitMinVsDefaultMin { private int N = 256; private int[,] matrix; private Matrix<int> matrix3; private Random random = new Random(); private int[] arr; [GlobalSetup] public void Setup() { matrix = new int[N,N]; arr = new int[N]; // init matrix random data for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { matrix[i, j] = random.Next(-255, 255); } } matrix3 = new Matrix<int>(matrix); } [Benchmark] public void DefaultMin() { for (int i = 0; i < N; i++) { arr[i] = matrix3.Min(); } } [Benchmark] public void BitMin() { for (int i = 0; i < N; i++) { arr[i] = matrix3.BitMin(); } } } BenchmarkDotNet=v0.12.1, OS=Windows 10.0.14393.3808 (1607/AnniversaryUpdate/Redstone1) Intel Core i5-8250U CPU 1.60GHz (Kaby Lake R), 1 CPU, 8 logical and 4 physical cores Frequency=1757816 Hz, Resolution=568.8878 ns, Timer=TSC [Host] : .NET Framework 4.8 (4.8.4180.0), X86 LegacyJIT DefaultJob : .NET Framework 4.8 (4.8.4180.0), X86 LegacyJIT Method Mean Error StdDev Code Size DefaultMin 1,117.2 ms 12.93 ms 11.46 ms 292 B BitMin 646.5 ms 4.16 ms 3.25 ms 165 B As you can see BitMin() method works faster(x1.725) than DefaultMin(). Because we eliminate branch prediction. See more information about Bitwise operations in article . Note If you didn't find answer for your question on this page, ask it on gitter ."
  },
  "articles/features/getting_started.html": {
    "href": "articles/features/getting_started.html",
    "title": "Works with big size matrix overview. | MatrixDotNet",
    "keywords": "Works with big size matrix overview. Sometimes there are cases when matrix size very big, speed calculation may be about 20-30 minutes. For this cases created MatrixDotNet.Extensions.Core . Overview Install Create new console application and install the MatrixDotNet NuGet package and MatrixDotNet.Extensions.Core . We support: Projects: classic and modern with PackageReferences Runtimes: .NET Core (3.1+) OS: Windows, Linux, MacOS Languages: C# Design namespace MatrixDotNet.Extensions.Core MatrixDotNet.Extensions.Core divided by two namespace: Unsafe and Simd . Unsafe Unsafe namespace use unsafe programming which more functionality than Simd . unsafe programming significant increase calculation matrix. Lets consider simple operations add two matrices. using BenchmarkDotNet.Attributes; using MatrixDotNet; using MatrixDotNet.Extensions.Builder; using MatrixDotNet.Extensions.Core.Optimization.Unsafe; namespace Sample { [RyuJitX64Job] public class AddMatrix { private Matrix<int> _matrixA; private Matrix<int> _matrixB; [GlobalSetup] public void Setup() { _matrixA = BuildMatrix.Random<int>(1024,1024,1,10); _matrixB = BuildMatrix.Random<int>(1024, 1024,1,10); } [Benchmark] public Matrix<int> DefaultAdd() { return _matrixA + _matrixB; } [Benchmark] public Matrix<int> UnsafeAdd() { return UnsafeMatrix.Add(_matrixA, _matrixB); } } } BenchmarkDotNet=v0.12.1, OS=Windows 10.0.14393.3866 (1607/AnniversaryUpdate/Redstone1) Intel Core i5-8250U CPU 1.60GHz (Kaby Lake R), 1 CPU, 8 logical and 4 physical cores Frequency=1757813 Hz, Resolution=568.8887 ns, Timer=TSC .NET Core SDK=3.1.400 [Host] : .NET Core 3.1.6 (CoreCLR 4.700.20.26901, CoreFX 4.700.20.31603), X64 RyuJIT RyuJitX64 : .NET Core 3.1.6 (CoreCLR 4.700.20.26901, CoreFX 4.700.20.31603), X64 RyuJIT Job=RyuJitX64 Jit=RyuJit Platform=X64 Method Mean Error StdDev DefaultAdd 115.288 ms 0.8163 ms 0.9073 ms UnsafeAdd 1.279 ms 0.0253 ms 0.0602 ms As you can see unsafe add two matrices calculates significant faster. SIMD Simd namespace use single instruction - multiple data . SIMD - it is instructions which works with vector and can increase performance 2x - 8x speed calculations. using BenchmarkDotNet.Attributes; using MatrixDotNet; using MatrixDotNet.Extensions.Builder; using MatrixDotNet.Extensions.Core.Optimization.Simd; using MatrixDotNet.Extensions.Core.Optimization.Unsafe; namespace Sample { public class SimdSample { private Matrix<int> _matrixA; private Matrix<int> _matrixB; [GlobalSetup] public void Setup() { _matrixA = BuildMatrix.Random<int>(1024,1024,1,10); _matrixB = _matrixA.Clone() as Matrix<int>; } [Benchmark] public bool Equals() { return _matrixA == _matrixB; } [Benchmark] public bool EqualsSimd() { return Simd.Equals(_matrixA, _matrixB); } [Benchmark] public bool EqualsUnsafe() { return UnsafeMatrix.Equals(_matrixA, _matrixB); } } } BenchmarkDotNet=v0.12.1, OS=Windows 10.0.14393.3866 (1607/AnniversaryUpdate/Redstone1) Intel Core i5-8250U CPU 1.60GHz (Kaby Lake R), 1 CPU, 8 logical and 4 physical cores Frequency=1757813 Hz, Resolution=568.8887 ns, Timer=TSC .NET Core SDK=3.1.400 [Host] : .NET Core 3.1.6 (CoreCLR 4.700.20.26901, CoreFX 4.700.20.31603), X64 RyuJIT DefaultJob : .NET Core 3.1.6 (CoreCLR 4.700.20.26901, CoreFX 4.700.20.31603), X64 RyuJIT Method Mean Error StdDev Equals 36,472.6 μs 216.83 μs 181.06 μs EqualsSimd 449.4 μs 3.73 μs 3.31 μs EqualsUnsafe 523.9 μs 3.06 μs 2.71 μs As you can see SIMD faster equals unsafe and default. If you have anu question, you can ask it on gitter"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "MatrixDotNet API Reference | MatrixDotNet",
    "keywords": "MatrixDotNet API Reference"
  },
  "api/MatrixDotNet.Extensions.Options.html": {
    "href": "api/MatrixDotNet.Extensions.Options.html",
    "title": "Namespace MatrixDotNet.Extensions.Options | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Extensions.Options Classes Template TemplateHtml TemplateMarkdown"
  },
  "api/MatrixDotNet.Extensions.Statistics.TableSetup.IConfig-1.html": {
    "href": "api/MatrixDotNet.Extensions.Statistics.TableSetup.IConfig-1.html",
    "title": "Interface IConfig<T> | MatrixDotNet",
    "keywords": "Interface IConfig<T> Namespace : MatrixDotNet.Extensions.Statistics.TableSetup Assembly : MatrixDotNet.dll Syntax public interface IConfig<T> where T : struct Type Parameters Name Description T Properties | Improve this Doc View Source Matrix Gets matrix. Declaration Matrix<T> Matrix { get; } Property Value Type Description Matrix <T>"
  },
  "api/MatrixDotNet.Extensions.Complement.html": {
    "href": "api/MatrixDotNet.Extensions.Complement.html",
    "title": "Namespace MatrixDotNet.Extensions.Complement | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Extensions.Complement Classes MatrixExtension"
  },
  "api/MatrixDotNet.Extensions.Statistics.html": {
    "href": "api/MatrixDotNet.Extensions.Statistics.html",
    "title": "Namespace MatrixDotNet.Extensions.Statistics | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Extensions.Statistics Classes Intervals<T> Represents calculations any statistics operations where first two columns are TableIntervals . MatrixExtension Represents the functional of bit operations with a matrix Variations<T> Represents calculations any variations operations. Enums EmpiricalSample"
  },
  "api/MatrixDotNet.Extensions.Sorting.MatrixSortExtension.html": {
    "href": "api/MatrixDotNet.Extensions.Sorting.MatrixSortExtension.html",
    "title": "Class MatrixSortExtension | MatrixDotNet",
    "keywords": "Class MatrixSortExtension Inheritance System.Object MatrixSortExtension Namespace : MatrixDotNet.Extensions.Sorting Assembly : MatrixDotNet.dll Syntax public static class MatrixSortExtension : object Methods | Improve this Doc View Source Sort<T>(Matrix<T>) Declaration public static void Sort<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix Type Parameters Name Description T | Improve this Doc View Source Sort<T>(Matrix<T>, IComparer<T>) Declaration public static void Sort<T>(this Matrix<T> matrix, IComparer<T> comparer) where T : struct Parameters Type Name Description Matrix <T> matrix IComparer <T> comparer Type Parameters Name Description T | Improve this Doc View Source SortByColumns<T>(Matrix<T>) Declaration public static void SortByColumns<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix Type Parameters Name Description T | Improve this Doc View Source SortByColumns<T>(Matrix<T>, IComparer<T>) Declaration public static void SortByColumns<T>(this Matrix<T> matrix, IComparer<T> comparer) where T : struct Parameters Type Name Description Matrix <T> matrix IComparer <T> comparer Type Parameters Name Description T | Improve this Doc View Source SortByRows<T>(Matrix<T>) Declaration public static void SortByRows<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix Type Parameters Name Description T | Improve this Doc View Source SortByRows<T>(Matrix<T>, IComparer<T>) Declaration public static void SortByRows<T>(this Matrix<T> matrix, IComparer<T> comparer) where T : struct Parameters Type Name Description Matrix <T> matrix IComparer <T> comparer Type Parameters Name Description T"
  },
  "api/MatrixDotNet.Exceptions.html": {
    "href": "api/MatrixDotNet.Exceptions.html",
    "title": "Namespace MatrixDotNet.Exceptions | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Exceptions Classes MatrixDotNetException Represent exception for Matrix<T>"
  },
  "api/MatrixDotNet.Extensions.Statistics.Intervals-1.html": {
    "href": "api/MatrixDotNet.Extensions.Statistics.Intervals-1.html",
    "title": "Class Intervals<T> | MatrixDotNet",
    "keywords": "Class Intervals<T> Represents calculations any statistics operations where first two columns are TableIntervals . Inheritance System.Object Setup <T> SetupIntervals <T> Intervals<T> Inherited Members SetupIntervals<T>.Intervals SetupIntervals<T>.GetIndexColumn(TableIntervals) SetupIntervals<T>.IsCorrectInterval() Setup<T>.Matrix Setup<T>.ColumnNames Setup<T>.ColumnNumber Setup<T>.FindColumn(Int32) Namespace : MatrixDotNet.Extensions.Statistics Assembly : MatrixDotNet.dll Syntax public sealed class Intervals<T> : SetupIntervals<T> where T : struct Type Parameters Name Description T unmanaged type Constructors | Improve this Doc View Source Intervals(ConfigIntervals<T>) Initialize matrix with columns intervals. Declaration public Intervals(ConfigIntervals<T> config) Parameters Type Name Description ConfigIntervals <T> config the configuration. Exceptions Type Condition MatrixDotNetException throws exception if columns of matrix less than 3, throws exception if length Intervals length more than matrix column. Properties | Improve this Doc View Source AccumulatedFrequency Gets accumulated frequency. Declaration public T[] AccumulatedFrequency { get; } Property Value Type Description T[] Accumulated frequency. | Improve this Doc View Source LengthModalInterval Gets Length modal interval. Declaration public T LengthModalInterval { get; } Property Value Type Description T | Improve this Doc View Source LowBoundModalInterval Gets low bound modal interval. Declaration public T LowBoundModalInterval { get; } Property Value Type Description T | Improve this Doc View Source MaxFrequency Gets max frequency. Declaration public T MaxFrequency { get; } Property Value Type Description T | Improve this Doc View Source MedianInterval Gets median interval. Declaration public T MedianInterval { get; } Property Value Type Description T | Improve this Doc View Source ModalInterval Gets modal interval. Declaration public T ModalInterval { get; } Property Value Type Description T | Improve this Doc View Source NextFrequency Gets next frequency after max frequency in column Ni. Declaration public T NextFrequency { get; } Property Value Type Description T | Improve this Doc View Source PreviousAccumulatedFrequency Gets previous accumulated frequency Declaration public T PreviousAccumulatedFrequency { get; } Property Value Type Description T | Improve this Doc View Source PreviousFrequency Gets previous frequency before max frequency in column Ni. Declaration public T PreviousFrequency { get; } Property Value Type Description T | Improve this Doc View Source VolumeStatisticalPopulation Gets volume of the statistical population Declaration public T VolumeStatisticalPopulation { get; } Property Value Type Description T Methods | Improve this Doc View Source GetIntervalRowMean() Gets interval row mean value. Declaration public T GetIntervalRowMean() Returns Type Description T interval row mean value."
  },
  "api/MatrixDotNet.Extensions.Statistics.TableSetup.TableIntervals.html": {
    "href": "api/MatrixDotNet.Extensions.Statistics.TableSetup.TableIntervals.html",
    "title": "Enum TableIntervals | MatrixDotNet",
    "keywords": "Enum TableIntervals Represents columns for matrix intervals. Namespace : MatrixDotNet.Extensions.Statistics.TableSetup Assembly : MatrixDotNet.dll Syntax public enum TableIntervals : int Fields Name Description Column IntervalFirst IntervalSecond Ni Xi"
  },
  "api/MatrixDotNet.Extensions.Core.Simd.Statistics.html": {
    "href": "api/MatrixDotNet.Extensions.Core.Simd.Statistics.html",
    "title": "Namespace MatrixDotNet.Extensions.Core.Simd.Statistics | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Extensions.Core.Simd.Statistics Classes Simd"
  },
  "api/MatrixDotNet.Extensions.html": {
    "href": "api/MatrixDotNet.Extensions.html",
    "title": "Namespace MatrixDotNet.Extensions | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Extensions Classes MatrixExtension Represents Matrix extension."
  },
  "api/MatrixDotNet.Extensions.Statistics.MatrixExtension.html": {
    "href": "api/MatrixDotNet.Extensions.Statistics.MatrixExtension.html",
    "title": "Class MatrixExtension | MatrixDotNet",
    "keywords": "Class MatrixExtension Represents the functional of bit operations with a matrix Inheritance System.Object MatrixExtension Namespace : MatrixDotNet.Extensions.Statistics Assembly : MatrixDotNet.dll Syntax public static class MatrixExtension : object Methods | Improve this Doc View Source BitMax(Matrix<Byte>) Gets maximum of matrix with happen bitwise operations. Declaration public static int BitMax(this Matrix<byte> matrix) Parameters Type Name Description Matrix < System.Byte > matrix the matrix. Returns Type Description System.Int32 maximum of matrix. | Improve this Doc View Source BitMax(Matrix<Int16>) Gets maximum of matrix with happen bitwise operations. Declaration public static int BitMax(this Matrix<short> matrix) Parameters Type Name Description Matrix < System.Int16 > matrix the matrix. Returns Type Description System.Int32 maximum of matrix. | Improve this Doc View Source BitMax(Matrix<Int32>) Gets maximum of matrix with happen bitwise operations. Declaration public static int BitMax(this Matrix<int> matrix) Parameters Type Name Description Matrix < System.Int32 > matrix the matrix. Returns Type Description System.Int32 maximum of matrix. | Improve this Doc View Source BitMax(Matrix<Int64>) Gets maximum of matrix with happen bitwise operations. Declaration public static long BitMax(this Matrix<long> matrix) Parameters Type Name Description Matrix < System.Int64 > matrix the matrix. Returns Type Description System.Int64 maximum of matrix. | Improve this Doc View Source BitMaxByColumn(Matrix<Byte>, Int32) Gets maximum value by column index with happen bitwise operations. Declaration public static int BitMaxByColumn(this Matrix<byte> matrix, int dimension) Parameters Type Name Description Matrix < System.Byte > matrix the matrix. System.Int32 dimension column index. Returns Type Description System.Int32 maximum value by column. | Improve this Doc View Source BitMaxByColumn(Matrix<Int16>, Int32) Gets maximum value by column index with happen bitwise operations. Declaration public static int BitMaxByColumn(this Matrix<short> matrix, int dimension) Parameters Type Name Description Matrix < System.Int16 > matrix the matrix. System.Int32 dimension column index. Returns Type Description System.Int32 maximum value by column. | Improve this Doc View Source BitMaxByColumn(Matrix<Int32>, Int32) Gets maximum value by column index with happen bitwise operations. Declaration public static int BitMaxByColumn(this Matrix<int> matrix, int dimension) Parameters Type Name Description Matrix < System.Int32 > matrix the matrix. System.Int32 dimension column index. Returns Type Description System.Int32 maximum value by column. | Improve this Doc View Source BitMaxByColumn(Matrix<Int64>, Int32) Gets maximum value by column index with happen bitwise operations. Declaration public static long BitMaxByColumn(this Matrix<long> matrix, int dimension) Parameters Type Name Description Matrix < System.Int64 > matrix the matrix. System.Int32 dimension column index. Returns Type Description System.Int64 maximum value by column. | Improve this Doc View Source BitMaxByRow(Matrix<Byte>, Int32) Gets maximum value by row index with happen bitwise operations. Declaration public static int BitMaxByRow(this Matrix<byte> matrix, int dimension) Parameters Type Name Description Matrix < System.Byte > matrix the matrix. System.Int32 dimension row index. Returns Type Description System.Int32 maximum value by row. | Improve this Doc View Source BitMaxByRow(Matrix<Int16>, Int32) Gets maximum value by row index with happen bitwise operations. Declaration public static int BitMaxByRow(this Matrix<short> matrix, int dimension) Parameters Type Name Description Matrix < System.Int16 > matrix the matrix. System.Int32 dimension row index. Returns Type Description System.Int32 maximum value by row. | Improve this Doc View Source BitMaxByRow(Matrix<Int32>, Int32) Gets maximum value by row index with happen bitwise operations. Declaration public static int BitMaxByRow(this Matrix<int> matrix, int dimension) Parameters Type Name Description Matrix < System.Int32 > matrix the matrix. System.Int32 dimension row index. Returns Type Description System.Int32 maximum value by row. | Improve this Doc View Source BitMaxByRow(Matrix<Int64>, Int32) Gets maximum value by row index with happen bitwise operations. Declaration public static long BitMaxByRow(this Matrix<long> matrix, int dimension) Parameters Type Name Description Matrix < System.Int64 > matrix the matrix. System.Int32 dimension row index. Returns Type Description System.Int64 maximum value by row. | Improve this Doc View Source BitMin(Matrix<Byte>) Gets minimum of matrix with happen bitwise operations. Declaration public static int BitMin(this Matrix<byte> matrix) Parameters Type Name Description Matrix < System.Byte > matrix the matrix. Returns Type Description System.Int32 Minimum of matrix. | Improve this Doc View Source BitMin(Matrix<Int16>) Gets minimum of matrix with happen bitwise operations. Declaration public static int BitMin(this Matrix<short> matrix) Parameters Type Name Description Matrix < System.Int16 > matrix the matrix. Returns Type Description System.Int32 Minimum of matrix. | Improve this Doc View Source BitMin(Matrix<Int32>) Gets minimum of matrix with happen bitwise operations. Declaration public static int BitMin(this Matrix<int> matrix) Parameters Type Name Description Matrix < System.Int32 > matrix the matrix. Returns Type Description System.Int32 Minimum of matrix. | Improve this Doc View Source BitMin(Matrix<Int64>) Gets minimum of matrix with happen bitwise operations. Declaration public static long BitMin(this Matrix<long> matrix) Parameters Type Name Description Matrix < System.Int64 > matrix the matrix. Returns Type Description System.Int64 Minimum of matrix. | Improve this Doc View Source BitMinByColumn(Matrix<Byte>, Int32) Gets minimum value by column index with happen bitwise operations. Declaration public static int BitMinByColumn(this Matrix<byte> matrix, int dimension) Parameters Type Name Description Matrix < System.Byte > matrix the matrix. System.Int32 dimension column index. Returns Type Description System.Int32 minimum value by column. | Improve this Doc View Source BitMinByColumn(Matrix<Int16>, Int32) Gets minimum value by column index with happen bitwise operations. Declaration public static int BitMinByColumn(this Matrix<short> matrix, int dimension) Parameters Type Name Description Matrix < System.Int16 > matrix the matrix. System.Int32 dimension column index. Returns Type Description System.Int32 minimum value by column. | Improve this Doc View Source BitMinByColumn(Matrix<Int32>, Int32) Gets minimum value by column index with happen bitwise operations. Declaration public static int BitMinByColumn(this Matrix<int> matrix, int dimension) Parameters Type Name Description Matrix < System.Int32 > matrix the matrix. System.Int32 dimension column index. Returns Type Description System.Int32 minimum value by column. | Improve this Doc View Source BitMinByColumn(Matrix<Int64>, Int32) Gets minimum value by column index with happen bitwise operations. Declaration public static long BitMinByColumn(this Matrix<long> matrix, int dimension) Parameters Type Name Description Matrix < System.Int64 > matrix the matrix. System.Int32 dimension column index. Returns Type Description System.Int64 minimum value by column. | Improve this Doc View Source BitMinByRow(Matrix<Byte>, Int32) Gets maximum value by row index with happen bitwise operations. Declaration public static int BitMinByRow(this Matrix<byte> matrix, int dimension) Parameters Type Name Description Matrix < System.Byte > matrix the matrix. System.Int32 dimension row index. Returns Type Description System.Int32 maximum value by row. | Improve this Doc View Source BitMinByRow(Matrix<Int16>, Int32) Gets maximum value by row index with happen bitwise operations. Declaration public static int BitMinByRow(this Matrix<short> matrix, int dimension) Parameters Type Name Description Matrix < System.Int16 > matrix the matrix. System.Int32 dimension row index. Returns Type Description System.Int32 maximum value by row. | Improve this Doc View Source BitMinByRow(Matrix<Int32>, Int32) Gets maximum value by row index with happen bitwise operations. Declaration public static int BitMinByRow(this Matrix<int> matrix, int dimension) Parameters Type Name Description Matrix < System.Int32 > matrix the matrix. System.Int32 dimension row index. Returns Type Description System.Int32 maximum value by row. | Improve this Doc View Source BitMinByRow(Matrix<Int64>, Int32) Gets minimum value by row index with happen bitwise operations. Declaration public static long BitMinByRow(this Matrix<long> matrix, int dimension) Parameters Type Name Description Matrix < System.Int64 > matrix the matrix. System.Int32 dimension row index. Returns Type Description System.Int64 minimum value by row. | Improve this Doc View Source Max<T>(Matrix<T>) Gets maximum value of matrix. Declaration public static T Max<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description T maximum of matrix. Type Parameters Name Description T unmanaged type | Improve this Doc View Source MaxByColumn<T>(Matrix<T>, Int32) Gets maximum value of matrix by column index. Declaration public static T MaxByColumn<T>(this Matrix<T> matrix, int dimension) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix System.Int32 dimension the index column. Returns Type Description T Type Parameters Name Description T unmanaged type. | Improve this Doc View Source MaxByColumn<T>(Matrix<T>, Int32, out Int32) Gets maximum value of matrix by column index. Declaration public static T MaxByColumn<T>(this Matrix<T> matrix, int dimension, out int index) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix System.Int32 dimension the index column. System.Int32 index index row. Returns Type Description T Type Parameters Name Description T unmanaged type. | Improve this Doc View Source MaxByMainDiagonal<T>(Matrix<T>) Gets maximum by diagonal. Declaration public static T MaxByMainDiagonal<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description T Type Parameters Name Description T unmanaged type. | Improve this Doc View Source MaxByRow<T>(Matrix<T>, Int32) Gets maximum value of matrix by row index. Declaration public static T MaxByRow<T>(this Matrix<T> matrix, int dimension) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. System.Int32 dimension the index row. Returns Type Description T Maximum element by index row. Type Parameters Name Description T unmanaged type. | Improve this Doc View Source MaxColumns<T>(Matrix<T>) Gets maximum value by each column. Declaration public static T[] MaxColumns<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix Returns Type Description T[] Array which contains maximum values of each column. Type Parameters Name Description T unmanaged type | Improve this Doc View Source MaxRows<T>(Matrix<T>) Gets maximum value by each row. Declaration public static T[] MaxRows<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description T[] Type Parameters Name Description T unmanaged type | Improve this Doc View Source Mean<T>(Matrix<T>) Gets mean value whole matrix. Declaration public static T Mean<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description T mean value. Type Parameters Name Description T unmanaged type. | Improve this Doc View Source MeanByColumn<T>(Matrix<T>, Int32) Gets mean value by column. Declaration public static T MeanByColumn<T>(this Matrix<T> matrix, int index) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. System.Int32 index the column index. Returns Type Description T mean value by column. Type Parameters Name Description T unmanaged type. | Improve this Doc View Source MeanByColumns<T>(Matrix<T>) Gets mean value by each row. Declaration public static T[] MeanByColumns<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description T[] mean value by each row. Type Parameters Name Description T unmanaged type. | Improve this Doc View Source MeanByRow<T>(Matrix<T>, Int32) Gets mean value by row. Declaration public static T MeanByRow<T>(this Matrix<T> matrix, int index) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. System.Int32 index the row index. Returns Type Description T mean value by row Type Parameters Name Description T unmanaged type. | Improve this Doc View Source MeanByRows<T>(Matrix<T>) Gets mean value by each row. Declaration public static T[] MeanByRows<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description T[] mean value by each row. Type Parameters Name Description T unmanaged type. | Improve this Doc View Source Min<T>(Matrix<T>) Gets minimum value of matrix. Declaration public static T Min<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description T minimum of matrix. Type Parameters Name Description T unmanaged type | Improve this Doc View Source MinByColumn<T>(Matrix<T>, Int32) Gets minimum value of matrix by column index. Declaration public static T MinByColumn<T>(this Matrix<T> matrix, int dimension) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix System.Int32 dimension the index column. Returns Type Description T Minimum value by column index. Type Parameters Name Description T unmanaged type. | Improve this Doc View Source MinByRow<T>(Matrix<T>, Int32) Gets minimum value of matrix by row index. Declaration public static T MinByRow<T>(this Matrix<T> matrix, int dimension) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. System.Int32 dimension the index row. Returns Type Description T Minimum element by index row. Type Parameters Name Description T unmanaged type. | Improve this Doc View Source MinColumns<T>(Matrix<T>) Gets minimum value by each column. Declaration public static T[] MinColumns<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix Returns Type Description T[] Array which contains maximum values of each column. Type Parameters Name Description T unmanaged type | Improve this Doc View Source MinRows<T>(Matrix<T>) Gets minimum value by each row. Declaration public static T[] MinRows<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description T[] The matrix. Type Parameters Name Description T unmanaged type."
  },
  "api/MatrixDotNet.Extensions.Solver.Solve.html": {
    "href": "api/MatrixDotNet.Extensions.Solver.Solve.html",
    "title": "Class Solve | MatrixDotNet",
    "keywords": "Class Solve Inheritance System.Object Solve Namespace : MatrixDotNet.Extensions.Solver Assembly : MatrixDotNet.dll Syntax public static class Solve : object Methods | Improve this Doc View Source GaussSolve(Matrix<Double>, Double[]) Gets determinant matrix by Gauss`s algorithm. Declaration public static double[] GaussSolve(this Matrix<double> A1, double[] b1) Parameters Type Name Description Matrix < System.Double > A1 the matrix A. System.Double [] b1 the matrix B. Returns Type Description System.Double [] | Improve this Doc View Source KramerSolve(Matrix<Double>, Double[]) Gets determinant matrix by Kramer algorithm. Declaration public static double[] KramerSolve(this Matrix<double> matrix, double[] arr) Parameters Type Name Description Matrix < System.Double > matrix matrix. System.Double [] arr array. Returns Type Description System.Double [] Gets array x. Exceptions Type Condition MatrixDotNetException array length not equal matrix rows. | Improve this Doc View Source KramerSolve(Matrix<Single>, Single[]) Gets determinant matrix by Kramer algorithm. Declaration public static float[] KramerSolve(this Matrix<float> matrix, float[] arr) Parameters Type Name Description Matrix < System.Single > matrix matrix. System.Single [] arr array. Returns Type Description System.Single [] Gets array x. Exceptions Type Condition MatrixDotNetException array length not equal matrix rows. | Improve this Doc View Source KramerSolve<T>(Matrix<T>, T[]) Gets determinant matrix by Kramer algorithm. Declaration public static double[] KramerSolve<T>(this Matrix<T> matrix, T[] arr) where T : struct Parameters Type Name Description Matrix <T> matrix matrix. T[] arr array. Returns Type Description System.Double [] Gets array x. Type Parameters Name Description T unmanaged type. Exceptions Type Condition MatrixDotNetException array length not equal matrix rows."
  },
  "api/MatrixDotNet.Extensions.Performance.Operations.Optimization.html": {
    "href": "api/MatrixDotNet.Extensions.Performance.Operations.Optimization.html",
    "title": "Class Optimization | MatrixDotNet",
    "keywords": "Class Optimization Inheritance System.Object Optimization Namespace : MatrixDotNet.Extensions.Performance.Operations Assembly : MatrixDotNet.dll Syntax public static class Optimization : object Methods | Improve this Doc View Source Add(Matrix<Double>, Matrix<Double>) Add two matrices by elements. Declaration public static Matrix<double> Add(Matrix<double> matrixA, Matrix<double> matrixB) Parameters Type Name Description Matrix < System.Double > matrixA Matrix < System.Double > matrixB Returns Type Description Matrix < System.Double > | Improve this Doc View Source Add(Matrix<Int32>, Matrix<Int32>) Add two matrices by elements. Declaration public static Matrix<int> Add(Matrix<int> matrixA, Matrix<int> matrixB) Parameters Type Name Description Matrix < System.Int32 > matrixA Matrix < System.Int32 > matrixB Returns Type Description Matrix < System.Int32 > | Improve this Doc View Source Add(Matrix<Int64>, Matrix<Int64>) Add two matrices by elements. Declaration public static Matrix<long> Add(Matrix<long> matrixA, Matrix<long> matrixB) Parameters Type Name Description Matrix < System.Int64 > matrixA Matrix < System.Int64 > matrixB Returns Type Description Matrix < System.Int64 > | Improve this Doc View Source Add(Matrix<Single>, Matrix<Single>) Add two matrices by elements. Declaration public static Matrix<float> Add(Matrix<float> matrixA, Matrix<float> matrixB) Parameters Type Name Description Matrix < System.Single > matrixA Matrix < System.Single > matrixB Returns Type Description Matrix < System.Single > | Improve this Doc View Source Equals(Matrix<Double>, Matrix<Double>) Declaration public static bool Equals(Matrix<double> matrixA, Matrix<double> matrixB) Parameters Type Name Description Matrix < System.Double > matrixA Matrix < System.Double > matrixB Returns Type Description System.Boolean | Improve this Doc View Source Equals(Matrix<Int32>, Matrix<Int32>) Declaration public static bool Equals(Matrix<int> matrixA, Matrix<int> matrixB) Parameters Type Name Description Matrix < System.Int32 > matrixA Matrix < System.Int32 > matrixB Returns Type Description System.Boolean | Improve this Doc View Source Equals(Matrix<Int64>, Matrix<Int64>) Declaration public static bool Equals(Matrix<long> matrixA, Matrix<long> matrixB) Parameters Type Name Description Matrix < System.Int64 > matrixA Matrix < System.Int64 > matrixB Returns Type Description System.Boolean | Improve this Doc View Source Equals(Matrix<Single>, Matrix<Single>) Declaration public static bool Equals(Matrix<float> matrixA, Matrix<float> matrixB) Parameters Type Name Description Matrix < System.Single > matrixA Matrix < System.Single > matrixB Returns Type Description System.Boolean | Improve this Doc View Source Multiply(Matrix<Double>, Matrix<Double>) Declaration public static Matrix<double> Multiply(Matrix<double> matrixA, Matrix<double> matrixB) Parameters Type Name Description Matrix < System.Double > matrixA Matrix < System.Double > matrixB Returns Type Description Matrix < System.Double > | Improve this Doc View Source Multiply(Matrix<Int32>, Matrix<Int32>) Declaration public static Matrix<int> Multiply(Matrix<int> matrixA, Matrix<int> matrixB) Parameters Type Name Description Matrix < System.Int32 > matrixA Matrix < System.Int32 > matrixB Returns Type Description Matrix < System.Int32 > | Improve this Doc View Source MultiplyStrassen(Matrix<Double>, Matrix<Double>) Declaration public static Matrix<double> MultiplyStrassen(Matrix<double> a, Matrix<double> b) Parameters Type Name Description Matrix < System.Double > a Matrix < System.Double > b Returns Type Description Matrix < System.Double > | Improve this Doc View Source MultiplyStrassenAsync(Matrix<Int32>, Matrix<Int32>) Declaration public static Task<Matrix<int>> MultiplyStrassenAsync(Matrix<int> a, Matrix<int> b) Parameters Type Name Description Matrix < System.Int32 > a Matrix < System.Int32 > b Returns Type Description Task < Matrix < System.Int32 >> | Improve this Doc View Source Sub(Matrix<Double>, Matrix<Double>) Subtract two matrices. Declaration public static Matrix<double> Sub(Matrix<double> matrixA, Matrix<double> matrixB) Parameters Type Name Description Matrix < System.Double > matrixA the matrix A. Matrix < System.Double > matrixB the matrix B. Returns Type Description Matrix < System.Double > create new matrix which gets from subtract two matrices. Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source Sub(Matrix<Int32>, Matrix<Int32>) Subtract two matrices. Declaration public static Matrix<int> Sub(Matrix<int> matrixA, Matrix<int> matrixB) Parameters Type Name Description Matrix < System.Int32 > matrixA the matrix A. Matrix < System.Int32 > matrixB the matrix B. Returns Type Description Matrix < System.Int32 > create new matrix which gets from subtract two matrices. Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source Sub(Matrix<Int64>, Matrix<Int64>) Subtract two matrices. Declaration public static Matrix<long> Sub(Matrix<long> matrixA, Matrix<long> matrixB) Parameters Type Name Description Matrix < System.Int64 > matrixA the matrix A. Matrix < System.Int64 > matrixB the matrix B. Returns Type Description Matrix < System.Int64 > create new matrix which gets from subtract two matrices. Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source Sub(Matrix<Single>, Matrix<Single>) Subtract two matrices. Declaration public static Matrix<float> Sub(Matrix<float> matrixA, Matrix<float> matrixB) Parameters Type Name Description Matrix < System.Single > matrixA the matrix A. Matrix < System.Single > matrixB the matrix B. Returns Type Description Matrix < System.Single > create new matrix which gets from subtract two matrices. Exceptions Type Condition MatrixDotNetException"
  },
  "api/MatrixDotNet.Math.html": {
    "href": "api/MatrixDotNet.Math.html",
    "title": "Namespace MatrixDotNet.Math | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Math Classes MathExtension MathGeneric MathGeneric<T> MathGeneric<T1, T2, TR> MathUnsafe<T>"
  },
  "api/MatrixDotNet.Matrix-1.html": {
    "href": "api/MatrixDotNet.Matrix-1.html",
    "title": "Class Matrix<T> | MatrixDotNet",
    "keywords": "Class Matrix<T> Represents math matrix. Inheritance System.Object Matrix<T> Implements IEnumerable <T> Namespace : MatrixDotNet Assembly : MatrixDotNet.dll Syntax public sealed class Matrix<T> : ICloneable, IEnumerable<T> where T : struct Type Parameters Name Description T integral type. Constructors | Improve this Doc View Source Matrix(T[,]) Initialize matrix. Declaration public Matrix(T[, ] matrix) Parameters Type Name Description T[,] matrix the matrix. | Improve this Doc View Source Matrix(Int32, Int32) Creates matrix. Declaration public Matrix(int row, int col) Parameters Type Name Description System.Int32 row row System.Int32 col col | Improve this Doc View Source Matrix(Int32, Int32, T) Creates matrix with init constant value. Declaration public Matrix(int row, int col, T value) Parameters Type Name Description System.Int32 row row System.Int32 col col T value constant Properties | Improve this Doc View Source Columns Gets length columns of matrix. Declaration public int Columns { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsPrime Checks for pairing of matrix. Declaration public bool IsPrime { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSquare Checks square matrix. Declaration public bool IsSquare { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSymmetric Checks for symmetric matrix. Declaration public bool IsSymmetric { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Gets or sets array by row. Declaration public T[] this[int i] { get; set; } Parameters Type Name Description System.Int32 i the row Property Value Type Description T[] | Improve this Doc View Source Item[Int32, State] Gets or sets array by rows or columns. Declaration public T[] this[int i, State dimension] { get; set; } Parameters Type Name Description System.Int32 i State dimension Property Value Type Description T[] | Improve this Doc View Source Item[Int32, Int32] Gets element matrix. Declaration public T this[int i, int j] { get; set; } Parameters Type Name Description System.Int32 i the index by rows. System.Int32 j the index by columns. Property Value Type Description T | Improve this Doc View Source Item[Int32, Int32, State] Declaration public T this[int m, int n, State dimension] { get; set; } Parameters Type Name Description System.Int32 m System.Int32 n State dimension Property Value Type Description T | Improve this Doc View Source Length Gets length matrix. Declaration public int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Rows Gets length row of matrix. Declaration public int Rows { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Clone() Clones matrix. Declaration public object Clone() Returns Type Description System.Object object. | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetArray() Declaration public T[] GetArray() Returns Type Description T[] | Improve this Doc View Source GetByRef(Int32, Int32) Declaration public T GetByRef(int i, int j) Parameters Type Name Description System.Int32 i System.Int32 j Returns Type Description T | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source Plus(Matrix<T>, Matrix<T>) Declaration public static Matrix<T> Plus(Matrix<T> left, Matrix<T> right) Parameters Type Name Description Matrix <T> left Matrix <T> right Returns Type Description Matrix <T> | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Operators | Improve this Doc View Source Addition(Matrix<T>, Matrix<T>) Add operation of two matrix. Declaration public static Matrix<T> operator +(Matrix<T> left, Matrix<T> right) Parameters Type Name Description Matrix <T> left left matrix. Matrix <T> right right matrix. Returns Type Description Matrix <T> Matrix<T> Exceptions Type Condition MatrixDotNetException Length of two matrix not equal. | Improve this Doc View Source Division(T, Matrix<T>) Divide operation matrix on digit left side. Declaration public static Matrix<T> operator /(T digit, Matrix<T> matrix) Parameters Type Name Description T digit Matrix <T> matrix Returns Type Description Matrix <T> | Improve this Doc View Source Division(Matrix<T>, T) Divide operation matrix on digit right side. Declaration public static Matrix<T> operator /(Matrix<T> matrix, T digit) Parameters Type Name Description Matrix <T> matrix T digit Returns Type Description Matrix <T> | Improve this Doc View Source Equality(Matrix<T>, Matrix<T>) Compares all values left matrix with right matrix. Returns true if left matrix full equals right matrix. Declaration public static bool operator ==(Matrix<T> left, Matrix<T> right) Parameters Type Name Description Matrix <T> left matrix A Matrix <T> right matrix B Returns Type Description System.Boolean | Improve this Doc View Source Implicit(T[][] to Matrix<T>) Implicit assign matrix. Declaration public static implicit operator Matrix<T>(T[][] matrix) Parameters Type Name Description T[][] matrix Returns Type Description Matrix <T> | Improve this Doc View Source Implicit(T[,] to Matrix<T>) Implicit assign matrix. Declaration public static implicit operator Matrix<T>(T[, ] matrix) Parameters Type Name Description T[,] matrix Returns Type Description Matrix <T> | Improve this Doc View Source Inequality(Matrix<T>, Matrix<T>) Compares all values left matrix with right matrix. Returns true if minimum one element of left matrix not equals right matrix. Declaration public static bool operator !=(Matrix<T> left, Matrix<T> right) Parameters Type Name Description Matrix <T> left Matrix <T> right Returns Type Description System.Boolean | Improve this Doc View Source Multiply(T, Matrix<T>) Multiply operation matrix on digit left side. Declaration public static Matrix<T> operator *(T digit, Matrix<T> matrix) Parameters Type Name Description T digit digit Matrix <T> matrix matrix Returns Type Description Matrix <T> Matrix<T> | Improve this Doc View Source Multiply(T[], Matrix<T>) Returns vector sum of each multiply element of row. Declaration public static T[] operator *(T[] array, Matrix<T> matrix) Parameters Type Name Description T[] array array. Matrix <T> matrix matrix. Returns Type Description T[] sum of each multiply element of row. Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source Multiply(Matrix<T>, T) Multiply operation matrix on digit right side. Declaration public static Matrix<T> operator *(Matrix<T> matrix, T digit) Parameters Type Name Description Matrix <T> matrix matrix. T digit digit. Returns Type Description Matrix <T> Matrix<T> | Improve this Doc View Source Multiply(Matrix<T>, T[]) Returns vector sum of each multiply element of row. Declaration public static T[] operator *(Matrix<T> matrix, T[] array) Parameters Type Name Description Matrix <T> matrix matrix. T[] array array. Returns Type Description T[] sum of each multiply element of row. Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source Multiply(Matrix<T>, Matrix<T>) Multiply operation of two matrix. Declaration public static Matrix<T> operator *(Matrix<T> left, Matrix<T> right) Parameters Type Name Description Matrix <T> left Matrix <T> right Returns Type Description Matrix <T> Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source Multiply(Matrix<T>, Vector<T>) Returns vector sum of each multiply element of row. Declaration public static Vector<T> operator *(Matrix<T> matrix, Vector<T> vector) Parameters Type Name Description Matrix <T> matrix matrix. Vector <T> vector vector. Returns Type Description Vector <T> sum of each multiply element of row. Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source Multiply(Vector<T>, Matrix<T>) Returns vector sum of each multiply element of row. Declaration public static Vector<T> operator *(Vector<T> vector, Matrix<T> matrix) Parameters Type Name Description Vector <T> vector vector. Matrix <T> matrix matrix. Returns Type Description Vector <T> sum of each multiply element of row. Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source Subtraction(Matrix<T>, Matrix<T>) Subtract operation of two matrix. Declaration public static Matrix<T> operator -(Matrix<T> left, Matrix<T> right) Parameters Type Name Description Matrix <T> left left matrix. Matrix <T> right right matrix. Returns Type Description Matrix <T> Matrix<T> . Exceptions Type Condition MatrixDotNetException Length of two matrix not equal. Implements IEnumerable<> Extension Methods MatrixExtension.GetRow<T>(Matrix<T>, Int32) MatrixExtension.GetColumn<T>(Matrix<T>, Int32) MatrixExtension.GetDiagonal<T>(Matrix<T>) MatrixExtension.SetDiagonal<T>(Matrix<T>, T[]) MatrixExtension.Pow<T>(Matrix<T>, UInt32) MatrixExtension.PowStrassen<T>(Matrix<T>, UInt32) MatrixExtension.LNorm<T>(Matrix<T>) MatrixExtension.MNorm<T>(Matrix<T>) MatrixExtension.Traceless<T>(Matrix<T>) MatrixExtension.NormFrobenius<T>(Matrix<T>) MatrixExtension.Pretty<T>(Matrix<T>) MatrixExtension.SaveAsync<T>(Matrix<T>, Template) MatrixExtension.SaveAndOpenAsync<T>(Matrix<T>, Template) MatrixExtension.Sum<T>(Matrix<T>) MatrixExtension.SumByRow<T>(Matrix<T>, Int32) MatrixExtension.SumByColumn<T>(Matrix<T>, Int32) MatrixExtension.SumByRows<T>(Matrix<T>) MatrixExtension.SumByColumns<T>(Matrix<T>) MatrixExtension.SumByDiagonal<T>(Matrix<T>) MatrixExtension.GetKleinSum<T>(Matrix<T>) MatrixExtension.GetKleinSum<T>(Matrix<T>, Int32, State) MatrixExtension.GetKahanSum<T>(Matrix<T>) MatrixExtension.GetKahanSum<T>(Matrix<T>, Int32, State) BuildMatrix.CreateIdentityMatrix<T>(Matrix<T>) BuildMatrix.GetMinorMatrix<T>(Matrix<T>) BuildMatrix.GetMinorMatrix<T>(Matrix<T>, Int32, Int32) BuildMatrix.GetMinor<T>(Matrix<T>, Int32) BuildMatrix.GetCornerMinor<T>(Matrix<T>, Int32) MatrixExtension.AlgebraicComplement<T>(Matrix<T>) MatrixConverter.Clone<T>(Matrix<T>) MatrixConverter.Concat<T>(Matrix<T>, Matrix<T>) MatrixConverter.ToPrimitive<T>(Matrix<T>) MatrixConverter.ReduceColumn<T>(Matrix<T>, UInt32) MatrixConverter.ReduceRow<T>(Matrix<T>, UInt32) MatrixConverter.AddColumn<T>(Matrix<T>, T[], Int32) MatrixConverter.AddRow<T>(Matrix<T>, T[], Int32) MatrixConverter.ToIdentityMatrix<T>(Matrix<T>) MatrixConverter.SwapRows<T>(Matrix<T>, Int32, Int32) MatrixConverter.SwapColumns<T>(Matrix<T>, Int32, Int32) MatrixConverter.Transpose<T>(Matrix<T>) MatrixConverter.SplitMatrix<T>(Matrix<T>, out Matrix<T>, out Matrix<T>, out Matrix<T>, out Matrix<T>) Decomposition.LqDecomposition<T>(Matrix<T>, out Matrix<T>, out Matrix<T>) Decomposition.GetLowerUpper<T>(Matrix<T>, out Matrix<T>, out Matrix<T>) Decomposition.GetLower<T>(Matrix<T>) Decomposition.GetUpper<T>(Matrix<T>) Decomposition.GetLowerUpperPermutation<T>(Matrix<T>, out Matrix<T>, out Matrix<T>) Decomposition.QrDecomposition<T>(Matrix<T>, out Matrix<T>, out Matrix<T>) Decomposition.EigenVectorQrIterative<T>(Matrix<T>, Double, Int32, out Matrix<T>, out Matrix<T>) Decomposition.ProcessGrammShmidtByRows<T>(Matrix<T>) Decomposition.ProcessGrammShmidtByColumns<T>(Matrix<T>) Decomposition.GetNormByColumns<T>(Matrix<T>) Decomposition.GetNormByRows<T>(Matrix<T>) Decomposition.IsIdentity<T>(Matrix<T>) Decomposition.GetQuasiTriangular<T>(Matrix<T>) Determinant.GetLowerUpperDeterminant<T>(Matrix<T>) Determinant.GetDoubleDeterminant<T>(Matrix<T>) Determinant.GetDeterminant<T>(Matrix<T>) Determinant.GetCornerMinorDeterminant<T>(Matrix<T>, Int32) Solve.KramerSolve<T>(Matrix<T>, T[]) MatrixSortExtension.Sort<T>(Matrix<T>) MatrixSortExtension.Sort<T>(Matrix<T>, IComparer<T>) MatrixSortExtension.SortByRows<T>(Matrix<T>) MatrixSortExtension.SortByRows<T>(Matrix<T>, IComparer<T>) MatrixSortExtension.SortByColumns<T>(Matrix<T>) MatrixSortExtension.SortByColumns<T>(Matrix<T>, IComparer<T>) MatrixExtension.Max<T>(Matrix<T>) MatrixExtension.MaxByRow<T>(Matrix<T>, Int32) MatrixExtension.MaxByColumn<T>(Matrix<T>, Int32) MatrixExtension.MaxByColumn<T>(Matrix<T>, Int32, out Int32) MatrixExtension.MaxRows<T>(Matrix<T>) MatrixExtension.MaxColumns<T>(Matrix<T>) MatrixExtension.MaxByMainDiagonal<T>(Matrix<T>) MatrixExtension.Mean<T>(Matrix<T>) MatrixExtension.MeanByRow<T>(Matrix<T>, Int32) MatrixExtension.MeanByColumn<T>(Matrix<T>, Int32) MatrixExtension.MeanByRows<T>(Matrix<T>) MatrixExtension.MeanByColumns<T>(Matrix<T>) MatrixExtension.Min<T>(Matrix<T>) MatrixExtension.MinByRow<T>(Matrix<T>, Int32) MatrixExtension.MinByColumn<T>(Matrix<T>, Int32) MatrixExtension.MinColumns<T>(Matrix<T>) MatrixExtension.MinRows<T>(Matrix<T>)"
  },
  "api/MatrixDotNet.Extensions.Core.Extensions.Conversion.Converter.html": {
    "href": "api/MatrixDotNet.Extensions.Core.Extensions.Conversion.Converter.html",
    "title": "Struct Converter | MatrixDotNet",
    "keywords": "Struct Converter Represents conversion operations for matrix with fixed buffer size. Namespace : MatrixDotNet.Extensions.Core.Extensions.Conversion Assembly : MatrixDotNet.NetCore.dll Syntax public struct Converter Methods | Improve this Doc View Source AddColumn(ref MatrixAsFixedBuffer, Double[], Int32) Adds column for matrix with fixed buffer size. Declaration public static MatrixAsFixedBuffer AddColumn(ref MatrixAsFixedBuffer matrix, double[] data, int index) Parameters Type Name Description MatrixAsFixedBuffer matrix the matrix. System.Double [] data the data. System.Int32 index the column index. Returns Type Description MatrixAsFixedBuffer Matrix with new column. Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source AddRow(ref MatrixAsFixedBuffer, Double[], Int32) Adds row for matrix with fixed buffer size. Declaration public static MatrixAsFixedBuffer AddRow(ref MatrixAsFixedBuffer matrix, double[] data, int index) Parameters Type Name Description MatrixAsFixedBuffer matrix the matrix System.Double [] data the data which assign by index System.Int32 index the row index Returns Type Description MatrixAsFixedBuffer Matrix with new row. Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source CopyTo(ref MatrixAsFixedBuffer, Int32, Int32, ref MatrixAsFixedBuffer, Int32, Int32, Int32) Copy matrix to by some criteria. Declaration public static void CopyTo(ref MatrixAsFixedBuffer matrix1, int dimension1, int start, ref MatrixAsFixedBuffer matrix2, int dimension2, int destinationIndex, int length) Parameters Type Name Description MatrixAsFixedBuffer matrix1 the matrix1 System.Int32 dimension1 row index of matrix1 System.Int32 start start index by row of matrix1 MatrixAsFixedBuffer matrix2 the matrix2 System.Int32 dimension2 row index of matrix2 System.Int32 destinationIndex start index by row of matrix2 System.Int32 length the length of copy data | Improve this Doc View Source CopyToAvx(ref MatrixAsFixedBuffer, Int32, Int32, ref MatrixAsFixedBuffer, Int32, Int32, Int32) Copy matrix to by some criteria via AVX2. Declaration public static void CopyToAvx(ref MatrixAsFixedBuffer matrix1, int dimension1, int start, ref MatrixAsFixedBuffer matrix2, int dimension2, int destinationIndex, int length) Parameters Type Name Description MatrixAsFixedBuffer matrix1 the matrix1 System.Int32 dimension1 row index of matrix1 System.Int32 start start index by row of matrix1 MatrixAsFixedBuffer matrix2 the matrix2 System.Int32 dimension2 row index of matrix2 System.Int32 destinationIndex start index by row of matrix2 System.Int32 length the length of copy data | Improve this Doc View Source SwapColumns(ref MatrixAsFixedBuffer, Int32, Int32) Swaps columns with happen AVX2 or Unsafe swap. Declaration public static void SwapColumns(ref MatrixAsFixedBuffer matrix, int from, int to) Parameters Type Name Description MatrixAsFixedBuffer matrix the matrix with fixed buffer System.Int32 from the index of column. System.Int32 to the index of column. | Improve this Doc View Source SwapRows(ref MatrixAsFixedBuffer, Int32, Int32) Swaps rows with happen AVX2 or Unsafe swap. Declaration public static void SwapRows(ref MatrixAsFixedBuffer matrix, int from, int to) Parameters Type Name Description MatrixAsFixedBuffer matrix the matrix with fixed buffer System.Int32 from the index of row. System.Int32 to the index of row."
  },
  "api/MatrixDotNet.Extensions.Statistics.TableSetup.SetupIntervals-1.html": {
    "href": "api/MatrixDotNet.Extensions.Statistics.TableSetup.SetupIntervals-1.html",
    "title": "Class SetupIntervals<T> | MatrixDotNet",
    "keywords": "Class SetupIntervals<T> Represents store data such as matrix, tables. Share interval operations. Inheritance System.Object Setup <T> SetupIntervals<T> Intervals<T> Inherited Members Setup<T>.Matrix Setup<T>.ColumnNames Setup<T>.ColumnNumber Setup<T>.FindColumn(Int32) Namespace : MatrixDotNet.Extensions.Statistics.TableSetup Assembly : MatrixDotNet.dll Syntax public abstract class SetupIntervals<T> : Setup<T> where T : struct Type Parameters Name Description T Constructors | Improve this Doc View Source SetupIntervals(ConfigIntervals<T>) Initialize settings for Intervals Declaration protected SetupIntervals(ConfigIntervals<T> config) Parameters Type Name Description ConfigIntervals <T> config configuration Properties | Improve this Doc View Source Intervals Gets table intervals. Declaration protected TableIntervals[] Intervals { get; } Property Value Type Description TableIntervals [] Methods | Improve this Doc View Source GetIndexColumn(TableIntervals) Gets index column in matrix. Declaration protected int GetIndexColumn(TableIntervals tableIntervals) Parameters Type Name Description TableIntervals tableIntervals the table Returns Type Description System.Int32 | Improve this Doc View Source IsCorrectInterval() Checks matrix on correct intervals. Declaration protected bool IsCorrectInterval() Returns Type Description System.Boolean"
  },
  "api/MatrixDotNet.Extensions.Inverse.html": {
    "href": "api/MatrixDotNet.Extensions.Inverse.html",
    "title": "Namespace MatrixDotNet.Extensions.Inverse | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Extensions.Inverse Classes MatrixExtension"
  },
  "api/MatrixDotNet.State.html": {
    "href": "api/MatrixDotNet.State.html",
    "title": "Enum State | MatrixDotNet",
    "keywords": "Enum State State column or row Namespace : MatrixDotNet Assembly : MatrixDotNet.dll Syntax public enum State : int Fields Name Description Column Row"
  },
  "api/MatrixDotNet.html": {
    "href": "api/MatrixDotNet.html",
    "title": "Namespace MatrixDotNet | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet Classes Matrix<T> Represents math matrix. MatrixComplex Vector<T> VectorExtension Structs Matrix<T>.Enumerator Represents implementations IEnumerator. Enums State State column or row"
  },
  "api/MatrixDotNet.VectorExtension.html": {
    "href": "api/MatrixDotNet.VectorExtension.html",
    "title": "Class VectorExtension | MatrixDotNet",
    "keywords": "Class VectorExtension Inheritance System.Object VectorExtension Namespace : MatrixDotNet Assembly : MatrixDotNet.dll Syntax public static class VectorExtension : object Methods | Improve this Doc View Source Max<T>(Vector<T>) Declaration public static T Max<T>(this Vector<T> vector) where T : struct Parameters Type Name Description Vector <T> vector Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Min<T>(Vector<T>) Declaration public static T Min<T>(this Vector<T> vector) where T : struct Parameters Type Name Description Vector <T> vector Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Sort<T>(Vector<T>) Declaration public static void Sort<T>(this Vector<T> vector) where T : struct Parameters Type Name Description Vector <T> vector Type Parameters Name Description T"
  },
  "api/MatrixDotNet.Extensions.MatrixExtension.html": {
    "href": "api/MatrixDotNet.Extensions.MatrixExtension.html",
    "title": "Class MatrixExtension | MatrixDotNet",
    "keywords": "Class MatrixExtension Represents Matrix extension. Inheritance System.Object MatrixExtension Namespace : MatrixDotNet.Extensions Assembly : MatrixDotNet.dll Syntax public static class MatrixExtension : object Methods | Improve this Doc View Source GetColumn<T>(Matrix<T>, Int32) Gets column array of matrix by columns index. Declaration public static T[] GetColumn<T>(this Matrix<T> matrix, int index) where T : struct Parameters Type Name Description Matrix <T> matrix matrix. System.Int32 index index. Returns Type Description T[] column by index Type Parameters Name Description T unmanaged type. | Improve this Doc View Source GetDiagonal<T>(Matrix<T>) Gets diagonal of matrix. Declaration public static T[] GetDiagonal<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description T[] the diagonal of matrix. Type Parameters Name Description T unmanaged type | Improve this Doc View Source GetKahanSum<T>(Matrix<T>) Declaration public static T GetKahanSum<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetKahanSum<T>(Matrix<T>, Int32, State) Declaration public static T GetKahanSum<T>(this Matrix<T> matrix, int dimension, State state = State.Row) where T : struct Parameters Type Name Description Matrix <T> matrix System.Int32 dimension State state Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetKleinSum<T>(Matrix<T>) Declaration public static T GetKleinSum<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetKleinSum<T>(Matrix<T>, Int32, State) Declaration public static T GetKleinSum<T>(this Matrix<T> matrix, int dimension, State state = State.Row) where T : struct Parameters Type Name Description Matrix <T> matrix System.Int32 dimension State state Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetRow<T>(Matrix<T>, Int32) Gets row array of matrix by row index. Declaration public static T[] GetRow<T>(this Matrix<T> matrix, int index) where T : struct Parameters Type Name Description Matrix <T> matrix System.Int32 index Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source LNorm<T>(Matrix<T>) Gets l-norm. Declaration public static T LNorm<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description T l-norm. Type Parameters Name Description T unmanaged type. | Improve this Doc View Source MNorm<T>(Matrix<T>) Gets m-norm. Declaration public static T MNorm<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description T m-norm. Type Parameters Name Description T unmanaged type. | Improve this Doc View Source MultiplyStrassen<T>(Matrix<T>, Matrix<T>) Strassen`s multiply, use when matrix rows > 32. Declaration public static Matrix<T> MultiplyStrassen<T>(Matrix<T> a, Matrix<T> b) where T : struct Parameters Type Name Description Matrix <T> a the matrix a. Matrix <T> b the matrix b. Returns Type Description Matrix <T> the new matrix from multiply of two matrices. Type Parameters Name Description T unmanaged type. | Improve this Doc View Source NormFrobenius<T>(Matrix<T>) Declaration public static T NormFrobenius<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source OpenBinaryAsync<T>(Template) Declaration public static Task<Matrix<T>> OpenBinaryAsync<T>(Template template) where T : struct Parameters Type Name Description Template template Returns Type Description Task < Matrix <T>> Type Parameters Name Description T | Improve this Doc View Source Pow<T>(Matrix<T>, UInt32) Raises a matrix to a power. Declaration public static Matrix<T> Pow<T>(this Matrix<T> matrix, uint degree) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix System.UInt32 degree the degree Returns Type Description Matrix <T> Pow Type Parameters Name Description T unmanaged type Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source PowStrassen<T>(Matrix<T>, UInt32) Raises a matrix to a power. Declaration public static Matrix<T> PowStrassen<T>(this Matrix<T> matrix, uint degree) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix System.UInt32 degree the degree Returns Type Description Matrix <T> Pow Type Parameters Name Description T unmanaged type Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source Pretty<T>(Matrix<T>) Pretty output. Declaration public static void Pretty<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix which to display. Type Parameters Name Description T unmanaged type. | Improve this Doc View Source SaveAndOpenAsync<T>(Matrix<T>, Template) Declaration public static Task SaveAndOpenAsync<T>(this Matrix<T> matrix, Template template) where T : struct Parameters Type Name Description Matrix <T> matrix Template template Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source SaveAsync<T>(Matrix<T>, Template) Saves matrix to html or markdown. Declaration public static Task SaveAsync<T>(this Matrix<T> matrix, Template template) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Template template config for creates html or markdown. Returns Type Description Task Saves matrix to html or markdown. Type Parameters Name Description T unmanaged type | Improve this Doc View Source SetDiagonal<T>(Matrix<T>, T[]) Sets diagonal value. Declaration public static void SetDiagonal<T>(this Matrix<T> matrix, T[] array) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. T[] array the vector which we want to set diagonal of matrix. Type Parameters Name Description T unmanaged type. Exceptions Type Condition MatrixDotNetException throws exception if Length of matrix not equal matrix Min(Rows,Columns) . | Improve this Doc View Source Sum<T>(Matrix<T>) Summation matrix. Declaration public static T Sum<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description T Sum whole of matrix. Type Parameters Name Description T unmanaged type. | Improve this Doc View Source SumByColumn<T>(Matrix<T>, Int32) Gets sum by column of matrix. Declaration public static T SumByColumn<T>(this Matrix<T> matrix, int dimension) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. System.Int32 dimension column index. Returns Type Description T Sum column by index Type Parameters Name Description T unmanaged type. | Improve this Doc View Source SumByColumns<T>(Matrix<T>) Gets array of sum columns. Declaration public static T[] SumByColumns<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description T[] Type Parameters Name Description T unmanaged type. | Improve this Doc View Source SumByDiagonal<T>(Matrix<T>) Gets sum by diagonal. Declaration public static T SumByDiagonal<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source SumByRow<T>(Matrix<T>, Int32) Gets sum by row of matrix. Declaration public static T SumByRow<T>(this Matrix<T> matrix, int dimension) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. System.Int32 dimension row index. Returns Type Description T Sum row by index Type Parameters Name Description T unmanaged type. | Improve this Doc View Source SumByRows<T>(Matrix<T>) Gets array of sum rows. Declaration public static T[] SumByRows<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description T[] Type Parameters Name Description T unmanaged type. | Improve this Doc View Source Traceless<T>(Matrix<T>) The trace Tr of a square matrix A is defined to be the sum of elements on the main diagonal. Declaration public static T Traceless<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description T Traceless of matrix. Type Parameters Name Description T unmanaged type."
  },
  "api/MatrixDotNet.Extensions.Statistics.TableSetup.ConfigVariations-1.html": {
    "href": "api/MatrixDotNet.Extensions.Statistics.TableSetup.ConfigVariations-1.html",
    "title": "Class ConfigVariations<T> | MatrixDotNet",
    "keywords": "Class ConfigVariations<T> Represents configuration for Variations Inheritance System.Object ConfigVariations<T> Implements IConfig <T> Namespace : MatrixDotNet.Extensions.Statistics.TableSetup Assembly : MatrixDotNet.dll Syntax public class ConfigVariations<T> : object, IConfig<T> where T : struct Type Parameters Name Description T unmanaged type Constructors | Improve this Doc View Source ConfigVariations(Matrix<T>, TableVariations[]) Initialize matrix and table for variations. Declaration public ConfigVariations(Matrix<T> matrix, TableVariations[] variations) Parameters Type Name Description Matrix <T> matrix the matrix. TableVariations [] variations the variations Properties | Improve this Doc View Source Matrix Declaration public Matrix<T> Matrix { get; } Property Value Type Description Matrix <T> | Improve this Doc View Source Variations Gets Variations. Declaration public TableVariations[] Variations { get; } Property Value Type Description TableVariations [] Implements IConfig<T>"
  },
  "api/MatrixDotNet.Math.MathGeneric-3.html": {
    "href": "api/MatrixDotNet.Math.MathGeneric-3.html",
    "title": "Class MathGeneric<T1, T2, TR> | MatrixDotNet",
    "keywords": "Class MathGeneric<T1, T2, TR> Inheritance System.Object MathGeneric<T1, T2, TR> Namespace : MatrixDotNet.Math Assembly : MatrixDotNet.Math.dll Syntax public static class MathGeneric<T1, T2, TR> : object Type Parameters Name Description T1 T2 TR Methods | Improve this Doc View Source Add(T1, T2) Declaration public static TR Add(T1 left, T2 right) Parameters Type Name Description T1 left T2 right Returns Type Description TR | Improve this Doc View Source Divide(T1, T2) Declaration public static TR Divide(T1 left, T2 right) Parameters Type Name Description T1 left T2 right Returns Type Description TR | Improve this Doc View Source GetAddFunc() Declaration public static Func<T1, T2, TR> GetAddFunc() Returns Type Description Func <T1, T2, TR> | Improve this Doc View Source GetDivideFunc() Declaration public static Func<T1, T2, TR> GetDivideFunc() Returns Type Description Func <T1, T2, TR> | Improve this Doc View Source GetMultiplyFunc() Declaration public static Func<T1, T2, TR> GetMultiplyFunc() Returns Type Description Func <T1, T2, TR> | Improve this Doc View Source GetSubFunc() Declaration public static Func<T1, T2, TR> GetSubFunc() Returns Type Description Func <T1, T2, TR> | Improve this Doc View Source Multiply(T1, T2) Declaration public static TR Multiply(T1 left, T2 right) Parameters Type Name Description T1 left T2 right Returns Type Description TR | Improve this Doc View Source Sub(T1, T2) Declaration public static TR Sub(T1 left, T2 right) Parameters Type Name Description T1 left T2 right Returns Type Description TR"
  },
  "api/MatrixDotNet.Extensions.Core.html": {
    "href": "api/MatrixDotNet.Extensions.Core.html",
    "title": "Namespace MatrixDotNet.Extensions.Core | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Extensions.Core Structs MatrixAsFixedBuffer"
  },
  "api/MatrixDotNet.Extensions.Core.Simd.Statistics.Simd.html": {
    "href": "api/MatrixDotNet.Extensions.Core.Simd.Statistics.Simd.html",
    "title": "Class Simd | MatrixDotNet",
    "keywords": "Class Simd Inheritance System.Object Simd Namespace : MatrixDotNet.Extensions.Core.Simd.Statistics Assembly : MatrixDotNet.NetCore.dll Syntax public static class Simd : object Methods | Improve this Doc View Source Max(Matrix<Double>) Declaration public static double Max(this Matrix<double> matrix) Parameters Type Name Description Matrix < System.Double > matrix Returns Type Description System.Double | Improve this Doc View Source Max(Matrix<Int32>) Declaration public static int Max(this Matrix<int> matrix) Parameters Type Name Description Matrix < System.Int32 > matrix Returns Type Description System.Int32 | Improve this Doc View Source Max(Matrix<Single>) Declaration public static float Max(this Matrix<float> matrix) Parameters Type Name Description Matrix < System.Single > matrix Returns Type Description System.Single | Improve this Doc View Source Min(Matrix<Double>) Declaration public static double Min(this Matrix<double> matrix) Parameters Type Name Description Matrix < System.Double > matrix Returns Type Description System.Double | Improve this Doc View Source Min(Matrix<Int32>) Declaration public static int Min(this Matrix<int> matrix) Parameters Type Name Description Matrix < System.Int32 > matrix Returns Type Description System.Int32 | Improve this Doc View Source Min(Matrix<Single>) Declaration public static float Min(this Matrix<float> matrix) Parameters Type Name Description Matrix < System.Single > matrix Returns Type Description System.Single"
  },
  "api/MatrixDotNet.Extensions.Statistics.TableSetup.ConfigIntervals-1.html": {
    "href": "api/MatrixDotNet.Extensions.Statistics.TableSetup.ConfigIntervals-1.html",
    "title": "Class ConfigIntervals<T> | MatrixDotNet",
    "keywords": "Class ConfigIntervals<T> Represents configuration for Intervals Inheritance System.Object ConfigIntervals<T> Implements IConfig <T> Namespace : MatrixDotNet.Extensions.Statistics.TableSetup Assembly : MatrixDotNet.dll Syntax public class ConfigIntervals<T> : object, IConfig<T> where T : struct Type Parameters Name Description T unmanaged type Constructors | Improve this Doc View Source ConfigIntervals(Matrix<T>, TableIntervals[]) Initialize matrix and table for intervals. Declaration public ConfigIntervals(Matrix<T> matrix, TableIntervals[] intervals) Parameters Type Name Description Matrix <T> matrix the matrix. TableIntervals [] intervals the intervals. Properties | Improve this Doc View Source Intervals Gets intervals for matrix columns. Declaration public TableIntervals[] Intervals { get; } Property Value Type Description TableIntervals [] | Improve this Doc View Source Matrix Declaration public Matrix<T> Matrix { get; } Property Value Type Description Matrix <T> Implements IConfig<T>"
  },
  "api/MatrixDotNet.Extensions.Complement.MatrixExtension.html": {
    "href": "api/MatrixDotNet.Extensions.Complement.MatrixExtension.html",
    "title": "Class MatrixExtension | MatrixDotNet",
    "keywords": "Class MatrixExtension Inheritance System.Object MatrixExtension Namespace : MatrixDotNet.Extensions.Complement Assembly : MatrixDotNet.dll Syntax public static class MatrixExtension : object Methods | Improve this Doc View Source AlgebraicComplement<T>(Matrix<T>) Gets algebraic complement. Declaration public static Matrix<T> AlgebraicComplement<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description Matrix <T> Type Parameters Name Description T unmanaged type. | Improve this Doc View Source SchurComplement(Matrix<Decimal>, out Matrix<Decimal>) Schur's complement is a square matrix obtained by splitting a square matrix into four parts. Declaration public static Matrix<decimal> SchurComplement(this Matrix<decimal> matrix, out Matrix<decimal> a11) Parameters Type Name Description Matrix < System.Decimal > matrix the matrix. Matrix < System.Decimal > a11 Returns Type Description Matrix < System.Decimal > | Improve this Doc View Source SchurComplement(Matrix<Double>, out Matrix<Double>) Schur's complement is a square matrix obtained by splitting a square matrix into four parts. Declaration public static Matrix<double> SchurComplement(this Matrix<double> matrix, out Matrix<double> a11) Parameters Type Name Description Matrix < System.Double > matrix the matrix. Matrix < System.Double > a11 first part of matrix Returns Type Description Matrix < System.Double > | Improve this Doc View Source SchurComplement(Matrix<Single>, out Matrix<Single>) Schur's complement is a square matrix obtained by splitting a square matrix into four parts. Declaration public static Matrix<float> SchurComplement(this Matrix<float> matrix, out Matrix<float> a11) Parameters Type Name Description Matrix < System.Single > matrix the matrix. Matrix < System.Single > a11 Returns Type Description Matrix < System.Single >"
  },
  "api/MatrixDotNet.Extensions.Conversion.MatrixConverter.html": {
    "href": "api/MatrixDotNet.Extensions.Conversion.MatrixConverter.html",
    "title": "Class MatrixConverter | MatrixDotNet",
    "keywords": "Class MatrixConverter Represents converter which can change matrix. Inheritance System.Object MatrixConverter Namespace : MatrixDotNet.Extensions.Conversion Assembly : MatrixDotNet.dll Syntax public static class MatrixConverter : object Methods | Improve this Doc View Source AddColumn<T>(Matrix<T>, T[], Int32) Add column of matrix by index. Declaration public static Matrix<T> AddColumn<T>(this Matrix<T> matrix, T[] arr, int column) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. T[] arr the array. System.Int32 column column index. Returns Type Description Matrix <T> A new matrix with new column. Type Parameters Name Description T unmanaged type. | Improve this Doc View Source AddRow<T>(Matrix<T>, T[], Int32) Returns new matrix with added row. Declaration public static Matrix<T> AddRow<T>(this Matrix<T> matrix, T[] array, int row) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix T[] array the row for new matrix System.Int32 row index of row Returns Type Description Matrix <T> Type Parameters Name Description T unmanaged type Exceptions Type Condition MatrixDotNetException | Improve this Doc View Source Clone<T>(Matrix<T>) Declaration public static Matrix<T> Clone<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix Returns Type Description Matrix <T> Type Parameters Name Description T | Improve this Doc View Source CollectMatrix<T>(Matrix<T>, Matrix<T>, Matrix<T>, Matrix<T>) Collects square matrix. Declaration public static Matrix<T> CollectMatrix<T>(Matrix<T> a11, Matrix<T> a12, Matrix<T> a21, Matrix<T> a22) where T : struct Parameters Type Name Description Matrix <T> a11 the matrix a11 Matrix <T> a12 the matrix a12 Matrix <T> a21 the matrix a21 Matrix <T> a22 the matrix a22 Returns Type Description Matrix <T> Collect matrix. Type Parameters Name Description T unmanaged type | Improve this Doc View Source Concat<T>(Matrix<T>, Matrix<T>) Joins two matrix, matrix A rows must be equals matrix B rows. Declaration public static Matrix<T> Concat<T>(this Matrix<T> matrix1, Matrix<T> matrix2) where T : struct Parameters Type Name Description Matrix <T> matrix1 The matrix A. Matrix <T> matrix2 The matrix B. Returns Type Description Matrix <T> Joins two matrix Type Parameters Name Description T unmanaged type. Exceptions Type Condition MatrixDotNetException Throws if matrix1.Rows != matrix2.Rows. | Improve this Doc View Source CopyTo<T>(Matrix<T>, Int32, Int32, Matrix<T>, Int32, Int32, Int32) Copy to matrix. Declaration public static void CopyTo<T>(Matrix<T> matrix1, int dimension1, int start, Matrix<T> matrix2, int dimension2, int destinationIndex, int length) where T : struct Parameters Type Name Description Matrix <T> matrix1 copy from matrix. System.Int32 dimension1 dimension matrix1. System.Int32 start start index which start copy. Matrix <T> matrix2 copy to matrix. System.Int32 dimension2 dimension matrix2 System.Int32 destinationIndex start index. System.Int32 length length copy. Type Parameters Name Description T unmanaged type | Improve this Doc View Source CopyTo<T>(State, Matrix<T>, Int32, Int32, Matrix<T>, Int32, Int32, Int32) Copy to matrix by row or column. Declaration public static void CopyTo<T>(State state, Matrix<T> matrix1, int dimension1, int start, Matrix<T> matrix2, int dimension2, int destinationIndex, int length) where T : struct Parameters Type Name Description State state row or column. Matrix <T> matrix1 copy from matrix. System.Int32 dimension1 dimension matrix1. System.Int32 start start index which start copy. Matrix <T> matrix2 copy to matrix. System.Int32 dimension2 dimension matrix2 System.Int32 destinationIndex start index. System.Int32 length length copy. Type Parameters Name Description T unmanaged type | Improve this Doc View Source ReduceColumn<T>(Matrix<T>, UInt32) Reduces column of matrix by index. Declaration public static Matrix<T> ReduceColumn<T>(this Matrix<T> matrix, uint column) where T : struct Parameters Type Name Description Matrix <T> matrix The matrix. System.UInt32 column The index of matrix which reduce column. Returns Type Description Matrix <T> A new matrix without the chosen column. Type Parameters Name Description T Unmanaged type. | Improve this Doc View Source ReduceRow<T>(Matrix<T>, UInt32) Reduces row of matrix by index. Declaration public static Matrix<T> ReduceRow<T>(this Matrix<T> matrix, uint row) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. System.UInt32 row index of matrix which reduce column. Returns Type Description Matrix <T> A new matrix without the chosen row. Type Parameters Name Description T unmanaged type. | Improve this Doc View Source SplitMatrix<T>(Matrix<T>, out Matrix<T>, out Matrix<T>, out Matrix<T>, out Matrix<T>) Splits matrix by 4 parts. Declaration public static void SplitMatrix<T>(this Matrix<T> a, out Matrix<T> a11, out Matrix<T> a12, out Matrix<T> a21, out Matrix<T> a22) where T : struct Parameters Type Name Description Matrix <T> a the matrix which want splits. Matrix <T> a11 the matrix a11. Matrix <T> a12 the matrix a12. Matrix <T> a21 the matrix a21. Matrix <T> a22 the matrix a22. Type Parameters Name Description T unmanaged type Exceptions Type Condition MatrixDotNetException The matrix is not square. | Improve this Doc View Source SwapColumns<T>(Matrix<T>, Int32, Int32) Swap rows of matrix. Declaration public static void SwapColumns<T>(this Matrix<T> matrix, int indexDimension1, int indexDimension2) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. System.Int32 indexDimension1 the dimension 1 System.Int32 indexDimension2 the dimension 2 Type Parameters Name Description T unmanaged type Exceptions Type Condition MatrixDotNetException throws exception if indexDimension1 equals indexDimension2 or matrix is null | Improve this Doc View Source SwapRows<T>(Matrix<T>, Int32, Int32) Swap rows of matrix. Declaration public static void SwapRows<T>(this Matrix<T> matrix, int dimension1, int dimension2) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. System.Int32 dimension1 the dimension 1 System.Int32 dimension2 the dimension 2 Type Parameters Name Description T unmanaged type Exceptions Type Condition MatrixDotNetException throws exception if indexDimension1 equals indexDimension2 or matrix is null | Improve this Doc View Source ToIdentityMatrix<T>(Matrix<T>) Changes this matrix to identity matrix. Declaration public static void ToIdentityMatrix<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Type Parameters Name Description T unmanaged type. Exceptions Type Condition MatrixDotNetException throws exception if matrix is not square | Improve this Doc View Source ToMatrix<T>(T[,]) Convert primitive matrix to Matrix<T> . Declaration public static Matrix<T> ToMatrix<T>(this T[, ] matrix) where T : struct Parameters Type Name Description T[,] matrix primitive matrix. Returns Type Description Matrix <T> Type Parameters Name Description T unmanaged type. | Improve this Doc View Source ToPrimitive<T>(Matrix<T>) Convert matrix to primitive matrix. Declaration public static T[, ] ToPrimitive<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix A Returns Type Description T[,] primitive matrix Type Parameters Name Description T unmanaged type | Improve this Doc View Source Transpose<T>(Matrix<T>) Gets transport matrix. Declaration public static Matrix<T> Transpose<T>(this Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix the matrix. Returns Type Description Matrix <T> Transpose matrix Type Parameters Name Description T unmanaged type."
  },
  "api/MatrixDotNet.Extensions.Statistics.TableSetup.SetupVariations-1.html": {
    "href": "api/MatrixDotNet.Extensions.Statistics.TableSetup.SetupVariations-1.html",
    "title": "Class SetupVariations<T> | MatrixDotNet",
    "keywords": "Class SetupVariations<T> Represents store data such as matrix, tables. Share variations operations. Inheritance System.Object Setup <T> SetupVariations<T> Variations<T> Inherited Members Setup<T>.Matrix Setup<T>.ColumnNames Setup<T>.ColumnNumber Setup<T>.FindColumn(Int32) Namespace : MatrixDotNet.Extensions.Statistics.TableSetup Assembly : MatrixDotNet.dll Syntax public abstract class SetupVariations<T> : Setup<T> where T : struct Type Parameters Name Description T unmanaged type. Constructors | Improve this Doc View Source SetupVariations(ConfigVariations<T>) Initialize settings for Variations Declaration protected SetupVariations(ConfigVariations<T> variations) Parameters Type Name Description ConfigVariations <T> variations configuration. Properties | Improve this Doc View Source Variations Gets table variations. Declaration protected TableVariations[] Variations { get; } Property Value Type Description TableVariations [] Methods | Improve this Doc View Source GetIndexColumn(TableVariations) Gets index column in matrix. Declaration protected int GetIndexColumn(TableVariations tableVariations) Parameters Type Name Description TableVariations tableVariations the table Returns Type Description System.Int32 Index of column"
  },
  "api/MatrixDotNet.Extensions.Performance.Operations.html": {
    "href": "api/MatrixDotNet.Extensions.Performance.Operations.html",
    "title": "Namespace MatrixDotNet.Extensions.Performance.Operations | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Extensions.Performance.Operations Classes Optimization"
  },
  "api/MatrixDotNet.Extensions.Sorting.html": {
    "href": "api/MatrixDotNet.Extensions.Sorting.html",
    "title": "Namespace MatrixDotNet.Extensions.Sorting | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Extensions.Sorting Classes MatrixSortExtension"
  },
  "api/MatrixDotNet.Math.MathGeneric.html": {
    "href": "api/MatrixDotNet.Math.MathGeneric.html",
    "title": "Class MathGeneric | MatrixDotNet",
    "keywords": "Class MathGeneric Inheritance System.Object MathGeneric Namespace : MatrixDotNet.Math Assembly : MatrixDotNet.Math.dll Syntax public static class MathGeneric : object Methods | Improve this Doc View Source IsFloatingPoint<T>() Declaration public static bool IsFloatingPoint<T>() Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source IsInteger<T>() Declaration public static bool IsInteger<T>() Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source IsSupported<T>() Declaration public static bool IsSupported<T>() Returns Type Description System.Boolean Type Parameters Name Description T"
  },
  "api/MatrixDotNet.Extensions.Criteries.Criterion.html": {
    "href": "api/MatrixDotNet.Extensions.Criteries.Criterion.html",
    "title": "Class Criterion | MatrixDotNet",
    "keywords": "Class Criterion Inheritance System.Object Criterion Namespace : MatrixDotNet.Extensions.Criteries Assembly : MatrixDotNet.dll Syntax public static class Criterion : object Methods | Improve this Doc View Source SylvestersCriterion<T>(Matrix<T>) Declaration public static DefiniteType SylvestersCriterion<T>(Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix Returns Type Description DefiniteType Type Parameters Name Description T"
  },
  "api/MatrixDotNet.Math.MathUnsafe-1.html": {
    "href": "api/MatrixDotNet.Math.MathUnsafe-1.html",
    "title": "Class MathUnsafe<T> | MatrixDotNet",
    "keywords": "Class MathUnsafe<T> Inheritance System.Object MathUnsafe<T> Namespace : MatrixDotNet.Math Assembly : MatrixDotNet.Math.dll Syntax public static class MathUnsafe<T> : object where T : struct Type Parameters Name Description T Methods | Improve this Doc View Source Abs(T) Declaration public static T Abs(T arg) Parameters Type Name Description T arg Returns Type Description T | Improve this Doc View Source Add(T, T) Declaration public static T Add(T left, T right) Parameters Type Name Description T left T right Returns Type Description T | Improve this Doc View Source Div(T, T) Declaration public static T Div(T left, T right) Parameters Type Name Description T left T right Returns Type Description T | Improve this Doc View Source Mod(T, T) Declaration public static T Mod(T left, T right) Parameters Type Name Description T left T right Returns Type Description T | Improve this Doc View Source Mul(T, T) Declaration public static T Mul(T left, T right) Parameters Type Name Description T left T right Returns Type Description T | Improve this Doc View Source ShiftLeft(T, T) Declaration public static T ShiftLeft(T left, T right) Parameters Type Name Description T left T right Returns Type Description T | Improve this Doc View Source ShiftRight(T, T) Declaration public static T ShiftRight(T left, T right) Parameters Type Name Description T left T right Returns Type Description T | Improve this Doc View Source Sub(T, T) Declaration public static T Sub(T left, T right) Parameters Type Name Description T left T right Returns Type Description T"
  },
  "api/MatrixDotNet.Extensions.Builder.html": {
    "href": "api/MatrixDotNet.Extensions.Builder.html",
    "title": "Namespace MatrixDotNet.Extensions.Builder | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Extensions.Builder Classes BuildMatrix Represents the functional of build matrix."
  },
  "api/MatrixDotNet.Extensions.Core.MatrixAsFixedBuffer.html": {
    "href": "api/MatrixDotNet.Extensions.Core.MatrixAsFixedBuffer.html",
    "title": "Struct MatrixAsFixedBuffer | MatrixDotNet",
    "keywords": "Struct MatrixAsFixedBuffer Namespace : MatrixDotNet.Extensions.Core Assembly : MatrixDotNet.NetCore.dll Syntax public struct MatrixAsFixedBuffer Constructors | Improve this Doc View Source MatrixAsFixedBuffer(Byte, Byte) Initialize empty matrix. Declaration public MatrixAsFixedBuffer(byte rows, byte columns) Parameters Type Name Description System.Byte rows System.Byte columns | Improve this Doc View Source MatrixAsFixedBuffer(Double[], Int32, Int32) Initialize matrix. Declaration public MatrixAsFixedBuffer(double[] matrix, int m, int n) Parameters Type Name Description System.Double [] matrix the matrix System.Int32 m number of rows of the matrix System.Int32 n number of columns of the matrix | Improve this Doc View Source MatrixAsFixedBuffer(Double[,]) Initialize matrix. Declaration public MatrixAsFixedBuffer(double[, ] matrix) Parameters Type Name Description System.Double [,] matrix the matrix Properties | Improve this Doc View Source Columns Declaration public byte Columns { get; } Property Value Type Description System.Byte | Improve this Doc View Source Data Gets data of matrix as span. Declaration public Span<double> Data { get; } Property Value Type Description Span < System.Double > | Improve this Doc View Source IsPrime Declaration public bool IsPrime { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSquare Declaration public bool IsSquare { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Gets arr of matrix. Declaration public Span<double> this[int i] { get; set; } Parameters Type Name Description System.Int32 i the row Property Value Type Description Span < System.Double > | Improve this Doc View Source Item[Int32, Int32] Gets value by ref. Declaration public double this[int i, int j] { get; } Parameters Type Name Description System.Int32 i the row. System.Int32 j the column. Property Value Type Description System.Double | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Rows Declaration public byte Rows { get; } Property Value Type Description System.Byte Methods | Improve this Doc View Source AddByRef(ref MatrixAsFixedBuffer, ref MatrixAsFixedBuffer) Adds two matrices. Declaration public static MatrixAsFixedBuffer AddByRef(ref MatrixAsFixedBuffer left, ref MatrixAsFixedBuffer right) Parameters Type Name Description MatrixAsFixedBuffer left the left matrix. MatrixAsFixedBuffer right the right matrix. Returns Type Description MatrixAsFixedBuffer Exceptions Type Condition MatrixDotNetException matrices are not equal | Improve this Doc View Source GetColumn(Int32) Gets column by row. Declaration public Span<double> GetColumn(int column) Parameters Type Name Description System.Int32 column the column. Returns Type Description Span < System.Double > | Improve this Doc View Source MulByRef(ref MatrixAsFixedBuffer, ref MatrixAsFixedBuffer) Multiplies two matrices with fixed buffer. Declaration public static MatrixAsFixedBuffer MulByRef(ref MatrixAsFixedBuffer left, ref MatrixAsFixedBuffer right) Parameters Type Name Description MatrixAsFixedBuffer left the left matrix. MatrixAsFixedBuffer right the right matrix. Returns Type Description MatrixAsFixedBuffer new matrix from multiply of two matrices Exceptions Type Condition MatrixDotNetException throws exception if length columns of left matrix not equal length rows of right matrix | Improve this Doc View Source SetColumn(Int32, Span<Double>) Sets column by index of column matrix. Declaration public void SetColumn(int column, Span<double> data) Parameters Type Name Description System.Int32 column the index. Span < System.Double > data the data. | Improve this Doc View Source SubByRef(ref MatrixAsFixedBuffer, ref MatrixAsFixedBuffer) Subtracts two matrices via AVX(if supported) or unsafe. Declaration public static MatrixAsFixedBuffer SubByRef(ref MatrixAsFixedBuffer left, ref MatrixAsFixedBuffer right) Parameters Type Name Description MatrixAsFixedBuffer left the matrix with fixed buffer. MatrixAsFixedBuffer right the matrix with fixed buffer. Returns Type Description MatrixAsFixedBuffer new matrix from subtract two matrices. Exceptions Type Condition MatrixDotNetException matrices not equal by size. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Operators | Improve this Doc View Source Implicit(Matrix<Double> to MatrixAsFixedBuffer) init implicit of matrix. Declaration public static implicit operator MatrixAsFixedBuffer(Matrix<double> matrix) Parameters Type Name Description Matrix < System.Double > matrix the matrix Returns Type Description MatrixAsFixedBuffer init matrix as fixed buffer | Improve this Doc View Source Implicit(Double[,] to MatrixAsFixedBuffer) init implicit of matrix. Declaration public static implicit operator MatrixAsFixedBuffer(double[, ] matrix) Parameters Type Name Description System.Double [,] matrix the matrix Returns Type Description MatrixAsFixedBuffer init matrix as fixed buffer"
  },
  "api/MatrixDotNet.Extensions.Decompositions.html": {
    "href": "api/MatrixDotNet.Extensions.Decompositions.html",
    "title": "Namespace MatrixDotNet.Extensions.Decompositions | MatrixDotNet",
    "keywords": "Namespace MatrixDotNet.Extensions.Decompositions Classes Decomposition Represents any algorithm`s for decomposition of matrix."
  },
  "api/MatrixDotNet.Extensions.Options.TemplateHtml.html": {
    "href": "api/MatrixDotNet.Extensions.Options.TemplateHtml.html",
    "title": "Class TemplateHtml | MatrixDotNet",
    "keywords": "Class TemplateHtml Inheritance System.Object Template TemplateHtml Inherited Members Template.Title Template.Assembly Template.RootPath Template.Rows Template.Columns Template.RelativePath Template.FullPath Template.Open() Template.BinarySaveAsync<T>(Matrix<T>) Template.BinaryOpenAsync<T>() Namespace : MatrixDotNet.Extensions.Options Assembly : MatrixDotNet.dll Syntax public sealed class TemplateHtml : Template Constructors | Improve this Doc View Source TemplateHtml(String) Declaration public TemplateHtml(string title) Parameters Type Name Description System.String title Properties | Improve this Doc View Source FileExtension Declaration public override string FileExtension { get; } Property Value Type Description System.String Overrides Template.FileExtension Methods | Improve this Doc View Source CreateText<T>(Matrix<T>) Declaration public override string CreateText<T>(Matrix<T> matrix) where T : struct Parameters Type Name Description Matrix <T> matrix Returns Type Description System.String Type Parameters Name Description T Overrides MatrixDotNet.Extensions.Options.Template.CreateText<T>(MatrixDotNet.Matrix<T>)"
  },
  "api/MatrixDotNet.Extensions.Statistics.Variations-1.html": {
    "href": "api/MatrixDotNet.Extensions.Statistics.Variations-1.html",
    "title": "Class Variations<T> | MatrixDotNet",
    "keywords": "Class Variations<T> Represents calculations any variations operations. Inheritance System.Object Setup <T> SetupVariations <T> Variations<T> Inherited Members SetupVariations<T>.Variations SetupVariations<T>.GetIndexColumn(TableVariations) Setup<T>.Matrix Setup<T>.ColumnNames Setup<T>.ColumnNumber Setup<T>.FindColumn(Int32) Namespace : MatrixDotNet.Extensions.Statistics Assembly : MatrixDotNet.dll Syntax public sealed class Variations<T> : SetupVariations<T> where T : struct Type Parameters Name Description T unmanaged type. Constructors | Improve this Doc View Source Variations(ConfigVariations<T>) Initialize configuration. Declaration public Variations(ConfigVariations<T> variations) Parameters Type Name Description ConfigVariations <T> variations configuration Properties | Improve this Doc View Source Coefficient Gets coefficient of variations. Declaration public T Coefficient { get; } Property Value Type Description T Coefficient of variations | Improve this Doc View Source CorrectedStandardDeviation Gets corrected standard deviation. Declaration public T CorrectedStandardDeviation { get; } Property Value Type Description T Remarks Finds by formula: sqrt(s^2). | Improve this Doc View Source IsUniform Checks on uniform Coefficient of variations. Declaration public bool IsUniform { get; } Property Value Type Description System.Boolean | Improve this Doc View Source StandardDeviation Gets standard deviation Declaration public T StandardDeviation { get; } Property Value Type Description T Methods | Improve this Doc View Source GetCorrectedDispersion() Gets corrected dispersion. Declaration public T GetCorrectedDispersion() Returns Type Description T Remarks Finds by formula: s^2 = (n / (n - 1)) * Dispersion(sample) | Improve this Doc View Source GetMeanLinearDeviation() Gets mean linear deviation. Declaration public T GetMeanLinearDeviation() Returns Type Description T mean linear deviation. | Improve this Doc View Source GetModulesDevMean() Gets modules of deviations from the mean. Declaration public T[] GetModulesDevMean() Returns Type Description T[] Modules of deviations from the mean. | Improve this Doc View Source GetRangeVariation() Gets swing of variations. Declaration public T GetRangeVariation() Returns Type Description T | Improve this Doc View Source GetRangeVariation(TableVariations) Gets range of variations by table column in matrix. Declaration public T GetRangeVariation(TableVariations table) Parameters Type Name Description TableVariations table the table. Returns Type Description T range of variations by table column of matrix. | Improve this Doc View Source GetRangeVariation(Int32) Gets range of variations by index column in matrix. Declaration public T GetRangeVariation(int index) Parameters Type Name Description System.Int32 index Returns Type Description T range of variations by column index of matrix. | Improve this Doc View Source GetSampleDispersion() Gets sample dispersion of matrix. Declaration public T GetSampleDispersion() Returns Type Description T | Improve this Doc View Source GetSampleMeanByTable(TableVariations) Gets mean value by column table. Declaration public T GetSampleMeanByTable(TableVariations table) Parameters Type Name Description TableVariations table the table Returns Type Description T mean value by column table."
  },
  "api/MatrixDotNet.Extensions.Statistics.TableSetup.TableVariations.html": {
    "href": "api/MatrixDotNet.Extensions.Statistics.TableSetup.TableVariations.html",
    "title": "Enum TableVariations | MatrixDotNet",
    "keywords": "Enum TableVariations Represents columns for matrix variations. Namespace : MatrixDotNet.Extensions.Statistics.TableSetup Assembly : MatrixDotNet.dll Syntax public enum TableVariations : int Fields Name Description Column Fi Ni OmegaI Xi"
  },
  "api/MatrixDotNet.Vector-1.html": {
    "href": "api/MatrixDotNet.Vector-1.html",
    "title": "Class Vector<T> | MatrixDotNet",
    "keywords": "Class Vector<T> Inheritance System.Object Vector<T> Namespace : MatrixDotNet Assembly : MatrixDotNet.dll Syntax public class Vector<T> : object where T : struct Type Parameters Name Description T Constructors | Improve this Doc View Source Vector(T[]) Assign array Declaration public Vector(T[] array) Parameters Type Name Description T[] array | Improve this Doc View Source Vector(Int32) Declaration public Vector(int n) Parameters Type Name Description System.Int32 n | Improve this Doc View Source Vector(Int32, T) Initialize Vector and fill vector of specify value. Declaration public Vector(int length, T fill) Parameters Type Name Description System.Int32 length the length of array T fill fill vector of specify value Properties | Improve this Doc View Source Array Declaration public T[] Array { get; } Property Value Type Description T[] | Improve this Doc View Source Item[Int32] Declaration public T this[int i] { get; set; } Parameters Type Name Description System.Int32 i Property Value Type Description T | Improve this Doc View Source Length Gets length of array. Declaration public int Length { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source GetLengthVec() Gets length of vector Declaration public T GetLengthVec() Returns Type Description T | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Operators | Improve this Doc View Source Addition(T[], Vector<T>) Declaration public static Vector<T> operator +(T[] a, Vector<T> b) Parameters Type Name Description T[] a Vector <T> b Returns Type Description Vector <T> | Improve this Doc View Source Addition(Vector<T>, T[]) Declaration public static Vector<T> operator +(Vector<T> a, T[] b) Parameters Type Name Description Vector <T> a T[] b Returns Type Description Vector <T> | Improve this Doc View Source Addition(Vector<T>, Vector<T>) Declaration public static Vector<T> operator +(Vector<T> a, Vector<T> b) Parameters Type Name Description Vector <T> a Vector <T> b Returns Type Description Vector <T> | Improve this Doc View Source Equality(Vector<T>, Vector<T>) Declaration public static bool operator ==(Vector<T> a, Vector<T> b) Parameters Type Name Description Vector <T> a Vector <T> b Returns Type Description System.Boolean | Improve this Doc View Source Implicit(T[] to Vector<T>) Declaration public static implicit operator Vector<T>(T[] arr) Parameters Type Name Description T[] arr Returns Type Description Vector <T> | Improve this Doc View Source Inequality(Vector<T>, Vector<T>) Declaration public static bool operator !=(Vector<T> a, Vector<T> b) Parameters Type Name Description Vector <T> a Vector <T> b Returns Type Description System.Boolean | Improve this Doc View Source Multiply(T, Vector<T>) Declaration public static Vector<T> operator *(T a, Vector<T> b) Parameters Type Name Description T a Vector <T> b Returns Type Description Vector <T> | Improve this Doc View Source Multiply(Vector<T>, T) Declaration public static Vector<T> operator *(Vector<T> a, T b) Parameters Type Name Description Vector <T> a T b Returns Type Description Vector <T> | Improve this Doc View Source Multiply(Vector<T>, Vector<T>) Declaration public static T operator *(Vector<T> a, Vector<T> b) Parameters Type Name Description Vector <T> a Vector <T> b Returns Type Description T | Improve this Doc View Source Subtraction(T[], Vector<T>) Declaration public static Vector<T> operator -(T[] a, Vector<T> b) Parameters Type Name Description T[] a Vector <T> b Returns Type Description Vector <T> | Improve this Doc View Source Subtraction(Vector<T>, T[]) Declaration public static Vector<T> operator -(Vector<T> a, T[] b) Parameters Type Name Description Vector <T> a T[] b Returns Type Description Vector <T> | Improve this Doc View Source Subtraction(Vector<T>, Vector<T>) Declaration public static Vector<T> operator -(Vector<T> a, Vector<T> b) Parameters Type Name Description Vector <T> a Vector <T> b Returns Type Description Vector <T> Extension Methods VectorExtension.Min<T>(Vector<T>) VectorExtension.Max<T>(Vector<T>) VectorExtension.Sort<T>(Vector<T>)"
  },
  "api/MatrixDotNet.MatrixComplex.html": {
    "href": "api/MatrixDotNet.MatrixComplex.html",
    "title": "Class MatrixComplex | MatrixDotNet",
    "keywords": "Class MatrixComplex Inheritance System.Object MatrixComplex Namespace : MatrixDotNet Assembly : MatrixDotNet.dll Syntax public class MatrixComplex : object Constructors | Improve this Doc View Source MatrixComplex(Int32, Int32) Declaration public MatrixComplex(int m, int n) Parameters Type Name Description System.Int32 m System.Int32 n Properties | Improve this Doc View Source Columns Declaration public int Columns { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32, Int32] Declaration public Complex this[int i, int j] { get; set; } Parameters Type Name Description System.Int32 i System.Int32 j Property Value Type Description Complex | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Matrix Declaration public Complex[, ] Matrix { get; } Property Value Type Description Complex [,] | Improve this Doc View Source Rows Declaration public int Rows { get; } Property Value Type Description System.Int32 Operators | Improve this Doc View Source Addition(MatrixComplex, MatrixComplex) Declaration public static MatrixComplex operator +(MatrixComplex left, MatrixComplex right) Parameters Type Name Description MatrixComplex left MatrixComplex right Returns Type Description MatrixComplex | Improve this Doc View Source Division(MatrixComplex, Double) Declaration public static MatrixComplex operator /(MatrixComplex left, double right) Parameters Type Name Description MatrixComplex left System.Double right Returns Type Description MatrixComplex | Improve this Doc View Source Division(Double, MatrixComplex) Declaration public static MatrixComplex operator /(double right, MatrixComplex left) Parameters Type Name Description System.Double right MatrixComplex left Returns Type Description MatrixComplex | Improve this Doc View Source Multiply(MatrixComplex, MatrixComplex) Declaration public static MatrixComplex operator *(MatrixComplex left, MatrixComplex right) Parameters Type Name Description MatrixComplex left MatrixComplex right Returns Type Description MatrixComplex | Improve this Doc View Source Multiply(MatrixComplex, Double) Declaration public static MatrixComplex operator *(MatrixComplex left, double right) Parameters Type Name Description MatrixComplex left System.Double right Returns Type Description MatrixComplex | Improve this Doc View Source Multiply(Double, MatrixComplex) Declaration public static MatrixComplex operator *(double right, MatrixComplex left) Parameters Type Name Description System.Double right MatrixComplex left Returns Type Description MatrixComplex | Improve this Doc View Source Subtraction(MatrixComplex, MatrixComplex) Declaration public static MatrixComplex operator -(MatrixComplex left, MatrixComplex right) Parameters Type Name Description MatrixComplex left MatrixComplex right Returns Type Description MatrixComplex"
  },
  "api/MatrixDotNet.Math.MathExtension.html": {
    "href": "api/MatrixDotNet.Math.MathExtension.html",
    "title": "Class MathExtension | MatrixDotNet",
    "keywords": "Class MathExtension Inheritance System.Object MathExtension Namespace : MatrixDotNet.Math Assembly : MatrixDotNet.Math.dll Syntax public static class MathExtension : object Methods | Improve this Doc View Source Abs<T>(T) Declaration public static T Abs<T>(T left) Parameters Type Name Description T left Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Add<T1, T2>(T1, T2) Declaration public static T1 Add<T1, T2>(T1 left, T2 right) Parameters Type Name Description T1 left T2 right Returns Type Description T1 Type Parameters Name Description T1 T2 | Improve this Doc View Source Add<T1, T2, TR>(T1, T2) Declaration public static TR Add<T1, T2, TR>(T1 left, T2 right) Parameters Type Name Description T1 left T2 right Returns Type Description TR Type Parameters Name Description T1 T2 TR | Improve this Doc View Source AddBy<T1, T2>(T1, T2) Declaration public static T1 AddBy<T1, T2>(T1 left, T2 right) Parameters Type Name Description T1 left T2 right Returns Type Description T1 Type Parameters Name Description T1 T2 | Improve this Doc View Source Cast<TSource, TResult>(TSource) Declaration public static TResult Cast<TSource, TResult>(TSource arg) Parameters Type Name Description TSource arg Returns Type Description TResult Type Parameters Name Description TSource TResult | Improve this Doc View Source Divide<T1, T2>(T1, T2) Declaration public static T1 Divide<T1, T2>(T1 left, T2 right) Parameters Type Name Description T1 left T2 right Returns Type Description T1 Type Parameters Name Description T1 T2 | Improve this Doc View Source Divide<T1, T2, TR>(T1, T2) Declaration public static TR Divide<T1, T2, TR>(T1 left, T2 right) Parameters Type Name Description T1 left T2 right Returns Type Description TR Type Parameters Name Description T1 T2 TR | Improve this Doc View Source DivideBy<T1, T2>(T1, T2) Declaration public static T1 DivideBy<T1, T2>(T1 left, T2 right) Parameters Type Name Description T1 left T2 right Returns Type Description T1 Type Parameters Name Description T1 T2 | Improve this Doc View Source Equal<T>(T, T) Declaration public static bool Equal<T>(T left, T right) where T : struct Parameters Type Name Description T left T right Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source GetAbsFunc<T>() Declaration public static Func<T, T> GetAbsFunc<T>() Returns Type Description Func <T, T> Type Parameters Name Description T | Improve this Doc View Source GetAddFunc<T1, T2, TR>() Declaration public static Func<T1, T2, TR> GetAddFunc<T1, T2, TR>() Returns Type Description Func <T1, T2, TR> Type Parameters Name Description T1 T2 TR | Improve this Doc View Source GetDivideFunc<T1, T2, TR>() Declaration public static Func<T1, T2, TR> GetDivideFunc<T1, T2, TR>() Returns Type Description Func <T1, T2, TR> Type Parameters Name Description T1 T2 TR | Improve this Doc View Source GetIncrementFunc<T>() Declaration public static Func<T, T> GetIncrementFunc<T>() Returns Type Description Func <T, T> Type Parameters Name Description T | Improve this Doc View Source GetMultiplyFunc<T1, T2, TR>() Declaration public static Func<T1, T2, TR> GetMultiplyFunc<T1, T2, TR>() Returns Type Description Func <T1, T2, TR> Type Parameters Name Description T1 T2 TR | Improve this Doc View Source GetNegateFunc<T>() Declaration public static Func<T, T> GetNegateFunc<T>() Returns Type Description Func <T, T> Type Parameters Name Description T | Improve this Doc View Source GetSubFunc<T1, T2, TR>() Declaration public static Func<T1, T2, TR> GetSubFunc<T1, T2, TR>() Returns Type Description Func <T1, T2, TR> Type Parameters Name Description T1 T2 TR | Improve this Doc View Source GreaterThan<T>(T, T) Declaration public static bool GreaterThan<T>(T left, T right) where T : struct Parameters Type Name Description T left T right Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source GreaterThanBy<T, U>(T, U) Declaration public static bool GreaterThanBy<T, U>(T left, U right) where T : struct Parameters Type Name Description T left U right Returns Type Description System.Boolean Type Parameters Name Description T U | Improve this Doc View Source GreaterThanOrEqual<T>(T, T) Declaration public static bool GreaterThanOrEqual<T>(T left, T right) where T : struct Parameters Type Name Description T left T right Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source Increment<T>(T) Declaration public static T Increment<T>(T left) Parameters Type Name Description T left Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source IsFloatingPoint<T>() Declaration public static bool IsFloatingPoint<T>() Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source IsInteger<T>() Declaration public static bool IsInteger<T>() Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source IsSupported<T>() Declaration public static bool IsSupported<T>() Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source Multiply<T1, T2>(T1, T2) Declaration public static T1 Multiply<T1, T2>(T1 left, T2 right) Parameters Type Name Description T1 left T2 right Returns Type Description T1 Type Parameters Name Description T1 T2 | Improve this Doc View Source Multiply<T1, T2, TR>(T1, T2) Declaration public static TR Multiply<T1, T2, TR>(T1 left, T2 right) Parameters Type Name Description T1 left T2 right Returns Type Description TR Type Parameters Name Description T1 T2 TR | Improve this Doc View Source MultiplyBy<T1, T2>(T1, T2) Declaration public static T1 MultiplyBy<T1, T2>(T1 left, T2 right) Parameters Type Name Description T1 left T2 right Returns Type Description T1 Type Parameters Name Description T1 T2 | Improve this Doc View Source Negate<T>(T) Declaration public static T Negate<T>(T left) Parameters Type Name Description T left Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source NotEqual<T>(T, T) Declaration public static bool NotEqual<T>(T left, T right) where T : struct Parameters Type Name Description T left T right Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source Random<T>(Int32, Int32) Declaration public static T Random<T>(int start, int end) Parameters Type Name Description System.Int32 start System.Int32 end Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Sqrt<T>() Declaration public static Func<T, T> Sqrt<T>() Returns Type Description Func <T, T> Type Parameters Name Description T | Improve this Doc View Source Sqrt<T>(T) Declaration public static T Sqrt<T>(T arg) Parameters Type Name Description T arg Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Sub<T1, T2>(T1, T2) Declaration public static T1 Sub<T1, T2>(T1 left, T2 right) Parameters Type Name Description T1 left T2 right Returns Type Description T1 Type Parameters Name Description T1 T2 | Improve this Doc View Source Sub<T1, T2, TR>(T1, T2) Declaration public static TR Sub<T1, T2, TR>(T1 left, T2 right) Parameters Type Name Description T1 left T2 right Returns Type Description TR Type Parameters Name Description T1 T2 TR | Improve this Doc View Source SubBy<T1, T2>(T1, T2) Declaration public static T1 SubBy<T1, T2>(T1 left, T2 right) Parameters Type Name Description T1 left T2 right Returns Type Description T1 Type Parameters Name Description T1 T2"
  },
  "api/MatrixDotNet.Extensions.Criteries.DefiniteType.html": {
    "href": "api/MatrixDotNet.Extensions.Criteries.DefiniteType.html",
    "title": "Enum DefiniteType | MatrixDotNet",
    "keywords": "Enum DefiniteType Represents quadratic form. Namespace : MatrixDotNet.Extensions.Criteries Assembly : MatrixDotNet.dll Syntax public enum DefiniteType : int Fields Name Description Alternating Negative Positive"
  }
}